// Code generated by hertz generator.

package api

import (
	"context"
	"errors"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	hertzconsts "github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/jinzhu/copier"
	"github.com/keycasiter/3g_game/biz/consts"
	"github.com/keycasiter/3g_game/biz/dal/mysql"
	"github.com/keycasiter/3g_game/biz/logic"
	api "github.com/keycasiter/3g_game/biz/model/api"
	"github.com/keycasiter/3g_game/biz/model/common"
	"github.com/keycasiter/3g_game/biz/model/enum"
	"github.com/keycasiter/3g_game/biz/model/po"
	"github.com/keycasiter/3g_game/biz/model/vo"
	"github.com/keycasiter/3g_game/biz/util"
	"github.com/spf13/cast"
)

// BattleExecute .模拟对战
// @router /v1/battle/execute [POST]
func BattleExecute(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.BattleExecuteRequest
	resp := new(api.BattleExecuteResponse)

	err = c.BindAndValidate(&req)
	//日志打印
	//hlog.CtxInfof(ctx, "BattleExecute Req:%s", util.ToJsonString(ctx, req))

	if err != nil {
		hlog.CtxErrorf(ctx, "BattleLogicContext Run Err:%v", err)
		resp.Meta = &common.Meta{
			StatusCode: enum.ResponseCode_UnknownError,
			StatusMsg:  "未知错误",
		}

		c.JSON(hertzconsts.StatusOK, resp)
		return
	}

	//参数校验
	if err := checkParam(req); err != nil {
		hlog.CtxWarnf(ctx, "BattleLogicContext Param Err:%v", err)
		resp.Meta = &common.Meta{
			StatusCode: enum.ResponseCode_ParamInvalid,
			StatusMsg:  "参数错误:" + err.Error(),
		}

		c.JSON(hertzconsts.StatusOK, resp)
		return
	}

	//逻辑执行
	serviceResp, err := logic.NewBattleLogicContext(ctx, buildBattleExecuteRequest(ctx, req)).Run()
	if err != nil {
		hlog.CtxErrorf(ctx, "BattleLogicContext Run Err:%v", err)
		resp.Meta = &common.Meta{
			StatusCode: enum.ResponseCode_UnknownError,
			StatusMsg:  "未知错误",
		}

		c.JSON(hertzconsts.StatusOK, resp)
		return
	}

	//组合resp
	copier.Copy(resp, serviceResp)
	resp.Meta = &common.Meta{
		StatusCode: enum.ResponseCode_Success,
		StatusMsg:  "成功",
	}
	c.JSON(hertzconsts.StatusOK, resp)
	//日志打印
	//hlog.CtxInfof(ctx, "BattleExecute Resp:%s", util.ToJsonString(ctx, resp))
}

func buildBattleExecuteRequest(ctx context.Context, req api.BattleExecuteRequest) *logic.BattleLogicContextRequest {
	//查询武将信息
	generalIds := make([]int64, 0)
	for _, general := range req.FightingTeam.BattleGenerals {
		generalIds = append(generalIds, general.BaseInfo.Id)
	}
	for _, general := range req.EnemyTeam.BattleGenerals {
		generalIds = append(generalIds, general.BaseInfo.Id)
	}
	generals, err := mysql.NewGeneral().QueryGeneralList(ctx, &vo.QueryGeneralCondition{
		Ids:    generalIds,
		Offset: 0,
		Limit:  len(generalIds),
	})
	if err != nil {
		hlog.CtxErrorf(ctx, "QueryGeneralList err:%v", err)
		return nil
	}
	//整理成map
	generalInfoMap := make(map[int64]*po.General, 0)
	for _, general := range generals {
		generalInfoMap[general.Id] = general
	}

	//我方信息
	fightingTeamGenerals := make([]*vo.BattleGeneral, 0)
	for _, general := range req.FightingTeam.BattleGenerals {
		//我方武将信息（从db获取）
		generalInfo := &po.General{}
		if info, ok := generalInfoMap[general.BaseInfo.Id]; ok {
			generalInfo = info
		} else {
			panic(fmt.Sprintf("武将信息不存在:%d", general.BaseInfo.Id))
		}
		//武将标签
		generalTags := make([]consts.GeneralTag, 0)
		for _, tag := range generalInfo.Tag {
			generalTags = append(generalTags, consts.GeneralTag(tag))
		}
		//佩戴战法(自带战法+选择战法)
		equipTactics := make([]*po.Tactics, 0)
		for _, tactic := range general.EquipTactics {
			equipTactics = append(equipTactics, &po.Tactics{
				Id:            consts.TacticId(tactic.Id),
				Name:          tactic.Name,
				TacticsSource: consts.TacticsSource(tactic.TacticsSource),
				Type:          consts.TacticsType(tactic.Type),
			})
		}
		//武将信息
		fightingTeamGenerals = append(fightingTeamGenerals, &vo.BattleGeneral{
			//基础信息
			BaseInfo: &po.MetadataGeneral{
				//ID，从参数获取
				Id: general.BaseInfo.Id,
				//姓名，从db获取
				Name: generalInfo.Name,
				//阵营，从db获取
				Group: consts.Group(generalInfo.Group),
				//标签，从db获取
				GeneralTag: generalTags,
				//能力值，从db获取
				AbilityAttr: buildAbilityAttr(ctx, generalInfo),
				//兵种适性，从参数获取
				ArmsAttr: buildArmsAttr(general),
				//我军/敌军，从参数获取
				GeneralBattleType: consts.GeneralBattleType(general.BaseInfo.GeneralBattleType),
				//本局对战唯一ID，系统每次生成
				UniqueId: util.GenerateUUID(),
			},
			//战法
			EquipTactics: equipTactics,
			//加点
			Addition: &vo.BattleGeneralAddition{
				//属性加点，从参数获取
				AbilityAttr: po.AbilityAttr{
					ForceBase:        general.Addition.AbilityAttr.ForceBase,
					IntelligenceBase: general.Addition.AbilityAttr.IntelligenceBase,
					CommandBase:      general.Addition.AbilityAttr.CommandBase,
					SpeedBase:        general.Addition.AbilityAttr.SpeedBase,
				},
				//武将等级，从参数获取
				GeneralLevel: consts.GeneralLevel(general.Addition.GeneralLevel),
				//武将红度，从参数获取
				GeneralStarLevel: consts.GeneralStarLevel(general.Addition.GeneralStarLevel),
			},
			//是否主将，从参数获取
			IsMaster: general.IsMaster,
			//携带兵力，从参数获取
			SoldierNum: general.SoldierNum,
		})
	}

	//敌方信息
	enemyTeamGenerals := make([]*vo.BattleGeneral, 0)
	for _, general := range req.EnemyTeam.BattleGenerals {
		//我方武将信息（从db获取）
		generalInfo := &po.General{}
		if info, ok := generalInfoMap[general.BaseInfo.Id]; ok {
			generalInfo = info
		} else {
			panic(fmt.Sprintf("武将信息不存在:%d", general.BaseInfo.Id))
		}
		//武将标签
		generalTags := make([]consts.GeneralTag, 0)
		for _, tag := range generalInfo.Tag {
			generalTags = append(generalTags, consts.GeneralTag(tag))
		}
		//佩戴战法(自带战法+选择战法)
		equipTactics := make([]*po.Tactics, 0)
		for _, tactic := range general.EquipTactics {
			equipTactics = append(equipTactics, &po.Tactics{
				Id:            consts.TacticId(tactic.Id),
				Name:          tactic.Name,
				TacticsSource: consts.TacticsSource(tactic.TacticsSource),
				Type:          consts.TacticsType(tactic.Type),
			})
		}
		//武将信息
		enemyTeamGenerals = append(enemyTeamGenerals, &vo.BattleGeneral{
			//基础信息
			BaseInfo: &po.MetadataGeneral{
				//ID，从参数获取
				Id: general.BaseInfo.Id,
				//姓名，从db获取
				Name: generalInfo.Name,
				//阵营，从db获取
				Group: consts.Group(generalInfo.Group),
				//标签，从db获取
				GeneralTag: generalTags,
				//能力值，从db获取
				AbilityAttr: buildAbilityAttr(ctx, generalInfo),
				//兵种适性，从参数获取
				ArmsAttr: buildArmsAttr(general),
				//我军/敌军，从参数获取
				GeneralBattleType: consts.GeneralBattleType(general.BaseInfo.GeneralBattleType),
				//本局对战唯一ID，系统每次生成
				UniqueId: util.GenerateUUID(),
			},
			//战法
			EquipTactics: equipTactics,
			//加点
			Addition: &vo.BattleGeneralAddition{
				//属性加点，从参数获取
				AbilityAttr: po.AbilityAttr{
					ForceBase:        general.Addition.AbilityAttr.ForceBase,
					IntelligenceBase: general.Addition.AbilityAttr.IntelligenceBase,
					CommandBase:      general.Addition.AbilityAttr.CommandBase,
					SpeedBase:        general.Addition.AbilityAttr.SpeedBase,
				},
				//武将等级，从参数获取
				GeneralLevel: consts.GeneralLevel(general.Addition.GeneralLevel),
				//武将红度，从参数获取
				GeneralStarLevel: consts.GeneralStarLevel(general.Addition.GeneralStarLevel),
			},
			//是否主将，从参数获取
			IsMaster: general.IsMaster,
			//携带兵力，从参数获取
			SoldierNum: general.SoldierNum,
		})
	}

	//组装
	serviceReq := &logic.BattleLogicContextRequest{
		//我方
		FightingTeam: &vo.BattleTeam{
			TeamType:                  consts.TeamType(req.FightingTeam.TeamType),
			ArmType:                   consts.ArmType(req.FightingTeam.ArmType),
			BattleGenerals:            fightingTeamGenerals,
			BuildingTechAttrAddition:  makeBuildingTechAttrAddition(req.FightingTeam),
			BuildingTechGroupAddition: makeBuildingTechGroupAddition(req.FightingTeam),
		},
		//敌方
		EnemyTeam: &vo.BattleTeam{
			TeamType:                  consts.TeamType(req.EnemyTeam.TeamType),
			ArmType:                   consts.ArmType(req.EnemyTeam.ArmType),
			BattleGenerals:            enemyTeamGenerals,
			BuildingTechAttrAddition:  makeBuildingTechAttrAddition(req.EnemyTeam),
			BuildingTechGroupAddition: makeBuildingTechGroupAddition(req.EnemyTeam),
		},
	}
	return serviceReq
}

func makeBuildingTechGroupAddition(team *api.BattleTeam) vo.BuildingTechGroupAddition {
	if team.BuildingTechGroupAddition == nil {
		return vo.BuildingTechGroupAddition{}
	}
	return vo.BuildingTechGroupAddition{
		GroupWeiGuoRate:   team.BuildingTechGroupAddition.GroupWuGuoRate,
		GroupShuGuoRate:   team.BuildingTechGroupAddition.GroupShuGuoRate,
		GroupWuGuoRate:    team.BuildingTechGroupAddition.GroupWuGuoRate,
		GroupQunXiongRate: team.BuildingTechGroupAddition.GroupQunXiongRate,
	}
}

func makeBuildingTechAttrAddition(team *api.BattleTeam) vo.BuildingTechAttrAddition {
	if team.BuildingTechAttrAddition == nil {
		return vo.BuildingTechAttrAddition{}
	}

	return vo.BuildingTechAttrAddition{
		ForceAddition:        team.BuildingTechAttrAddition.ForceAddition,
		IntelligenceAddition: team.BuildingTechAttrAddition.IntelligenceAddition,
		CommandAddition:      team.BuildingTechAttrAddition.CommandAddition,
		SpeedAddition:        team.BuildingTechAttrAddition.SpeedAddition,
	}
}

func buildArmsAttr(general *api.BattleGeneral) *po.ArmsAttr {
	return &po.ArmsAttr{
		Cavalry:   consts.ArmsAbility(cast.ToString(general.BaseInfo.ArmsAttr.Cavalry)),
		Mauler:    consts.ArmsAbility(cast.ToString(general.BaseInfo.ArmsAttr.Mauler)),
		Archers:   consts.ArmsAbility(cast.ToString(general.BaseInfo.ArmsAttr.Archers)),
		Spearman:  consts.ArmsAbility(cast.ToString(general.BaseInfo.ArmsAttr.Spearman)),
		Apparatus: consts.ArmsAbility(cast.ToString(general.BaseInfo.ArmsAttr.Apparatus)),
	}
}

func buildAbilityAttr(ctx context.Context, generalInfo *po.General) *po.AbilityAttr {
	attr := &po.AbilityAttrString{}
	util.ParseJsonObj(ctx, attr, generalInfo.AbilityAttr)
	return &po.AbilityAttr{
		ForceBase:        cast.ToFloat64(attr.ForceBase),
		ForceRate:        cast.ToFloat64(attr.ForceRate),
		IntelligenceBase: cast.ToFloat64(attr.IntelligenceBase),
		IntelligenceRate: cast.ToFloat64(attr.IntelligenceRate),
		CommandBase:      cast.ToFloat64(attr.CommandBase),
		CommandRate:      cast.ToFloat64(attr.CommandRate),
		SpeedBase:        cast.ToFloat64(attr.SpeedBase),
		SpeedRate:        cast.ToFloat64(attr.SpeedRate),
	}
}

func checkParam(req api.BattleExecuteRequest) error {
	//队伍
	if req.FightingTeam == nil {
		return errors.New("我军队伍不能为空")
	}
	if req.EnemyTeam == nil {
		return errors.New("敌军队伍不能为空")
	}
	//兵种
	if req.FightingTeam.ArmType == enum.ArmType_Unknow {
		return errors.New("我军队伍兵种不能为空")
	}
	if req.EnemyTeam.ArmType == enum.ArmType_Unknow {
		return errors.New("敌军队伍兵种不能为空")
	}
	// 武将数量
	if len(req.FightingTeam.BattleGenerals) == 0 {
		return errors.New("我军武将数量不能为空")
	}
	if len(req.EnemyTeam.BattleGenerals) == 0 {
		return errors.New("敌军武将数量不能为空")
	}
	return nil
}
