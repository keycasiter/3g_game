// Code generated by thriftgo (0.2.4). DO NOT EDIT.

package enum

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

//请求返回码
type ResponseCode int64

const (
	ResponseCode_Success      ResponseCode = 0
	ResponseCode_ParamInvalid ResponseCode = 1
	ResponseCode_UnknownError ResponseCode = 999
)

func (p ResponseCode) String() string {
	switch p {
	case ResponseCode_Success:
		return "Success"
	case ResponseCode_ParamInvalid:
		return "ParamInvalid"
	case ResponseCode_UnknownError:
		return "UnknownError"
	}
	return "<UNSET>"
}

func ResponseCodeFromString(s string) (ResponseCode, error) {
	switch s {
	case "Success":
		return ResponseCode_Success, nil
	case "ParamInvalid":
		return ResponseCode_ParamInvalid, nil
	case "UnknownError":
		return ResponseCode_UnknownError, nil
	}
	return ResponseCode(0), fmt.Errorf("not a valid ResponseCode string")
}

func ResponseCodePtr(v ResponseCode) *ResponseCode { return &v }
func (p *ResponseCode) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ResponseCode(result.Int64)
	return
}

func (p *ResponseCode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 判定
type Enable int64

const (
	Enable_UNKNOW Enable = 0
	Enable_YES    Enable = 1
	Enable_NO     Enable = 2
)

func (p Enable) String() string {
	switch p {
	case Enable_UNKNOW:
		return "UNKNOW"
	case Enable_YES:
		return "YES"
	case Enable_NO:
		return "NO"
	}
	return "<UNSET>"
}

func EnableFromString(s string) (Enable, error) {
	switch s {
	case "UNKNOW":
		return Enable_UNKNOW, nil
	case "YES":
		return Enable_YES, nil
	case "NO":
		return Enable_NO, nil
	}
	return Enable(0), fmt.Errorf("not a valid Enable string")
}

func EnablePtr(v Enable) *Enable { return &v }
func (p *Enable) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Enable(result.Int64)
	return
}

func (p *Enable) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 兵种适性
type ArmsAbility int64

const (
	ArmsAbility_Unknow ArmsAbility = 0
	ArmsAbility_S      ArmsAbility = 1
	ArmsAbility_A      ArmsAbility = 2
	ArmsAbility_B      ArmsAbility = 3
	ArmsAbility_C      ArmsAbility = 4
)

func (p ArmsAbility) String() string {
	switch p {
	case ArmsAbility_Unknow:
		return "Unknow"
	case ArmsAbility_S:
		return "S"
	case ArmsAbility_A:
		return "A"
	case ArmsAbility_B:
		return "B"
	case ArmsAbility_C:
		return "C"
	}
	return "<UNSET>"
}

func ArmsAbilityFromString(s string) (ArmsAbility, error) {
	switch s {
	case "Unknow":
		return ArmsAbility_Unknow, nil
	case "S":
		return ArmsAbility_S, nil
	case "A":
		return ArmsAbility_A, nil
	case "B":
		return ArmsAbility_B, nil
	case "C":
		return ArmsAbility_C, nil
	}
	return ArmsAbility(0), fmt.Errorf("not a valid ArmsAbility string")
}

func ArmsAbilityPtr(v ArmsAbility) *ArmsAbility { return &v }
func (p *ArmsAbility) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ArmsAbility(result.Int64)
	return
}

func (p *ArmsAbility) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 兵书类型
type WarbookType int64

const (
	WarbookType_Unknow                 WarbookType = 0
	WarbookType_Battle                 WarbookType = 1
	WarbookType_MilitaryForm           WarbookType = 2
	WarbookType_FalsehoodVersusReality WarbookType = 3
	WarbookType_NineVariations         WarbookType = 4
)

func (p WarbookType) String() string {
	switch p {
	case WarbookType_Unknow:
		return "Unknow"
	case WarbookType_Battle:
		return "Battle"
	case WarbookType_MilitaryForm:
		return "MilitaryForm"
	case WarbookType_FalsehoodVersusReality:
		return "FalsehoodVersusReality"
	case WarbookType_NineVariations:
		return "NineVariations"
	}
	return "<UNSET>"
}

func WarbookTypeFromString(s string) (WarbookType, error) {
	switch s {
	case "Unknow":
		return WarbookType_Unknow, nil
	case "Battle":
		return WarbookType_Battle, nil
	case "MilitaryForm":
		return WarbookType_MilitaryForm, nil
	case "FalsehoodVersusReality":
		return WarbookType_FalsehoodVersusReality, nil
	case "NineVariations":
		return WarbookType_NineVariations, nil
	}
	return WarbookType(0), fmt.Errorf("not a valid WarbookType string")
}

func WarbookTypePtr(v WarbookType) *WarbookType { return &v }
func (p *WarbookType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = WarbookType(result.Int64)
	return
}

func (p *WarbookType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 性别
type Gender int64

const (
	Gender_Unknow Gender = 0
	Gender_Male   Gender = 1
	Gender_Female Gender = 2
)

func (p Gender) String() string {
	switch p {
	case Gender_Unknow:
		return "Unknow"
	case Gender_Male:
		return "Male"
	case Gender_Female:
		return "Female"
	}
	return "<UNSET>"
}

func GenderFromString(s string) (Gender, error) {
	switch s {
	case "Unknow":
		return Gender_Unknow, nil
	case "Male":
		return Gender_Male, nil
	case "Female":
		return Gender_Female, nil
	}
	return Gender(0), fmt.Errorf("not a valid Gender string")
}

func GenderPtr(v Gender) *Gender { return &v }
func (p *Gender) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Gender(result.Int64)
	return
}

func (p *Gender) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 武将阵营
type Group int64

const (
	Group_Unknow   Group = 0
	Group_WeiGuo   Group = 1
	Group_ShuGuo   Group = 2
	Group_WuGuo    Group = 3
	Group_QunXiong Group = 4
)

func (p Group) String() string {
	switch p {
	case Group_Unknow:
		return "Unknow"
	case Group_WeiGuo:
		return "WeiGuo"
	case Group_ShuGuo:
		return "ShuGuo"
	case Group_WuGuo:
		return "WuGuo"
	case Group_QunXiong:
		return "QunXiong"
	}
	return "<UNSET>"
}

func GroupFromString(s string) (Group, error) {
	switch s {
	case "Unknow":
		return Group_Unknow, nil
	case "WeiGuo":
		return Group_WeiGuo, nil
	case "ShuGuo":
		return Group_ShuGuo, nil
	case "WuGuo":
		return Group_WuGuo, nil
	case "QunXiong":
		return Group_QunXiong, nil
	}
	return Group(0), fmt.Errorf("not a valid Group string")
}

func GroupPtr(v Group) *Group { return &v }
func (p *Group) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Group(result.Int64)
	return
}

func (p *Group) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 统御 （2 - 7）
type ControlLevel int64

const (
	ControlLevel_Level_2 ControlLevel = 2
	ControlLevel_Level_3 ControlLevel = 3
	ControlLevel_Level_4 ControlLevel = 4
	ControlLevel_Level_5 ControlLevel = 5
	ControlLevel_Level_6 ControlLevel = 6
	ControlLevel_Level_7 ControlLevel = 7
)

func (p ControlLevel) String() string {
	switch p {
	case ControlLevel_Level_2:
		return "Level_2"
	case ControlLevel_Level_3:
		return "Level_3"
	case ControlLevel_Level_4:
		return "Level_4"
	case ControlLevel_Level_5:
		return "Level_5"
	case ControlLevel_Level_6:
		return "Level_6"
	case ControlLevel_Level_7:
		return "Level_7"
	}
	return "<UNSET>"
}

func ControlLevelFromString(s string) (ControlLevel, error) {
	switch s {
	case "Level_2":
		return ControlLevel_Level_2, nil
	case "Level_3":
		return ControlLevel_Level_3, nil
	case "Level_4":
		return ControlLevel_Level_4, nil
	case "Level_5":
		return ControlLevel_Level_5, nil
	case "Level_6":
		return ControlLevel_Level_6, nil
	case "Level_7":
		return ControlLevel_Level_7, nil
	}
	return ControlLevel(0), fmt.Errorf("not a valid ControlLevel string")
}

func ControlLevelPtr(v ControlLevel) *ControlLevel { return &v }
func (p *ControlLevel) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ControlLevel(result.Int64)
	return
}

func (p *ControlLevel) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 武将标签
type GeneralTag int64

const (
	GeneralTag_Shield        GeneralTag = 1
	GeneralTag_Assist        GeneralTag = 2
	GeneralTag_YellowTurbans GeneralTag = 3
	GeneralTag_Both          GeneralTag = 4
	GeneralTag_Control       GeneralTag = 5
	GeneralTag_Barbarian     GeneralTag = 6
	GeneralTag_Charm         GeneralTag = 7
	GeneralTag_Strategy      GeneralTag = 8
	GeneralTag_Martial       GeneralTag = 9
	GeneralTag_Medical       GeneralTag = 10
	GeneralTag_Fight         GeneralTag = 11
	GeneralTag_Politics      GeneralTag = 12
	GeneralTag_Pawn          GeneralTag = 13
	GeneralTag_Celestials    GeneralTag = 14
)

func (p GeneralTag) String() string {
	switch p {
	case GeneralTag_Shield:
		return "Shield"
	case GeneralTag_Assist:
		return "Assist"
	case GeneralTag_YellowTurbans:
		return "YellowTurbans"
	case GeneralTag_Both:
		return "Both"
	case GeneralTag_Control:
		return "Control"
	case GeneralTag_Barbarian:
		return "Barbarian"
	case GeneralTag_Charm:
		return "Charm"
	case GeneralTag_Strategy:
		return "Strategy"
	case GeneralTag_Martial:
		return "Martial"
	case GeneralTag_Medical:
		return "Medical"
	case GeneralTag_Fight:
		return "Fight"
	case GeneralTag_Politics:
		return "Politics"
	case GeneralTag_Pawn:
		return "Pawn"
	case GeneralTag_Celestials:
		return "Celestials"
	}
	return "<UNSET>"
}

func GeneralTagFromString(s string) (GeneralTag, error) {
	switch s {
	case "Shield":
		return GeneralTag_Shield, nil
	case "Assist":
		return GeneralTag_Assist, nil
	case "YellowTurbans":
		return GeneralTag_YellowTurbans, nil
	case "Both":
		return GeneralTag_Both, nil
	case "Control":
		return GeneralTag_Control, nil
	case "Barbarian":
		return GeneralTag_Barbarian, nil
	case "Charm":
		return GeneralTag_Charm, nil
	case "Strategy":
		return GeneralTag_Strategy, nil
	case "Martial":
		return GeneralTag_Martial, nil
	case "Medical":
		return GeneralTag_Medical, nil
	case "Fight":
		return GeneralTag_Fight, nil
	case "Politics":
		return GeneralTag_Politics, nil
	case "Pawn":
		return GeneralTag_Pawn, nil
	case "Celestials":
		return GeneralTag_Celestials, nil
	}
	return GeneralTag(0), fmt.Errorf("not a valid GeneralTag string")
}

func GeneralTagPtr(v GeneralTag) *GeneralTag { return &v }
func (p *GeneralTag) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GeneralTag(result.Int64)
	return
}

func (p *GeneralTag) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 战法品质
type TacticQuality int64

const (
	TacticQuality_S TacticQuality = 1
	TacticQuality_A TacticQuality = 2
	TacticQuality_B TacticQuality = 3
	TacticQuality_C TacticQuality = 4
)

func (p TacticQuality) String() string {
	switch p {
	case TacticQuality_S:
		return "S"
	case TacticQuality_A:
		return "A"
	case TacticQuality_B:
		return "B"
	case TacticQuality_C:
		return "C"
	}
	return "<UNSET>"
}

func TacticQualityFromString(s string) (TacticQuality, error) {
	switch s {
	case "S":
		return TacticQuality_S, nil
	case "A":
		return TacticQuality_A, nil
	case "B":
		return TacticQuality_B, nil
	case "C":
		return TacticQuality_C, nil
	}
	return TacticQuality(0), fmt.Errorf("not a valid TacticQuality string")
}

func TacticQualityPtr(v TacticQuality) *TacticQuality { return &v }
func (p *TacticQuality) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TacticQuality(result.Int64)
	return
}

func (p *TacticQuality) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 战法来源
type TacticsSource int64

const (
	TacticsSource_SelfContained TacticsSource = 1
	TacticsSource_Inherit       TacticsSource = 2
	TacticsSource_Event         TacticsSource = 3
)

func (p TacticsSource) String() string {
	switch p {
	case TacticsSource_SelfContained:
		return "SelfContained"
	case TacticsSource_Inherit:
		return "Inherit"
	case TacticsSource_Event:
		return "Event"
	}
	return "<UNSET>"
}

func TacticsSourceFromString(s string) (TacticsSource, error) {
	switch s {
	case "SelfContained":
		return TacticsSource_SelfContained, nil
	case "Inherit":
		return TacticsSource_Inherit, nil
	case "Event":
		return TacticsSource_Event, nil
	}
	return TacticsSource(0), fmt.Errorf("not a valid TacticsSource string")
}

func TacticsSourcePtr(v TacticsSource) *TacticsSource { return &v }
func (p *TacticsSource) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TacticsSource(result.Int64)
	return
}

func (p *TacticsSource) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 武将品质
type GeneralQuality int64

const (
	GeneralQuality_S GeneralQuality = 1
	GeneralQuality_A GeneralQuality = 2
	GeneralQuality_B GeneralQuality = 3
	GeneralQuality_C GeneralQuality = 4
)

func (p GeneralQuality) String() string {
	switch p {
	case GeneralQuality_S:
		return "S"
	case GeneralQuality_A:
		return "A"
	case GeneralQuality_B:
		return "B"
	case GeneralQuality_C:
		return "C"
	}
	return "<UNSET>"
}

func GeneralQualityFromString(s string) (GeneralQuality, error) {
	switch s {
	case "S":
		return GeneralQuality_S, nil
	case "A":
		return GeneralQuality_A, nil
	case "B":
		return GeneralQuality_B, nil
	case "C":
		return GeneralQuality_C, nil
	}
	return GeneralQuality(0), fmt.Errorf("not a valid GeneralQuality string")
}

func GeneralQualityPtr(v GeneralQuality) *GeneralQuality { return &v }
func (p *GeneralQuality) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GeneralQuality(result.Int64)
	return
}

func (p *GeneralQuality) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 对战参战类型
type GeneralBattleType int64

const (
	GeneralBattleType_Fighting GeneralBattleType = 1
	GeneralBattleType_Enemy    GeneralBattleType = 2
)

func (p GeneralBattleType) String() string {
	switch p {
	case GeneralBattleType_Fighting:
		return "Fighting"
	case GeneralBattleType_Enemy:
		return "Enemy"
	}
	return "<UNSET>"
}

func GeneralBattleTypeFromString(s string) (GeneralBattleType, error) {
	switch s {
	case "Fighting":
		return GeneralBattleType_Fighting, nil
	case "Enemy":
		return GeneralBattleType_Enemy, nil
	}
	return GeneralBattleType(0), fmt.Errorf("not a valid GeneralBattleType string")
}

func GeneralBattleTypePtr(v GeneralBattleType) *GeneralBattleType { return &v }
func (p *GeneralBattleType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GeneralBattleType(result.Int64)
	return
}

func (p *GeneralBattleType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 战法类型
type TacticsType int64

const (
	TacticsType_Active        TacticsType = 1
	TacticsType_Passive       TacticsType = 2
	TacticsType_Command       TacticsType = 3
	TacticsType_Assault       TacticsType = 4
	TacticsType_TroopsTactics TacticsType = 5
	TacticsType_Arm           TacticsType = 6
)

func (p TacticsType) String() string {
	switch p {
	case TacticsType_Active:
		return "Active"
	case TacticsType_Passive:
		return "Passive"
	case TacticsType_Command:
		return "Command"
	case TacticsType_Assault:
		return "Assault"
	case TacticsType_TroopsTactics:
		return "TroopsTactics"
	case TacticsType_Arm:
		return "Arm"
	}
	return "<UNSET>"
}

func TacticsTypeFromString(s string) (TacticsType, error) {
	switch s {
	case "Active":
		return TacticsType_Active, nil
	case "Passive":
		return TacticsType_Passive, nil
	case "Command":
		return TacticsType_Command, nil
	case "Assault":
		return TacticsType_Assault, nil
	case "TroopsTactics":
		return TacticsType_TroopsTactics, nil
	case "Arm":
		return TacticsType_Arm, nil
	}
	return TacticsType(0), fmt.Errorf("not a valid TacticsType string")
}

func TacticsTypePtr(v TacticsType) *TacticsType { return &v }
func (p *TacticsType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TacticsType(result.Int64)
	return
}

func (p *TacticsType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 兵种类型
type ArmType int64

const (
	ArmType_Unknow    ArmType = 0
	ArmType_Cavalry   ArmType = 1
	ArmType_Mauler    ArmType = 2
	ArmType_Archers   ArmType = 3
	ArmType_Spearman  ArmType = 4
	ArmType_Apparatus ArmType = 5
)

func (p ArmType) String() string {
	switch p {
	case ArmType_Unknow:
		return "Unknow"
	case ArmType_Cavalry:
		return "Cavalry"
	case ArmType_Mauler:
		return "Mauler"
	case ArmType_Archers:
		return "Archers"
	case ArmType_Spearman:
		return "Spearman"
	case ArmType_Apparatus:
		return "Apparatus"
	}
	return "<UNSET>"
}

func ArmTypeFromString(s string) (ArmType, error) {
	switch s {
	case "Unknow":
		return ArmType_Unknow, nil
	case "Cavalry":
		return ArmType_Cavalry, nil
	case "Mauler":
		return ArmType_Mauler, nil
	case "Archers":
		return ArmType_Archers, nil
	case "Spearman":
		return ArmType_Spearman, nil
	case "Apparatus":
		return ArmType_Apparatus, nil
	}
	return ArmType(0), fmt.Errorf("not a valid ArmType string")
}

func ArmTypePtr(v ArmType) *ArmType { return &v }
func (p *ArmType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ArmType(result.Int64)
	return
}

func (p *ArmType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 队伍类型
type TeamType int64

const (
	TeamType_Fighting TeamType = 1
	TeamType_Enemy    TeamType = 2
)

func (p TeamType) String() string {
	switch p {
	case TeamType_Fighting:
		return "Fighting"
	case TeamType_Enemy:
		return "Enemy"
	}
	return "<UNSET>"
}

func TeamTypeFromString(s string) (TeamType, error) {
	switch s {
	case "Fighting":
		return TeamType_Fighting, nil
	case "Enemy":
		return TeamType_Enemy, nil
	}
	return TeamType(0), fmt.Errorf("not a valid TeamType string")
}

func TeamTypePtr(v TeamType) *TeamType { return &v }
func (p *TeamType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TeamType(result.Int64)
	return
}

func (p *TeamType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 武将星级
type GeneralStarLevel int64

const (
	GeneralStarLevel_One   GeneralStarLevel = 1
	GeneralStarLevel_Two   GeneralStarLevel = 2
	GeneralStarLevel_Three GeneralStarLevel = 3
	GeneralStarLevel_Four  GeneralStarLevel = 4
	GeneralStarLevel_Five  GeneralStarLevel = 5
)

func (p GeneralStarLevel) String() string {
	switch p {
	case GeneralStarLevel_One:
		return "One"
	case GeneralStarLevel_Two:
		return "Two"
	case GeneralStarLevel_Three:
		return "Three"
	case GeneralStarLevel_Four:
		return "Four"
	case GeneralStarLevel_Five:
		return "Five"
	}
	return "<UNSET>"
}

func GeneralStarLevelFromString(s string) (GeneralStarLevel, error) {
	switch s {
	case "One":
		return GeneralStarLevel_One, nil
	case "Two":
		return GeneralStarLevel_Two, nil
	case "Three":
		return GeneralStarLevel_Three, nil
	case "Four":
		return GeneralStarLevel_Four, nil
	case "Five":
		return GeneralStarLevel_Five, nil
	}
	return GeneralStarLevel(0), fmt.Errorf("not a valid GeneralStarLevel string")
}

func GeneralStarLevelPtr(v GeneralStarLevel) *GeneralStarLevel { return &v }
func (p *GeneralStarLevel) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = GeneralStarLevel(result.Int64)
	return
}

func (p *GeneralStarLevel) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}
