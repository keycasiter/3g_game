// Code generated by hertz generator.

package api

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	hertzconsts "github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/keycasiter/3g_game/biz/consts"
	"github.com/keycasiter/3g_game/biz/logic/lottery"
	api "github.com/keycasiter/3g_game/biz/model/api"
	"github.com/keycasiter/3g_game/biz/model/enum"
	"github.com/keycasiter/3g_game/biz/model/vo"
	"github.com/keycasiter/3g_game/biz/util"
)

// GeneralLotteryDo @Summary 发起模拟抽卡
// @Description 发起模拟抽卡
// @Tags 模拟抽卡
// @Accept json
// @Produce json
// @Router /v1/lottery/general/do [POST]
func GeneralLotteryDo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GeneralLotteryDoRequest
	var resp api.GeneralLotteryDoResponse
	resp.Meta = util.BuildSuccMeta()

	err = c.BindAndValidate(&req)
	hlog.CtxInfof(ctx, "GeneralLotteryDo Req:%s", util.ToJsonString(ctx, req))
	if err != nil {
		c.String(hertzconsts.StatusBadRequest, err.Error())
		return
	}
	if req.Uid == "" || req.RollTimes == 0 || req.GeneralLotteryPool == 0 {
		hlog.CtxErrorf(ctx, "GeneralLotteryDo param err")
		resp.Meta = util.BuildParamErrMeta()
		c.JSON(hertzconsts.StatusOK, resp)
		return
	}

	logicResp, err := lottery.NewGeneralLotteryLogic(ctx, &vo.GeneralLotteryRequest{
		GeneralLottery: consts.GeneralLotteryPool(req.GeneralLotteryPool),
		RollTimes:      req.RollTimes,
		Uid:            req.Uid,
	}).Run()
	if err != nil {
		hlog.CtxErrorf(ctx, "GeneralLotteryDoLogic handle err:%v", err)
		resp.Meta = util.BuildFailMetaWithMsg(err.Error())
		c.JSON(hertzconsts.StatusOK, resp)
		return
	}

	//组合resp
	generalLotteryInfoList := make([]*api.GeneralLotteryDoInfo, 0)
	for _, info := range logicResp.GeneralLotteryInfoList {
		generalLotteryInfoList = append(generalLotteryInfoList, &api.GeneralLotteryDoInfo{
			GeneralInfo: &api.MetadataGeneral{
				Id:             info.GeneralInfo.Id,
				Name:           info.GeneralInfo.Name,
				GeneralQuality: enum.GeneralQuality(info.GeneralInfo.Quality),
				AvatarUrl:      info.GeneralInfo.AvatarUrl,
			},
			HitNum:      info.HitNum,
			HitRate:     info.HitRate,
			LotteryRate: info.LotteryRate,
		})
	}

	resp.Hit5LevGeneralNum = logicResp.Hit5LevGeneralNum
	resp.ProtectedMustHitNum = logicResp.ProtectedMustHitNum
	resp.GeneralLotteryInfoList = generalLotteryInfoList
	resp.NotHitLev5Times = logicResp.NotHitLev5Times

	hlog.CtxInfof(ctx, "GeneralLotteryDo Resp:%s", util.ToJsonString(ctx, resp))

	c.JSON(hertzconsts.StatusOK, resp)
}
