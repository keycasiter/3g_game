// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package api

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/keycasiter/3g_game/biz/model/common"
	"github.com/keycasiter/3g_game/biz/model/enum"
	"github.com/keycasiter/3g_game/biz/model/jym"
)

// ============= 模拟对战 BEGIN ==============
type BattleDoRequest struct {
	/** 队伍信息 **/
	// 出战队伍信息
	FightingTeam *BattleTeam `thrift:"FightingTeam,1" form:"FightingTeam" json:"FightingTeam" query:"FightingTeam"`
	// 对战队伍信息
	EnemyTeam *BattleTeam `thrift:"EnemyTeam,2" form:"EnemyTeam" json:"EnemyTeam" query:"EnemyTeam"`
	//用户uid
	Uid int64 `thrift:"Uid,3" form:"Uid" json:"Uid" query:"Uid"`
}

func NewBattleDoRequest() *BattleDoRequest {
	return &BattleDoRequest{}
}

func (p *BattleDoRequest) InitDefault() {
}

var BattleDoRequest_FightingTeam_DEFAULT *BattleTeam

func (p *BattleDoRequest) GetFightingTeam() (v *BattleTeam) {
	if !p.IsSetFightingTeam() {
		return BattleDoRequest_FightingTeam_DEFAULT
	}
	return p.FightingTeam
}

var BattleDoRequest_EnemyTeam_DEFAULT *BattleTeam

func (p *BattleDoRequest) GetEnemyTeam() (v *BattleTeam) {
	if !p.IsSetEnemyTeam() {
		return BattleDoRequest_EnemyTeam_DEFAULT
	}
	return p.EnemyTeam
}

func (p *BattleDoRequest) GetUid() (v int64) {
	return p.Uid
}

var fieldIDToName_BattleDoRequest = map[int16]string{
	1: "FightingTeam",
	2: "EnemyTeam",
	3: "Uid",
}

func (p *BattleDoRequest) IsSetFightingTeam() bool {
	return p.FightingTeam != nil
}

func (p *BattleDoRequest) IsSetEnemyTeam() bool {
	return p.EnemyTeam != nil
}

func (p *BattleDoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BattleDoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BattleDoRequest) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBattleTeam()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FightingTeam = _field
	return nil
}
func (p *BattleDoRequest) ReadField2(iprot thrift.TProtocol) error {
	_field := NewBattleTeam()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EnemyTeam = _field
	return nil
}
func (p *BattleDoRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Uid = _field
	return nil
}

func (p *BattleDoRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("BattleDoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BattleDoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FightingTeam", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.FightingTeam.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BattleDoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EnemyTeam", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.EnemyTeam.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BattleDoRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Uid", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BattleDoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BattleDoRequest(%+v)", *p)

}

// 对战队伍信息
type BattleTeam struct {
	/** 队伍基础信息 **/
	//队伍类型
	TeamType enum.TeamType `thrift:"TeamType,1" form:"TeamType" json:"TeamType" query:"TeamType"`
	//队伍兵种
	ArmType enum.ArmType `thrift:"ArmType,2" form:"ArmType" json:"ArmType" query:"ArmType"`
	//队伍武将信息
	BattleGenerals []*BattleGeneral `thrift:"BattleGenerals,3" form:"BattleGenerals" json:"BattleGenerals" query:"BattleGenerals"`
	//兵战科技-属性加成
	BuildingTechAttrAddition *BuildingTechAttrAddition `thrift:"BuildingTechAttrAddition,4" form:"BuildingTechAttrAddition" json:"BuildingTechAttrAddition" query:"BuildingTechAttrAddition"`
	//协力科技-阵营加成
	BuildingTechGroupAddition *BuildingTechGroupAddition `thrift:"BuildingTechGroupAddition,5" form:"BuildingTechGroupAddition" json:"BuildingTechGroupAddition" query:"BuildingTechGroupAddition"`
	//队伍总兵力
	SoliderNum int64 `thrift:"SoliderNum,6" form:"SoliderNum" json:"SoliderNum" query:"SoliderNum"`
	//队伍剩余兵力
	RemainNum int64 `thrift:"RemainNum,7" form:"RemainNum" json:"RemainNum" query:"RemainNum"`
	//队伍名称
	Name string `thrift:"Name,8" form:"Name" json:"Name" query:"Name"`
	//队伍头像
	AvatarUrl string `thrift:"AvatarUrl,9" form:"AvatarUrl" json:"AvatarUrl" query:"AvatarUrl"`
}

func NewBattleTeam() *BattleTeam {
	return &BattleTeam{}
}

func (p *BattleTeam) InitDefault() {
}

func (p *BattleTeam) GetTeamType() (v enum.TeamType) {
	return p.TeamType
}

func (p *BattleTeam) GetArmType() (v enum.ArmType) {
	return p.ArmType
}

func (p *BattleTeam) GetBattleGenerals() (v []*BattleGeneral) {
	return p.BattleGenerals
}

var BattleTeam_BuildingTechAttrAddition_DEFAULT *BuildingTechAttrAddition

func (p *BattleTeam) GetBuildingTechAttrAddition() (v *BuildingTechAttrAddition) {
	if !p.IsSetBuildingTechAttrAddition() {
		return BattleTeam_BuildingTechAttrAddition_DEFAULT
	}
	return p.BuildingTechAttrAddition
}

var BattleTeam_BuildingTechGroupAddition_DEFAULT *BuildingTechGroupAddition

func (p *BattleTeam) GetBuildingTechGroupAddition() (v *BuildingTechGroupAddition) {
	if !p.IsSetBuildingTechGroupAddition() {
		return BattleTeam_BuildingTechGroupAddition_DEFAULT
	}
	return p.BuildingTechGroupAddition
}

func (p *BattleTeam) GetSoliderNum() (v int64) {
	return p.SoliderNum
}

func (p *BattleTeam) GetRemainNum() (v int64) {
	return p.RemainNum
}

func (p *BattleTeam) GetName() (v string) {
	return p.Name
}

func (p *BattleTeam) GetAvatarUrl() (v string) {
	return p.AvatarUrl
}

var fieldIDToName_BattleTeam = map[int16]string{
	1: "TeamType",
	2: "ArmType",
	3: "BattleGenerals",
	4: "BuildingTechAttrAddition",
	5: "BuildingTechGroupAddition",
	6: "SoliderNum",
	7: "RemainNum",
	8: "Name",
	9: "AvatarUrl",
}

func (p *BattleTeam) IsSetBuildingTechAttrAddition() bool {
	return p.BuildingTechAttrAddition != nil
}

func (p *BattleTeam) IsSetBuildingTechGroupAddition() bool {
	return p.BuildingTechGroupAddition != nil
}

func (p *BattleTeam) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BattleTeam[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BattleTeam) ReadField1(iprot thrift.TProtocol) error {

	var _field enum.TeamType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.TeamType(v)
	}
	p.TeamType = _field
	return nil
}
func (p *BattleTeam) ReadField2(iprot thrift.TProtocol) error {

	var _field enum.ArmType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.ArmType(v)
	}
	p.ArmType = _field
	return nil
}
func (p *BattleTeam) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*BattleGeneral, 0, size)
	values := make([]BattleGeneral, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.BattleGenerals = _field
	return nil
}
func (p *BattleTeam) ReadField4(iprot thrift.TProtocol) error {
	_field := NewBuildingTechAttrAddition()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BuildingTechAttrAddition = _field
	return nil
}
func (p *BattleTeam) ReadField5(iprot thrift.TProtocol) error {
	_field := NewBuildingTechGroupAddition()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BuildingTechGroupAddition = _field
	return nil
}
func (p *BattleTeam) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SoliderNum = _field
	return nil
}
func (p *BattleTeam) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RemainNum = _field
	return nil
}
func (p *BattleTeam) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *BattleTeam) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AvatarUrl = _field
	return nil
}

func (p *BattleTeam) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("BattleTeam"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BattleTeam) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TeamType", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.TeamType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BattleTeam) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ArmType", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ArmType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BattleTeam) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BattleGenerals", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BattleGenerals)); err != nil {
		return err
	}
	for _, v := range p.BattleGenerals {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BattleTeam) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BuildingTechAttrAddition", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BuildingTechAttrAddition.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BattleTeam) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BuildingTechGroupAddition", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BuildingTechGroupAddition.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *BattleTeam) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SoliderNum", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.SoliderNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *BattleTeam) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RemainNum", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.RemainNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *BattleTeam) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *BattleTeam) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AvatarUrl", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AvatarUrl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *BattleTeam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BattleTeam(%+v)", *p)

}

// 对战队伍信息
type BattleTeamStatistics struct {
	/** 队伍基础信息 **/
	//队伍类型
	TeamType enum.TeamType `thrift:"TeamType,1" form:"TeamType" json:"TeamType" query:"TeamType"`
	//队伍兵种
	ArmType enum.ArmType `thrift:"ArmType,2" form:"ArmType" json:"ArmType" query:"ArmType"`
	//队伍武将信息
	BattleGenerals []*BattleGeneralStatistics `thrift:"BattleGenerals,3" form:"BattleGenerals" json:"BattleGenerals" query:"BattleGenerals"`
	//兵战科技-属性加成
	BuildingTechAttrAddition *BuildingTechAttrAddition `thrift:"BuildingTechAttrAddition,4" form:"BuildingTechAttrAddition" json:"BuildingTechAttrAddition" query:"BuildingTechAttrAddition"`
	//协力科技-阵营加成
	BuildingTechGroupAddition *BuildingTechGroupAddition `thrift:"BuildingTechGroupAddition,5" form:"BuildingTechGroupAddition" json:"BuildingTechGroupAddition" query:"BuildingTechGroupAddition"`
	//队伍总兵力
	SoliderNum int64 `thrift:"SoliderNum,6" form:"SoliderNum" json:"SoliderNum" query:"SoliderNum"`
	//队伍剩余兵力
	RemainNum int64 `thrift:"RemainNum,7" form:"RemainNum" json:"RemainNum" query:"RemainNum"`
	//队伍名称
	Name string `thrift:"Name,8" form:"Name" json:"Name" query:"Name"`
	//杀敌
	KillSoliderNum int64 `thrift:"KillSoliderNum,9" form:"KillSoliderNum" json:"KillSoliderNum" query:"KillSoliderNum"`
	//救援
	ResumeSoliderNum int64 `thrift:"ResumeSoliderNum,10" form:"ResumeSoliderNum" json:"ResumeSoliderNum" query:"ResumeSoliderNum"`
	//回合杀敌
	RoundKillSoliderNum map[enum.BattlePhase]map[enum.BattleRound]int64 `thrift:"RoundKillSoliderNum,11" form:"RoundKillSoliderNum" json:"RoundKillSoliderNum" query:"RoundKillSoliderNum"`
	//回合救援
	RoundResumeSoliderNum map[enum.BattlePhase]map[enum.BattleRound]int64 `thrift:"RoundResumeSoliderNum,12" form:"RoundResumeSoliderNum" json:"RoundResumeSoliderNum" query:"RoundResumeSoliderNum"`
	//回合剩余兵力
	RoundRemainSoliderNum map[enum.BattlePhase]map[enum.BattleRound]int64 `thrift:"RoundRemainSoliderNum,13" form:"RoundRemainSoliderNum" json:"RoundRemainSoliderNum" query:"RoundRemainSoliderNum"`
}

func NewBattleTeamStatistics() *BattleTeamStatistics {
	return &BattleTeamStatistics{}
}

func (p *BattleTeamStatistics) InitDefault() {
}

func (p *BattleTeamStatistics) GetTeamType() (v enum.TeamType) {
	return p.TeamType
}

func (p *BattleTeamStatistics) GetArmType() (v enum.ArmType) {
	return p.ArmType
}

func (p *BattleTeamStatistics) GetBattleGenerals() (v []*BattleGeneralStatistics) {
	return p.BattleGenerals
}

var BattleTeamStatistics_BuildingTechAttrAddition_DEFAULT *BuildingTechAttrAddition

func (p *BattleTeamStatistics) GetBuildingTechAttrAddition() (v *BuildingTechAttrAddition) {
	if !p.IsSetBuildingTechAttrAddition() {
		return BattleTeamStatistics_BuildingTechAttrAddition_DEFAULT
	}
	return p.BuildingTechAttrAddition
}

var BattleTeamStatistics_BuildingTechGroupAddition_DEFAULT *BuildingTechGroupAddition

func (p *BattleTeamStatistics) GetBuildingTechGroupAddition() (v *BuildingTechGroupAddition) {
	if !p.IsSetBuildingTechGroupAddition() {
		return BattleTeamStatistics_BuildingTechGroupAddition_DEFAULT
	}
	return p.BuildingTechGroupAddition
}

func (p *BattleTeamStatistics) GetSoliderNum() (v int64) {
	return p.SoliderNum
}

func (p *BattleTeamStatistics) GetRemainNum() (v int64) {
	return p.RemainNum
}

func (p *BattleTeamStatistics) GetName() (v string) {
	return p.Name
}

func (p *BattleTeamStatistics) GetKillSoliderNum() (v int64) {
	return p.KillSoliderNum
}

func (p *BattleTeamStatistics) GetResumeSoliderNum() (v int64) {
	return p.ResumeSoliderNum
}

func (p *BattleTeamStatistics) GetRoundKillSoliderNum() (v map[enum.BattlePhase]map[enum.BattleRound]int64) {
	return p.RoundKillSoliderNum
}

func (p *BattleTeamStatistics) GetRoundResumeSoliderNum() (v map[enum.BattlePhase]map[enum.BattleRound]int64) {
	return p.RoundResumeSoliderNum
}

func (p *BattleTeamStatistics) GetRoundRemainSoliderNum() (v map[enum.BattlePhase]map[enum.BattleRound]int64) {
	return p.RoundRemainSoliderNum
}

var fieldIDToName_BattleTeamStatistics = map[int16]string{
	1:  "TeamType",
	2:  "ArmType",
	3:  "BattleGenerals",
	4:  "BuildingTechAttrAddition",
	5:  "BuildingTechGroupAddition",
	6:  "SoliderNum",
	7:  "RemainNum",
	8:  "Name",
	9:  "KillSoliderNum",
	10: "ResumeSoliderNum",
	11: "RoundKillSoliderNum",
	12: "RoundResumeSoliderNum",
	13: "RoundRemainSoliderNum",
}

func (p *BattleTeamStatistics) IsSetBuildingTechAttrAddition() bool {
	return p.BuildingTechAttrAddition != nil
}

func (p *BattleTeamStatistics) IsSetBuildingTechGroupAddition() bool {
	return p.BuildingTechGroupAddition != nil
}

func (p *BattleTeamStatistics) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BattleTeamStatistics[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BattleTeamStatistics) ReadField1(iprot thrift.TProtocol) error {

	var _field enum.TeamType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.TeamType(v)
	}
	p.TeamType = _field
	return nil
}
func (p *BattleTeamStatistics) ReadField2(iprot thrift.TProtocol) error {

	var _field enum.ArmType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.ArmType(v)
	}
	p.ArmType = _field
	return nil
}
func (p *BattleTeamStatistics) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*BattleGeneralStatistics, 0, size)
	values := make([]BattleGeneralStatistics, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.BattleGenerals = _field
	return nil
}
func (p *BattleTeamStatistics) ReadField4(iprot thrift.TProtocol) error {
	_field := NewBuildingTechAttrAddition()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BuildingTechAttrAddition = _field
	return nil
}
func (p *BattleTeamStatistics) ReadField5(iprot thrift.TProtocol) error {
	_field := NewBuildingTechGroupAddition()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BuildingTechGroupAddition = _field
	return nil
}
func (p *BattleTeamStatistics) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SoliderNum = _field
	return nil
}
func (p *BattleTeamStatistics) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RemainNum = _field
	return nil
}
func (p *BattleTeamStatistics) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *BattleTeamStatistics) ReadField9(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.KillSoliderNum = _field
	return nil
}
func (p *BattleTeamStatistics) ReadField10(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ResumeSoliderNum = _field
	return nil
}
func (p *BattleTeamStatistics) ReadField11(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[enum.BattlePhase]map[enum.BattleRound]int64, size)
	for i := 0; i < size; i++ {
		var _key enum.BattlePhase
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = enum.BattlePhase(v)
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[enum.BattleRound]int64, size)
		for i := 0; i < size; i++ {
			var _key1 enum.BattleRound
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_key1 = enum.BattleRound(v)
			}

			var _val1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.RoundKillSoliderNum = _field
	return nil
}
func (p *BattleTeamStatistics) ReadField12(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[enum.BattlePhase]map[enum.BattleRound]int64, size)
	for i := 0; i < size; i++ {
		var _key enum.BattlePhase
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = enum.BattlePhase(v)
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[enum.BattleRound]int64, size)
		for i := 0; i < size; i++ {
			var _key1 enum.BattleRound
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_key1 = enum.BattleRound(v)
			}

			var _val1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.RoundResumeSoliderNum = _field
	return nil
}
func (p *BattleTeamStatistics) ReadField13(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[enum.BattlePhase]map[enum.BattleRound]int64, size)
	for i := 0; i < size; i++ {
		var _key enum.BattlePhase
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = enum.BattlePhase(v)
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[enum.BattleRound]int64, size)
		for i := 0; i < size; i++ {
			var _key1 enum.BattleRound
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_key1 = enum.BattleRound(v)
			}

			var _val1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.RoundRemainSoliderNum = _field
	return nil
}

func (p *BattleTeamStatistics) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("BattleTeamStatistics"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BattleTeamStatistics) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TeamType", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.TeamType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BattleTeamStatistics) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ArmType", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ArmType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BattleTeamStatistics) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BattleGenerals", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BattleGenerals)); err != nil {
		return err
	}
	for _, v := range p.BattleGenerals {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BattleTeamStatistics) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BuildingTechAttrAddition", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BuildingTechAttrAddition.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BattleTeamStatistics) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BuildingTechGroupAddition", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BuildingTechGroupAddition.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *BattleTeamStatistics) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SoliderNum", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.SoliderNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *BattleTeamStatistics) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RemainNum", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.RemainNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *BattleTeamStatistics) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *BattleTeamStatistics) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("KillSoliderNum", thrift.I64, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.KillSoliderNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *BattleTeamStatistics) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ResumeSoliderNum", thrift.I64, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ResumeSoliderNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *BattleTeamStatistics) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RoundKillSoliderNum", thrift.MAP, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.RoundKillSoliderNum)); err != nil {
		return err
	}
	for k, v := range p.RoundKillSoliderNum {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return err
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(v)); err != nil {
			return err
		}
		for k, v := range v {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *BattleTeamStatistics) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RoundResumeSoliderNum", thrift.MAP, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.RoundResumeSoliderNum)); err != nil {
		return err
	}
	for k, v := range p.RoundResumeSoliderNum {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return err
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(v)); err != nil {
			return err
		}
		for k, v := range v {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *BattleTeamStatistics) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RoundRemainSoliderNum", thrift.MAP, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.RoundRemainSoliderNum)); err != nil {
		return err
	}
	for k, v := range p.RoundRemainSoliderNum {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return err
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(v)); err != nil {
			return err
		}
		for k, v := range v {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *BattleTeamStatistics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BattleTeamStatistics(%+v)", *p)

}

// 对战武将信息
type BattleGeneral struct {
	//基础信息
	BaseInfo *MetadataGeneral `thrift:"BaseInfo,1" form:"BaseInfo" json:"BaseInfo" query:"BaseInfo"`
	//佩戴战法
	EquipTactics []*Tactics `thrift:"EquipTactics,2" form:"EquipTactics" json:"EquipTactics" query:"EquipTactics"`
	//佩戴兵书
	WarBooks []*WarBook `thrift:"WarBooks,3" form:"WarBooks" json:"WarBooks" query:"WarBooks"`
	//佩戴装备特技
	SpecialTechs []*SpecialTech `thrift:"SpecialTechs,4" form:"SpecialTechs" json:"SpecialTechs" query:"SpecialTechs"`
	//武将对战加成
	Addition *BattleGeneralAddition `thrift:"Addition,5" form:"Addition" json:"Addition" query:"Addition"`
	//是否主将
	IsMaster bool `thrift:"IsMaster,6" form:"IsMaster" json:"IsMaster" query:"IsMaster"`
	//携带兵力
	SoldierNum int64 `thrift:"SoldierNum,7" form:"SoldierNum" json:"SoldierNum" query:"SoldierNum"`
	//兵种适性
	ArmsAbility enum.ArmsAbility `thrift:"ArmsAbility,8" form:"ArmsAbility" json:"ArmsAbility" query:"ArmsAbility"`
	//剩余兵力
	RemainNum int64 `thrift:"RemainNum,9" form:"RemainNum" json:"RemainNum" query:"RemainNum"`
}

func NewBattleGeneral() *BattleGeneral {
	return &BattleGeneral{}
}

func (p *BattleGeneral) InitDefault() {
}

var BattleGeneral_BaseInfo_DEFAULT *MetadataGeneral

func (p *BattleGeneral) GetBaseInfo() (v *MetadataGeneral) {
	if !p.IsSetBaseInfo() {
		return BattleGeneral_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}

func (p *BattleGeneral) GetEquipTactics() (v []*Tactics) {
	return p.EquipTactics
}

func (p *BattleGeneral) GetWarBooks() (v []*WarBook) {
	return p.WarBooks
}

func (p *BattleGeneral) GetSpecialTechs() (v []*SpecialTech) {
	return p.SpecialTechs
}

var BattleGeneral_Addition_DEFAULT *BattleGeneralAddition

func (p *BattleGeneral) GetAddition() (v *BattleGeneralAddition) {
	if !p.IsSetAddition() {
		return BattleGeneral_Addition_DEFAULT
	}
	return p.Addition
}

func (p *BattleGeneral) GetIsMaster() (v bool) {
	return p.IsMaster
}

func (p *BattleGeneral) GetSoldierNum() (v int64) {
	return p.SoldierNum
}

func (p *BattleGeneral) GetArmsAbility() (v enum.ArmsAbility) {
	return p.ArmsAbility
}

func (p *BattleGeneral) GetRemainNum() (v int64) {
	return p.RemainNum
}

var fieldIDToName_BattleGeneral = map[int16]string{
	1: "BaseInfo",
	2: "EquipTactics",
	3: "WarBooks",
	4: "SpecialTechs",
	5: "Addition",
	6: "IsMaster",
	7: "SoldierNum",
	8: "ArmsAbility",
	9: "RemainNum",
}

func (p *BattleGeneral) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *BattleGeneral) IsSetAddition() bool {
	return p.Addition != nil
}

func (p *BattleGeneral) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BattleGeneral[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BattleGeneral) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMetadataGeneral()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}
func (p *BattleGeneral) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Tactics, 0, size)
	values := make([]Tactics, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EquipTactics = _field
	return nil
}
func (p *BattleGeneral) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*WarBook, 0, size)
	values := make([]WarBook, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.WarBooks = _field
	return nil
}
func (p *BattleGeneral) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*SpecialTech, 0, size)
	values := make([]SpecialTech, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SpecialTechs = _field
	return nil
}
func (p *BattleGeneral) ReadField5(iprot thrift.TProtocol) error {
	_field := NewBattleGeneralAddition()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Addition = _field
	return nil
}
func (p *BattleGeneral) ReadField6(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsMaster = _field
	return nil
}
func (p *BattleGeneral) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SoldierNum = _field
	return nil
}
func (p *BattleGeneral) ReadField8(iprot thrift.TProtocol) error {

	var _field enum.ArmsAbility
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.ArmsAbility(v)
	}
	p.ArmsAbility = _field
	return nil
}
func (p *BattleGeneral) ReadField9(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RemainNum = _field
	return nil
}

func (p *BattleGeneral) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("BattleGeneral"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BattleGeneral) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseInfo", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BattleGeneral) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EquipTactics", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EquipTactics)); err != nil {
		return err
	}
	for _, v := range p.EquipTactics {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BattleGeneral) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("WarBooks", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.WarBooks)); err != nil {
		return err
	}
	for _, v := range p.WarBooks {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BattleGeneral) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SpecialTechs", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SpecialTechs)); err != nil {
		return err
	}
	for _, v := range p.SpecialTechs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BattleGeneral) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Addition", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Addition.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *BattleGeneral) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsMaster", thrift.BOOL, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsMaster); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *BattleGeneral) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SoldierNum", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.SoldierNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *BattleGeneral) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ArmsAbility", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ArmsAbility)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *BattleGeneral) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RemainNum", thrift.I64, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.RemainNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *BattleGeneral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BattleGeneral(%+v)", *p)

}

// 对战武将信息
type BattleGeneralStatistics struct {
	//基础信息
	BaseInfo *MetadataGeneral `thrift:"BaseInfo,1" form:"BaseInfo" json:"BaseInfo" query:"BaseInfo"`
	//佩戴战法
	EquipTactics []*Tactics `thrift:"EquipTactics,2" form:"EquipTactics" json:"EquipTactics" query:"EquipTactics"`
	//佩戴兵书
	WarBooks []*WarBook `thrift:"WarBooks,3" form:"WarBooks" json:"WarBooks" query:"WarBooks"`
	//佩戴装备特技
	SpecialTechs []*SpecialTech `thrift:"SpecialTechs,4" form:"SpecialTechs" json:"SpecialTechs" query:"SpecialTechs"`
	//武将对战加成
	Addition *BattleGeneralAddition `thrift:"Addition,5" form:"Addition" json:"Addition" query:"Addition"`
	//是否主将
	IsMaster bool `thrift:"IsMaster,6" form:"IsMaster" json:"IsMaster" query:"IsMaster"`
	//携带兵力
	SoldierNum int64 `thrift:"SoldierNum,7" form:"SoldierNum" json:"SoldierNum" query:"SoldierNum"`
	//兵种适性
	ArmsAbility enum.ArmsAbility `thrift:"ArmsAbility,8" form:"ArmsAbility" json:"ArmsAbility" query:"ArmsAbility"`
	//剩余兵力
	RemainNum int64 `thrift:"RemainNum,9" form:"RemainNum" json:"RemainNum" query:"RemainNum"`
	//杀敌
	KillSoliderNum int64 `thrift:"KillSoliderNum,12" form:"KillSoliderNum" json:"KillSoliderNum" query:"KillSoliderNum"`
	//救援
	ResumeSoliderNum int64 `thrift:"ResumeSoliderNum,13" form:"ResumeSoliderNum" json:"ResumeSoliderNum" query:"ResumeSoliderNum"`
	//回合剩余兵力
	RoundRemainSoliderNum map[enum.BattlePhase]map[enum.BattleRound]int64 `thrift:"RoundRemainSoliderNum,14" form:"RoundRemainSoliderNum" json:"RoundRemainSoliderNum" query:"RoundRemainSoliderNum"`
	//回合杀敌数
	RoundKillSoliderNum map[enum.BattlePhase]map[enum.BattleRound]int64 `thrift:"RoundKillSoliderNum,15" form:"RoundKillSoliderNum" json:"RoundKillSoliderNum" query:"RoundKillSoliderNum"`
	//回合恢复数
	RoundResumeSoliderNum map[enum.BattlePhase]map[enum.BattleRound]int64 `thrift:"RoundResumeSoliderNum,16" form:"RoundResumeSoliderNum" json:"RoundResumeSoliderNum" query:"RoundResumeSoliderNum"`
	//回合战法杀敌数
	RoundTacticKillSoliderNum map[enum.BattlePhase]map[enum.BattleRound]int64 `thrift:"RoundTacticKillSoliderNum,17" form:"RoundTacticKillSoliderNum" json:"RoundTacticKillSoliderNum" query:"RoundTacticKillSoliderNum"`
	//回合普攻杀敌数
	RoundAttackKillSoliderNum map[enum.BattlePhase]map[enum.BattleRound]int64 `thrift:"RoundAttackKillSoliderNum,18" form:"RoundAttackKillSoliderNum" json:"RoundAttackKillSoliderNum" query:"RoundAttackKillSoliderNum"`
	//增益效果变量 map<效果,容器属性>
	BuffEffectHolderMap map[string][]*EffectHolderParams `thrift:"BuffEffectHolderMap,19" form:"BuffEffectHolderMap" json:"BuffEffectHolderMap" query:"BuffEffectHolderMap"`
	//减益效果变量 map<效果,容器属性>
	DeBuffEffectHolderMap map[string][]*EffectHolderParams `thrift:"DeBuffEffectHolderMap,20" form:"DeBuffEffectHolderMap" json:"DeBuffEffectHolderMap" query:"DeBuffEffectHolderMap"`
	//增益效果次数
	BuffEffectCountMap map[string]int64 `thrift:"BuffEffectCountMap,21" form:"BuffEffectCountMap" json:"BuffEffectCountMap" query:"BuffEffectCountMap"`
	//减益效果次数
	DeBuffEffectCountMap map[string]int64 `thrift:"DeBuffEffectCountMap,22" form:"DeBuffEffectCountMap" json:"DeBuffEffectCountMap" query:"DeBuffEffectCountMap"`
	//普通攻击次数
	ExecuteGeneralAttackNum int64 `thrift:"ExecuteGeneralAttackNum,23" form:"ExecuteGeneralAttackNum" json:"ExecuteGeneralAttackNum" query:"ExecuteGeneralAttackNum"`
	//被普通攻击次数
	SufferExecuteGeneralAttackNum int64 `thrift:"SufferExecuteGeneralAttackNum,24" form:"SufferExecuteGeneralAttackNum" json:"SufferExecuteGeneralAttackNum" query:"SufferExecuteGeneralAttackNum"`
	//兵刃攻击次数
	ExecuteWeaponAttackNum int64 `thrift:"ExecuteWeaponAttackNum,25" form:"ExecuteWeaponAttackNum" json:"ExecuteWeaponAttackNum" query:"ExecuteWeaponAttackNum"`
	//谋略攻击次数
	ExecuteStrategyAttackNum int64 `thrift:"ExecuteStrategyAttackNum,26" form:"ExecuteStrategyAttackNum" json:"ExecuteStrategyAttackNum" query:"ExecuteStrategyAttackNum"`
	//被兵刃攻击次数
	SufferExecuteWeaponAttackNum int64 `thrift:"SufferExecuteWeaponAttackNum,27" form:"SufferExecuteWeaponAttackNum" json:"SufferExecuteWeaponAttackNum" query:"SufferExecuteWeaponAttackNum"`
	//被谋略攻击次数
	SufferExecuteStrategyAttackNum int64 `thrift:"SufferExecuteStrategyAttackNum,28" form:"SufferExecuteStrategyAttackNum" json:"SufferExecuteStrategyAttackNum" query:"SufferExecuteStrategyAttackNum"`
	//***对战数据***
	GeneralBattleStatistics *GeneralBattleStatistics `thrift:"GeneralBattleStatistics,99" form:"GeneralBattleStatistics" json:"GeneralBattleStatistics" query:"GeneralBattleStatistics"`
}

func NewBattleGeneralStatistics() *BattleGeneralStatistics {
	return &BattleGeneralStatistics{}
}

func (p *BattleGeneralStatistics) InitDefault() {
}

var BattleGeneralStatistics_BaseInfo_DEFAULT *MetadataGeneral

func (p *BattleGeneralStatistics) GetBaseInfo() (v *MetadataGeneral) {
	if !p.IsSetBaseInfo() {
		return BattleGeneralStatistics_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}

func (p *BattleGeneralStatistics) GetEquipTactics() (v []*Tactics) {
	return p.EquipTactics
}

func (p *BattleGeneralStatistics) GetWarBooks() (v []*WarBook) {
	return p.WarBooks
}

func (p *BattleGeneralStatistics) GetSpecialTechs() (v []*SpecialTech) {
	return p.SpecialTechs
}

var BattleGeneralStatistics_Addition_DEFAULT *BattleGeneralAddition

func (p *BattleGeneralStatistics) GetAddition() (v *BattleGeneralAddition) {
	if !p.IsSetAddition() {
		return BattleGeneralStatistics_Addition_DEFAULT
	}
	return p.Addition
}

func (p *BattleGeneralStatistics) GetIsMaster() (v bool) {
	return p.IsMaster
}

func (p *BattleGeneralStatistics) GetSoldierNum() (v int64) {
	return p.SoldierNum
}

func (p *BattleGeneralStatistics) GetArmsAbility() (v enum.ArmsAbility) {
	return p.ArmsAbility
}

func (p *BattleGeneralStatistics) GetRemainNum() (v int64) {
	return p.RemainNum
}

func (p *BattleGeneralStatistics) GetKillSoliderNum() (v int64) {
	return p.KillSoliderNum
}

func (p *BattleGeneralStatistics) GetResumeSoliderNum() (v int64) {
	return p.ResumeSoliderNum
}

func (p *BattleGeneralStatistics) GetRoundRemainSoliderNum() (v map[enum.BattlePhase]map[enum.BattleRound]int64) {
	return p.RoundRemainSoliderNum
}

func (p *BattleGeneralStatistics) GetRoundKillSoliderNum() (v map[enum.BattlePhase]map[enum.BattleRound]int64) {
	return p.RoundKillSoliderNum
}

func (p *BattleGeneralStatistics) GetRoundResumeSoliderNum() (v map[enum.BattlePhase]map[enum.BattleRound]int64) {
	return p.RoundResumeSoliderNum
}

func (p *BattleGeneralStatistics) GetRoundTacticKillSoliderNum() (v map[enum.BattlePhase]map[enum.BattleRound]int64) {
	return p.RoundTacticKillSoliderNum
}

func (p *BattleGeneralStatistics) GetRoundAttackKillSoliderNum() (v map[enum.BattlePhase]map[enum.BattleRound]int64) {
	return p.RoundAttackKillSoliderNum
}

func (p *BattleGeneralStatistics) GetBuffEffectHolderMap() (v map[string][]*EffectHolderParams) {
	return p.BuffEffectHolderMap
}

func (p *BattleGeneralStatistics) GetDeBuffEffectHolderMap() (v map[string][]*EffectHolderParams) {
	return p.DeBuffEffectHolderMap
}

func (p *BattleGeneralStatistics) GetBuffEffectCountMap() (v map[string]int64) {
	return p.BuffEffectCountMap
}

func (p *BattleGeneralStatistics) GetDeBuffEffectCountMap() (v map[string]int64) {
	return p.DeBuffEffectCountMap
}

func (p *BattleGeneralStatistics) GetExecuteGeneralAttackNum() (v int64) {
	return p.ExecuteGeneralAttackNum
}

func (p *BattleGeneralStatistics) GetSufferExecuteGeneralAttackNum() (v int64) {
	return p.SufferExecuteGeneralAttackNum
}

func (p *BattleGeneralStatistics) GetExecuteWeaponAttackNum() (v int64) {
	return p.ExecuteWeaponAttackNum
}

func (p *BattleGeneralStatistics) GetExecuteStrategyAttackNum() (v int64) {
	return p.ExecuteStrategyAttackNum
}

func (p *BattleGeneralStatistics) GetSufferExecuteWeaponAttackNum() (v int64) {
	return p.SufferExecuteWeaponAttackNum
}

func (p *BattleGeneralStatistics) GetSufferExecuteStrategyAttackNum() (v int64) {
	return p.SufferExecuteStrategyAttackNum
}

var BattleGeneralStatistics_GeneralBattleStatistics_DEFAULT *GeneralBattleStatistics

func (p *BattleGeneralStatistics) GetGeneralBattleStatistics() (v *GeneralBattleStatistics) {
	if !p.IsSetGeneralBattleStatistics() {
		return BattleGeneralStatistics_GeneralBattleStatistics_DEFAULT
	}
	return p.GeneralBattleStatistics
}

var fieldIDToName_BattleGeneralStatistics = map[int16]string{
	1:  "BaseInfo",
	2:  "EquipTactics",
	3:  "WarBooks",
	4:  "SpecialTechs",
	5:  "Addition",
	6:  "IsMaster",
	7:  "SoldierNum",
	8:  "ArmsAbility",
	9:  "RemainNum",
	12: "KillSoliderNum",
	13: "ResumeSoliderNum",
	14: "RoundRemainSoliderNum",
	15: "RoundKillSoliderNum",
	16: "RoundResumeSoliderNum",
	17: "RoundTacticKillSoliderNum",
	18: "RoundAttackKillSoliderNum",
	19: "BuffEffectHolderMap",
	20: "DeBuffEffectHolderMap",
	21: "BuffEffectCountMap",
	22: "DeBuffEffectCountMap",
	23: "ExecuteGeneralAttackNum",
	24: "SufferExecuteGeneralAttackNum",
	25: "ExecuteWeaponAttackNum",
	26: "ExecuteStrategyAttackNum",
	27: "SufferExecuteWeaponAttackNum",
	28: "SufferExecuteStrategyAttackNum",
	99: "GeneralBattleStatistics",
}

func (p *BattleGeneralStatistics) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *BattleGeneralStatistics) IsSetAddition() bool {
	return p.Addition != nil
}

func (p *BattleGeneralStatistics) IsSetGeneralBattleStatistics() bool {
	return p.GeneralBattleStatistics != nil
}

func (p *BattleGeneralStatistics) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 99:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField99(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BattleGeneralStatistics[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BattleGeneralStatistics) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMetadataGeneral()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Tactics, 0, size)
	values := make([]Tactics, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EquipTactics = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*WarBook, 0, size)
	values := make([]WarBook, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.WarBooks = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*SpecialTech, 0, size)
	values := make([]SpecialTech, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SpecialTechs = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField5(iprot thrift.TProtocol) error {
	_field := NewBattleGeneralAddition()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Addition = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField6(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsMaster = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SoldierNum = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField8(iprot thrift.TProtocol) error {

	var _field enum.ArmsAbility
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.ArmsAbility(v)
	}
	p.ArmsAbility = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField9(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RemainNum = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField12(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.KillSoliderNum = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField13(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ResumeSoliderNum = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField14(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[enum.BattlePhase]map[enum.BattleRound]int64, size)
	for i := 0; i < size; i++ {
		var _key enum.BattlePhase
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = enum.BattlePhase(v)
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[enum.BattleRound]int64, size)
		for i := 0; i < size; i++ {
			var _key1 enum.BattleRound
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_key1 = enum.BattleRound(v)
			}

			var _val1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.RoundRemainSoliderNum = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField15(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[enum.BattlePhase]map[enum.BattleRound]int64, size)
	for i := 0; i < size; i++ {
		var _key enum.BattlePhase
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = enum.BattlePhase(v)
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[enum.BattleRound]int64, size)
		for i := 0; i < size; i++ {
			var _key1 enum.BattleRound
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_key1 = enum.BattleRound(v)
			}

			var _val1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.RoundKillSoliderNum = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField16(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[enum.BattlePhase]map[enum.BattleRound]int64, size)
	for i := 0; i < size; i++ {
		var _key enum.BattlePhase
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = enum.BattlePhase(v)
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[enum.BattleRound]int64, size)
		for i := 0; i < size; i++ {
			var _key1 enum.BattleRound
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_key1 = enum.BattleRound(v)
			}

			var _val1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.RoundResumeSoliderNum = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField17(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[enum.BattlePhase]map[enum.BattleRound]int64, size)
	for i := 0; i < size; i++ {
		var _key enum.BattlePhase
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = enum.BattlePhase(v)
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[enum.BattleRound]int64, size)
		for i := 0; i < size; i++ {
			var _key1 enum.BattleRound
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_key1 = enum.BattleRound(v)
			}

			var _val1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.RoundTacticKillSoliderNum = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField18(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[enum.BattlePhase]map[enum.BattleRound]int64, size)
	for i := 0; i < size; i++ {
		var _key enum.BattlePhase
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = enum.BattlePhase(v)
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[enum.BattleRound]int64, size)
		for i := 0; i < size; i++ {
			var _key1 enum.BattleRound
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_key1 = enum.BattleRound(v)
			}

			var _val1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.RoundAttackKillSoliderNum = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField19(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string][]*EffectHolderParams, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]*EffectHolderParams, 0, size)
		values := make([]EffectHolderParams, size)
		for i := 0; i < size; i++ {
			_elem := &values[i]
			_elem.InitDefault()

			if err := _elem.Read(iprot); err != nil {
				return err
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.BuffEffectHolderMap = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField20(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string][]*EffectHolderParams, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]*EffectHolderParams, 0, size)
		values := make([]EffectHolderParams, size)
		for i := 0; i < size; i++ {
			_elem := &values[i]
			_elem.InitDefault()

			if err := _elem.Read(iprot); err != nil {
				return err
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.DeBuffEffectHolderMap = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField21(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]int64, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.BuffEffectCountMap = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField22(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]int64, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.DeBuffEffectCountMap = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField23(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExecuteGeneralAttackNum = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField24(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SufferExecuteGeneralAttackNum = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField25(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExecuteWeaponAttackNum = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField26(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExecuteStrategyAttackNum = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField27(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SufferExecuteWeaponAttackNum = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField28(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SufferExecuteStrategyAttackNum = _field
	return nil
}
func (p *BattleGeneralStatistics) ReadField99(iprot thrift.TProtocol) error {
	_field := NewGeneralBattleStatistics()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.GeneralBattleStatistics = _field
	return nil
}

func (p *BattleGeneralStatistics) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("BattleGeneralStatistics"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField99(oprot); err != nil {
			fieldId = 99
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseInfo", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EquipTactics", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EquipTactics)); err != nil {
		return err
	}
	for _, v := range p.EquipTactics {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("WarBooks", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.WarBooks)); err != nil {
		return err
	}
	for _, v := range p.WarBooks {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SpecialTechs", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SpecialTechs)); err != nil {
		return err
	}
	for _, v := range p.SpecialTechs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Addition", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Addition.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsMaster", thrift.BOOL, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsMaster); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SoldierNum", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.SoldierNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ArmsAbility", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ArmsAbility)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RemainNum", thrift.I64, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.RemainNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("KillSoliderNum", thrift.I64, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.KillSoliderNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ResumeSoliderNum", thrift.I64, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ResumeSoliderNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RoundRemainSoliderNum", thrift.MAP, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.RoundRemainSoliderNum)); err != nil {
		return err
	}
	for k, v := range p.RoundRemainSoliderNum {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return err
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(v)); err != nil {
			return err
		}
		for k, v := range v {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RoundKillSoliderNum", thrift.MAP, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.RoundKillSoliderNum)); err != nil {
		return err
	}
	for k, v := range p.RoundKillSoliderNum {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return err
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(v)); err != nil {
			return err
		}
		for k, v := range v {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RoundResumeSoliderNum", thrift.MAP, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.RoundResumeSoliderNum)); err != nil {
		return err
	}
	for k, v := range p.RoundResumeSoliderNum {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return err
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(v)); err != nil {
			return err
		}
		for k, v := range v {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RoundTacticKillSoliderNum", thrift.MAP, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.RoundTacticKillSoliderNum)); err != nil {
		return err
	}
	for k, v := range p.RoundTacticKillSoliderNum {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return err
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(v)); err != nil {
			return err
		}
		for k, v := range v {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RoundAttackKillSoliderNum", thrift.MAP, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.RoundAttackKillSoliderNum)); err != nil {
		return err
	}
	for k, v := range p.RoundAttackKillSoliderNum {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return err
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(v)); err != nil {
			return err
		}
		for k, v := range v {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BuffEffectHolderMap", thrift.MAP, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.BuffEffectHolderMap)); err != nil {
		return err
	}
	for k, v := range p.BuffEffectHolderMap {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DeBuffEffectHolderMap", thrift.MAP, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.DeBuffEffectHolderMap)); err != nil {
		return err
	}
	for k, v := range p.DeBuffEffectHolderMap {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BuffEffectCountMap", thrift.MAP, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.BuffEffectCountMap)); err != nil {
		return err
	}
	for k, v := range p.BuffEffectCountMap {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DeBuffEffectCountMap", thrift.MAP, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.DeBuffEffectCountMap)); err != nil {
		return err
	}
	for k, v := range p.DeBuffEffectCountMap {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ExecuteGeneralAttackNum", thrift.I64, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ExecuteGeneralAttackNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SufferExecuteGeneralAttackNum", thrift.I64, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.SufferExecuteGeneralAttackNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ExecuteWeaponAttackNum", thrift.I64, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ExecuteWeaponAttackNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField26(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ExecuteStrategyAttackNum", thrift.I64, 26); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ExecuteStrategyAttackNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField27(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SufferExecuteWeaponAttackNum", thrift.I64, 27); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.SufferExecuteWeaponAttackNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField28(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SufferExecuteStrategyAttackNum", thrift.I64, 28); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.SufferExecuteStrategyAttackNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *BattleGeneralStatistics) writeField99(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralBattleStatistics", thrift.STRUCT, 99); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.GeneralBattleStatistics.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 99 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 99 end error: ", p), err)
}

func (p *BattleGeneralStatistics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BattleGeneralStatistics(%+v)", *p)

}

// 武将对战加成
type BattleGeneralAddition struct {
	//1. 武将加成
	//1.a. 加点加成
	AbilityAttr *AbilityAttr `thrift:"AbilityAttr,1" form:"AbilityAttr" json:"AbilityAttr" query:"AbilityAttr"`
	//1.b. 等级加成
	GeneralLevel int64 `thrift:"GeneralLevel,2" form:"GeneralLevel" json:"GeneralLevel" query:"GeneralLevel"`
	//1.c. 红度加成
	GeneralStarLevel enum.GeneralStarLevel `thrift:"GeneralStarLevel,3" form:"GeneralStarLevel" json:"GeneralStarLevel" query:"GeneralStarLevel"`
}

func NewBattleGeneralAddition() *BattleGeneralAddition {
	return &BattleGeneralAddition{}
}

func (p *BattleGeneralAddition) InitDefault() {
}

var BattleGeneralAddition_AbilityAttr_DEFAULT *AbilityAttr

func (p *BattleGeneralAddition) GetAbilityAttr() (v *AbilityAttr) {
	if !p.IsSetAbilityAttr() {
		return BattleGeneralAddition_AbilityAttr_DEFAULT
	}
	return p.AbilityAttr
}

func (p *BattleGeneralAddition) GetGeneralLevel() (v int64) {
	return p.GeneralLevel
}

func (p *BattleGeneralAddition) GetGeneralStarLevel() (v enum.GeneralStarLevel) {
	return p.GeneralStarLevel
}

var fieldIDToName_BattleGeneralAddition = map[int16]string{
	1: "AbilityAttr",
	2: "GeneralLevel",
	3: "GeneralStarLevel",
}

func (p *BattleGeneralAddition) IsSetAbilityAttr() bool {
	return p.AbilityAttr != nil
}

func (p *BattleGeneralAddition) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BattleGeneralAddition[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BattleGeneralAddition) ReadField1(iprot thrift.TProtocol) error {
	_field := NewAbilityAttr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AbilityAttr = _field
	return nil
}
func (p *BattleGeneralAddition) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GeneralLevel = _field
	return nil
}
func (p *BattleGeneralAddition) ReadField3(iprot thrift.TProtocol) error {

	var _field enum.GeneralStarLevel
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.GeneralStarLevel(v)
	}
	p.GeneralStarLevel = _field
	return nil
}

func (p *BattleGeneralAddition) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("BattleGeneralAddition"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BattleGeneralAddition) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AbilityAttr", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.AbilityAttr.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BattleGeneralAddition) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralLevel", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GeneralLevel); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BattleGeneralAddition) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralStarLevel", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.GeneralStarLevel)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BattleGeneralAddition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BattleGeneralAddition(%+v)", *p)

}

// 能力属性
type AbilityAttr struct {
	ForceBase        string `thrift:"ForceBase,1" form:"ForceBase" json:"ForceBase" query:"ForceBase"`
	IntelligenceBase string `thrift:"IntelligenceBase,2" form:"IntelligenceBase" json:"IntelligenceBase" query:"IntelligenceBase"`
	CommandBase      string `thrift:"CommandBase,3" form:"CommandBase" json:"CommandBase" query:"CommandBase"`
	SpeedBase        string `thrift:"SpeedBase,4" form:"SpeedBase" json:"SpeedBase" query:"SpeedBase"`
}

func NewAbilityAttr() *AbilityAttr {
	return &AbilityAttr{}
}

func (p *AbilityAttr) InitDefault() {
}

func (p *AbilityAttr) GetForceBase() (v string) {
	return p.ForceBase
}

func (p *AbilityAttr) GetIntelligenceBase() (v string) {
	return p.IntelligenceBase
}

func (p *AbilityAttr) GetCommandBase() (v string) {
	return p.CommandBase
}

func (p *AbilityAttr) GetSpeedBase() (v string) {
	return p.SpeedBase
}

var fieldIDToName_AbilityAttr = map[int16]string{
	1: "ForceBase",
	2: "IntelligenceBase",
	3: "CommandBase",
	4: "SpeedBase",
}

func (p *AbilityAttr) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AbilityAttr[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AbilityAttr) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ForceBase = _field
	return nil
}
func (p *AbilityAttr) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IntelligenceBase = _field
	return nil
}
func (p *AbilityAttr) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CommandBase = _field
	return nil
}
func (p *AbilityAttr) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SpeedBase = _field
	return nil
}

func (p *AbilityAttr) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("AbilityAttr"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AbilityAttr) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ForceBase", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ForceBase); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AbilityAttr) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IntelligenceBase", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IntelligenceBase); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AbilityAttr) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CommandBase", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CommandBase); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AbilityAttr) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SpeedBase", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SpeedBase); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *AbilityAttr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AbilityAttr(%+v)", *p)

}

// 武将资料
type MetadataGeneral struct {
	//mongodb 持久化字段
	Id          int64             `thrift:"Id,1" form:"Id" json:"Id" query:"Id"`
	Name        string            `thrift:"Name,2" form:"Name" json:"Name" query:"Name"`
	Gender      enum.Gender       `thrift:"Gender,3" form:"Gender" json:"Gender" query:"Gender"`
	Group       enum.Group        `thrift:"Group,4" form:"Group" json:"Group" query:"Group"`
	GeneralTag  []enum.GeneralTag `thrift:"GeneralTag,5" form:"GeneralTag" json:"GeneralTag" query:"GeneralTag"`
	AvatarUrl   string            `thrift:"AvatarUrl,6" form:"AvatarUrl" json:"AvatarUrl" query:"AvatarUrl"`
	AbilityAttr *AbilityAttr      `thrift:"AbilityAttr,7" form:"AbilityAttr" json:"AbilityAttr" query:"AbilityAttr"`
	ArmsAttr    *ArmsAttr         `thrift:"ArmsAttr,8" form:"ArmsAttr" json:"ArmsAttr" query:"ArmsAttr"`
	//业务字段
	GeneralBattleType enum.GeneralBattleType `thrift:"GeneralBattleType,9" form:"GeneralBattleType" json:"GeneralBattleType" query:"GeneralBattleType"`
	//自带战法
	SelfTactic     *Tactics            `thrift:"SelfTactic,10" form:"SelfTactic" json:"SelfTactic" query:"SelfTactic"`
	GeneralQuality enum.GeneralQuality `thrift:"GeneralQuality,11" form:"GeneralQuality" json:"GeneralQuality" query:"GeneralQuality"`
	//动态
	IsSupportDynamics bool `thrift:"IsSupportDynamics,12" form:"IsSupportDynamics" json:"IsSupportDynamics" query:"IsSupportDynamics"`
	//典藏
	IsSupportCollect bool `thrift:"IsSupportCollect,13" form:"IsSupportCollect" json:"IsSupportCollect" query:"IsSupportCollect"`
}

func NewMetadataGeneral() *MetadataGeneral {
	return &MetadataGeneral{}
}

func (p *MetadataGeneral) InitDefault() {
}

func (p *MetadataGeneral) GetId() (v int64) {
	return p.Id
}

func (p *MetadataGeneral) GetName() (v string) {
	return p.Name
}

func (p *MetadataGeneral) GetGender() (v enum.Gender) {
	return p.Gender
}

func (p *MetadataGeneral) GetGroup() (v enum.Group) {
	return p.Group
}

func (p *MetadataGeneral) GetGeneralTag() (v []enum.GeneralTag) {
	return p.GeneralTag
}

func (p *MetadataGeneral) GetAvatarUrl() (v string) {
	return p.AvatarUrl
}

var MetadataGeneral_AbilityAttr_DEFAULT *AbilityAttr

func (p *MetadataGeneral) GetAbilityAttr() (v *AbilityAttr) {
	if !p.IsSetAbilityAttr() {
		return MetadataGeneral_AbilityAttr_DEFAULT
	}
	return p.AbilityAttr
}

var MetadataGeneral_ArmsAttr_DEFAULT *ArmsAttr

func (p *MetadataGeneral) GetArmsAttr() (v *ArmsAttr) {
	if !p.IsSetArmsAttr() {
		return MetadataGeneral_ArmsAttr_DEFAULT
	}
	return p.ArmsAttr
}

func (p *MetadataGeneral) GetGeneralBattleType() (v enum.GeneralBattleType) {
	return p.GeneralBattleType
}

var MetadataGeneral_SelfTactic_DEFAULT *Tactics

func (p *MetadataGeneral) GetSelfTactic() (v *Tactics) {
	if !p.IsSetSelfTactic() {
		return MetadataGeneral_SelfTactic_DEFAULT
	}
	return p.SelfTactic
}

func (p *MetadataGeneral) GetGeneralQuality() (v enum.GeneralQuality) {
	return p.GeneralQuality
}

func (p *MetadataGeneral) GetIsSupportDynamics() (v bool) {
	return p.IsSupportDynamics
}

func (p *MetadataGeneral) GetIsSupportCollect() (v bool) {
	return p.IsSupportCollect
}

var fieldIDToName_MetadataGeneral = map[int16]string{
	1:  "Id",
	2:  "Name",
	3:  "Gender",
	4:  "Group",
	5:  "GeneralTag",
	6:  "AvatarUrl",
	7:  "AbilityAttr",
	8:  "ArmsAttr",
	9:  "GeneralBattleType",
	10: "SelfTactic",
	11: "GeneralQuality",
	12: "IsSupportDynamics",
	13: "IsSupportCollect",
}

func (p *MetadataGeneral) IsSetAbilityAttr() bool {
	return p.AbilityAttr != nil
}

func (p *MetadataGeneral) IsSetArmsAttr() bool {
	return p.ArmsAttr != nil
}

func (p *MetadataGeneral) IsSetSelfTactic() bool {
	return p.SelfTactic != nil
}

func (p *MetadataGeneral) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MetadataGeneral[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MetadataGeneral) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *MetadataGeneral) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *MetadataGeneral) ReadField3(iprot thrift.TProtocol) error {

	var _field enum.Gender
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.Gender(v)
	}
	p.Gender = _field
	return nil
}
func (p *MetadataGeneral) ReadField4(iprot thrift.TProtocol) error {

	var _field enum.Group
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.Group(v)
	}
	p.Group = _field
	return nil
}
func (p *MetadataGeneral) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]enum.GeneralTag, 0, size)
	for i := 0; i < size; i++ {

		var _elem enum.GeneralTag
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = enum.GeneralTag(v)
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.GeneralTag = _field
	return nil
}
func (p *MetadataGeneral) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AvatarUrl = _field
	return nil
}
func (p *MetadataGeneral) ReadField7(iprot thrift.TProtocol) error {
	_field := NewAbilityAttr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AbilityAttr = _field
	return nil
}
func (p *MetadataGeneral) ReadField8(iprot thrift.TProtocol) error {
	_field := NewArmsAttr()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ArmsAttr = _field
	return nil
}
func (p *MetadataGeneral) ReadField9(iprot thrift.TProtocol) error {

	var _field enum.GeneralBattleType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.GeneralBattleType(v)
	}
	p.GeneralBattleType = _field
	return nil
}
func (p *MetadataGeneral) ReadField10(iprot thrift.TProtocol) error {
	_field := NewTactics()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SelfTactic = _field
	return nil
}
func (p *MetadataGeneral) ReadField11(iprot thrift.TProtocol) error {

	var _field enum.GeneralQuality
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.GeneralQuality(v)
	}
	p.GeneralQuality = _field
	return nil
}
func (p *MetadataGeneral) ReadField12(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsSupportDynamics = _field
	return nil
}
func (p *MetadataGeneral) ReadField13(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsSupportCollect = _field
	return nil
}

func (p *MetadataGeneral) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("MetadataGeneral"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MetadataGeneral) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MetadataGeneral) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MetadataGeneral) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Gender", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Gender)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MetadataGeneral) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Group", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Group)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MetadataGeneral) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralTag", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.GeneralTag)); err != nil {
		return err
	}
	for _, v := range p.GeneralTag {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MetadataGeneral) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AvatarUrl", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AvatarUrl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MetadataGeneral) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AbilityAttr", thrift.STRUCT, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.AbilityAttr.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MetadataGeneral) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ArmsAttr", thrift.STRUCT, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ArmsAttr.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MetadataGeneral) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralBattleType", thrift.I32, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.GeneralBattleType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *MetadataGeneral) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SelfTactic", thrift.STRUCT, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.SelfTactic.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *MetadataGeneral) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralQuality", thrift.I32, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.GeneralQuality)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *MetadataGeneral) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsSupportDynamics", thrift.BOOL, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsSupportDynamics); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *MetadataGeneral) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsSupportCollect", thrift.BOOL, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsSupportCollect); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *MetadataGeneral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetadataGeneral(%+v)", *p)

}

// 战法资料
type Tactics struct {
	Id            int64              `thrift:"Id,1" form:"Id" json:"Id" query:"Id"`
	Name          string             `thrift:"Name,2" form:"Name" json:"Name" query:"Name"`
	TacticsSource enum.TacticsSource `thrift:"TacticsSource,3" form:"TacticsSource" json:"TacticsSource" query:"TacticsSource"`
	Type          enum.TacticsType   `thrift:"Type,4" form:"Type" json:"Type" query:"Type"`
	Quality       enum.TacticQuality `thrift:"Quality,5" form:"Quality" json:"Quality" query:"Quality"`
	TriggerRate   float64            `thrift:"TriggerRate,6" form:"TriggerRate" json:"TriggerRate" query:"TriggerRate"`
	Desc          string             `thrift:"Desc,7" form:"Desc" json:"Desc" query:"Desc"`
}

func NewTactics() *Tactics {
	return &Tactics{}
}

func (p *Tactics) InitDefault() {
}

func (p *Tactics) GetId() (v int64) {
	return p.Id
}

func (p *Tactics) GetName() (v string) {
	return p.Name
}

func (p *Tactics) GetTacticsSource() (v enum.TacticsSource) {
	return p.TacticsSource
}

func (p *Tactics) GetType() (v enum.TacticsType) {
	return p.Type
}

func (p *Tactics) GetQuality() (v enum.TacticQuality) {
	return p.Quality
}

func (p *Tactics) GetTriggerRate() (v float64) {
	return p.TriggerRate
}

func (p *Tactics) GetDesc() (v string) {
	return p.Desc
}

var fieldIDToName_Tactics = map[int16]string{
	1: "Id",
	2: "Name",
	3: "TacticsSource",
	4: "Type",
	5: "Quality",
	6: "TriggerRate",
	7: "Desc",
}

func (p *Tactics) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Tactics[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Tactics) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *Tactics) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *Tactics) ReadField3(iprot thrift.TProtocol) error {

	var _field enum.TacticsSource
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.TacticsSource(v)
	}
	p.TacticsSource = _field
	return nil
}
func (p *Tactics) ReadField4(iprot thrift.TProtocol) error {

	var _field enum.TacticsType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.TacticsType(v)
	}
	p.Type = _field
	return nil
}
func (p *Tactics) ReadField5(iprot thrift.TProtocol) error {

	var _field enum.TacticQuality
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.TacticQuality(v)
	}
	p.Quality = _field
	return nil
}
func (p *Tactics) ReadField6(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TriggerRate = _field
	return nil
}
func (p *Tactics) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Desc = _field
	return nil
}

func (p *Tactics) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("Tactics"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Tactics) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Tactics) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Tactics) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TacticsSource", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.TacticsSource)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Tactics) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Tactics) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Quality", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Quality)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Tactics) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TriggerRate", thrift.DOUBLE, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.TriggerRate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Tactics) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Desc", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Desc); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Tactics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Tactics(%+v)", *p)

}

// 兵种属性
type ArmsAttr struct {
	Cavalry   enum.ArmsAbility `thrift:"Cavalry,1" form:"Cavalry" json:"Cavalry" query:"Cavalry"`
	Mauler    enum.ArmsAbility `thrift:"Mauler,2" form:"Mauler" json:"Mauler" query:"Mauler"`
	Archers   enum.ArmsAbility `thrift:"Archers,3" form:"Archers" json:"Archers" query:"Archers"`
	Spearman  enum.ArmsAbility `thrift:"Spearman,4" form:"Spearman" json:"Spearman" query:"Spearman"`
	Apparatus enum.ArmsAbility `thrift:"Apparatus,5" form:"Apparatus" json:"Apparatus" query:"Apparatus"`
}

func NewArmsAttr() *ArmsAttr {
	return &ArmsAttr{}
}

func (p *ArmsAttr) InitDefault() {
}

func (p *ArmsAttr) GetCavalry() (v enum.ArmsAbility) {
	return p.Cavalry
}

func (p *ArmsAttr) GetMauler() (v enum.ArmsAbility) {
	return p.Mauler
}

func (p *ArmsAttr) GetArchers() (v enum.ArmsAbility) {
	return p.Archers
}

func (p *ArmsAttr) GetSpearman() (v enum.ArmsAbility) {
	return p.Spearman
}

func (p *ArmsAttr) GetApparatus() (v enum.ArmsAbility) {
	return p.Apparatus
}

var fieldIDToName_ArmsAttr = map[int16]string{
	1: "Cavalry",
	2: "Mauler",
	3: "Archers",
	4: "Spearman",
	5: "Apparatus",
}

func (p *ArmsAttr) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ArmsAttr[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ArmsAttr) ReadField1(iprot thrift.TProtocol) error {

	var _field enum.ArmsAbility
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.ArmsAbility(v)
	}
	p.Cavalry = _field
	return nil
}
func (p *ArmsAttr) ReadField2(iprot thrift.TProtocol) error {

	var _field enum.ArmsAbility
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.ArmsAbility(v)
	}
	p.Mauler = _field
	return nil
}
func (p *ArmsAttr) ReadField3(iprot thrift.TProtocol) error {

	var _field enum.ArmsAbility
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.ArmsAbility(v)
	}
	p.Archers = _field
	return nil
}
func (p *ArmsAttr) ReadField4(iprot thrift.TProtocol) error {

	var _field enum.ArmsAbility
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.ArmsAbility(v)
	}
	p.Spearman = _field
	return nil
}
func (p *ArmsAttr) ReadField5(iprot thrift.TProtocol) error {

	var _field enum.ArmsAbility
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.ArmsAbility(v)
	}
	p.Apparatus = _field
	return nil
}

func (p *ArmsAttr) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("ArmsAttr"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ArmsAttr) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Cavalry", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Cavalry)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ArmsAttr) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Mauler", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Mauler)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ArmsAttr) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Archers", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Archers)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ArmsAttr) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Spearman", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Spearman)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ArmsAttr) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Apparatus", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Apparatus)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ArmsAttr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArmsAttr(%+v)", *p)

}

// 建筑科技属性加成
type BuildingTechAttrAddition struct {
	ForceAddition        string `thrift:"ForceAddition,1" form:"ForceAddition" json:"ForceAddition" query:"ForceAddition"`
	IntelligenceAddition string `thrift:"IntelligenceAddition,2" form:"IntelligenceAddition" json:"IntelligenceAddition" query:"IntelligenceAddition"`
	CommandAddition      string `thrift:"CommandAddition,3" form:"CommandAddition" json:"CommandAddition" query:"CommandAddition"`
	SpeedAddition        string `thrift:"SpeedAddition,4" form:"SpeedAddition" json:"SpeedAddition" query:"SpeedAddition"`
}

func NewBuildingTechAttrAddition() *BuildingTechAttrAddition {
	return &BuildingTechAttrAddition{}
}

func (p *BuildingTechAttrAddition) InitDefault() {
}

func (p *BuildingTechAttrAddition) GetForceAddition() (v string) {
	return p.ForceAddition
}

func (p *BuildingTechAttrAddition) GetIntelligenceAddition() (v string) {
	return p.IntelligenceAddition
}

func (p *BuildingTechAttrAddition) GetCommandAddition() (v string) {
	return p.CommandAddition
}

func (p *BuildingTechAttrAddition) GetSpeedAddition() (v string) {
	return p.SpeedAddition
}

var fieldIDToName_BuildingTechAttrAddition = map[int16]string{
	1: "ForceAddition",
	2: "IntelligenceAddition",
	3: "CommandAddition",
	4: "SpeedAddition",
}

func (p *BuildingTechAttrAddition) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BuildingTechAttrAddition[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BuildingTechAttrAddition) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ForceAddition = _field
	return nil
}
func (p *BuildingTechAttrAddition) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IntelligenceAddition = _field
	return nil
}
func (p *BuildingTechAttrAddition) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CommandAddition = _field
	return nil
}
func (p *BuildingTechAttrAddition) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SpeedAddition = _field
	return nil
}

func (p *BuildingTechAttrAddition) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("BuildingTechAttrAddition"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BuildingTechAttrAddition) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ForceAddition", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ForceAddition); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BuildingTechAttrAddition) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IntelligenceAddition", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IntelligenceAddition); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BuildingTechAttrAddition) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CommandAddition", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CommandAddition); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BuildingTechAttrAddition) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SpeedAddition", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SpeedAddition); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BuildingTechAttrAddition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BuildingTechAttrAddition(%+v)", *p)

}

// 建筑科技阵营加成
type BuildingTechGroupAddition struct {
	GroupWeiGuoRate   string `thrift:"GroupWeiGuoRate,1" form:"GroupWeiGuoRate" json:"GroupWeiGuoRate" query:"GroupWeiGuoRate"`
	GroupShuGuoRate   string `thrift:"GroupShuGuoRate,2" form:"GroupShuGuoRate" json:"GroupShuGuoRate" query:"GroupShuGuoRate"`
	GroupWuGuoRate    string `thrift:"GroupWuGuoRate,3" form:"GroupWuGuoRate" json:"GroupWuGuoRate" query:"GroupWuGuoRate"`
	GroupQunXiongRate string `thrift:"GroupQunXiongRate,4" form:"GroupQunXiongRate" json:"GroupQunXiongRate" query:"GroupQunXiongRate"`
}

func NewBuildingTechGroupAddition() *BuildingTechGroupAddition {
	return &BuildingTechGroupAddition{}
}

func (p *BuildingTechGroupAddition) InitDefault() {
}

func (p *BuildingTechGroupAddition) GetGroupWeiGuoRate() (v string) {
	return p.GroupWeiGuoRate
}

func (p *BuildingTechGroupAddition) GetGroupShuGuoRate() (v string) {
	return p.GroupShuGuoRate
}

func (p *BuildingTechGroupAddition) GetGroupWuGuoRate() (v string) {
	return p.GroupWuGuoRate
}

func (p *BuildingTechGroupAddition) GetGroupQunXiongRate() (v string) {
	return p.GroupQunXiongRate
}

var fieldIDToName_BuildingTechGroupAddition = map[int16]string{
	1: "GroupWeiGuoRate",
	2: "GroupShuGuoRate",
	3: "GroupWuGuoRate",
	4: "GroupQunXiongRate",
}

func (p *BuildingTechGroupAddition) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BuildingTechGroupAddition[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BuildingTechGroupAddition) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GroupWeiGuoRate = _field
	return nil
}
func (p *BuildingTechGroupAddition) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GroupShuGuoRate = _field
	return nil
}
func (p *BuildingTechGroupAddition) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GroupWuGuoRate = _field
	return nil
}
func (p *BuildingTechGroupAddition) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GroupQunXiongRate = _field
	return nil
}

func (p *BuildingTechGroupAddition) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("BuildingTechGroupAddition"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BuildingTechGroupAddition) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GroupWeiGuoRate", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.GroupWeiGuoRate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BuildingTechGroupAddition) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GroupShuGuoRate", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.GroupShuGuoRate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BuildingTechGroupAddition) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GroupWuGuoRate", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.GroupWuGuoRate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BuildingTechGroupAddition) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GroupQunXiongRate", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.GroupQunXiongRate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BuildingTechGroupAddition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BuildingTechGroupAddition(%+v)", *p)

}

type BattleDoResponse struct {
	Meta *common.Meta `thrift:"meta,1" form:"meta" json:"meta" query:"meta"`
	//对战数据统计
	BattleResultStatistics *BattleResultStatistics `thrift:"BattleResultStatistics,2" form:"BattleResultStatistics" json:"BattleResultStatistics" query:"BattleResultStatistics"`
	//对战过程数据 map<战斗阶段,map<战斗回合,战报内容list>>
	BattleProcessStatistics map[int64]map[int64][]string `thrift:"BattleProcessStatistics,3" form:"BattleProcessStatistics" json:"BattleProcessStatistics" query:"BattleProcessStatistics"`
}

func NewBattleDoResponse() *BattleDoResponse {
	return &BattleDoResponse{}
}

func (p *BattleDoResponse) InitDefault() {
}

var BattleDoResponse_Meta_DEFAULT *common.Meta

func (p *BattleDoResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return BattleDoResponse_Meta_DEFAULT
	}
	return p.Meta
}

var BattleDoResponse_BattleResultStatistics_DEFAULT *BattleResultStatistics

func (p *BattleDoResponse) GetBattleResultStatistics() (v *BattleResultStatistics) {
	if !p.IsSetBattleResultStatistics() {
		return BattleDoResponse_BattleResultStatistics_DEFAULT
	}
	return p.BattleResultStatistics
}

func (p *BattleDoResponse) GetBattleProcessStatistics() (v map[int64]map[int64][]string) {
	return p.BattleProcessStatistics
}

var fieldIDToName_BattleDoResponse = map[int16]string{
	1: "meta",
	2: "BattleResultStatistics",
	3: "BattleProcessStatistics",
}

func (p *BattleDoResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *BattleDoResponse) IsSetBattleResultStatistics() bool {
	return p.BattleResultStatistics != nil
}

func (p *BattleDoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BattleDoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BattleDoResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *BattleDoResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := NewBattleResultStatistics()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BattleResultStatistics = _field
	return nil
}
func (p *BattleDoResponse) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64]map[int64][]string, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[int64][]string, size)
		for i := 0; i < size; i++ {
			var _key1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_key1 = v
			}
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return err
			}
			_val1 := make([]string, 0, size)
			for i := 0; i < size; i++ {

				var _elem string
				if v, err := iprot.ReadString(); err != nil {
					return err
				} else {
					_elem = v
				}

				_val1 = append(_val1, _elem)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return err
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.BattleProcessStatistics = _field
	return nil
}

func (p *BattleDoResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("BattleDoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BattleDoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BattleDoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BattleResultStatistics", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BattleResultStatistics.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BattleDoResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BattleProcessStatistics", thrift.MAP, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I64, thrift.MAP, len(p.BattleProcessStatistics)); err != nil {
		return err
	}
	for k, v := range p.BattleProcessStatistics {
		if err := oprot.WriteI64(k); err != nil {
			return err
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.LIST, len(v)); err != nil {
			return err
		}
		for k, v := range v {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := oprot.WriteString(v); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BattleDoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BattleDoResponse(%+v)", *p)

}

type EffectHolderParams struct {
	//触发率
	TriggerRate float64 `thrift:"TriggerRate,1" form:"TriggerRate" json:"TriggerRate" query:"TriggerRate"`
	//影响数值
	EffectValue int64 `thrift:"EffectValue,2" form:"EffectValue" json:"EffectValue" query:"EffectValue"`
	//影响百分比
	EffectRate float64 `thrift:"EffectRate,3" form:"EffectRate" json:"EffectRate" query:"EffectRate"`
	//影响回合
	EffectRound enum.BattleRound `thrift:"EffectRound,4" form:"EffectRound" json:"EffectRound" query:"EffectRound"`
	//影响次数
	EffectTimes int64 `thrift:"EffectTimes,5" form:"EffectTimes" json:"EffectTimes" query:"EffectTimes"`
	//最大影响次数
	MaxEffectTimes int64 `thrift:"MaxEffectTimes,6" form:"MaxEffectTimes" json:"MaxEffectTimes" query:"MaxEffectTimes"`
	//来源于哪个战法
	FromTactic string `thrift:"FromTactic,7" form:"FromTactic" json:"FromTactic" query:"FromTactic"`
	//来源于哪个兵书
	FromWarbook string `thrift:"FromWarbook,8" form:"FromWarbook" json:"FromWarbook" query:"FromWarbook"`
	//是否可以刷新
	IsSupportRefresh bool `thrift:"IsSupportRefresh,9" form:"IsSupportRefresh" json:"IsSupportRefresh" query:"IsSupportRefresh"`
	//是否不可驱散
	IsAvoidDispel bool `thrift:"IsAvoidDispel,10" form:"IsAvoidDispel" json:"IsAvoidDispel" query:"IsAvoidDispel"`
}

func NewEffectHolderParams() *EffectHolderParams {
	return &EffectHolderParams{}
}

func (p *EffectHolderParams) InitDefault() {
}

func (p *EffectHolderParams) GetTriggerRate() (v float64) {
	return p.TriggerRate
}

func (p *EffectHolderParams) GetEffectValue() (v int64) {
	return p.EffectValue
}

func (p *EffectHolderParams) GetEffectRate() (v float64) {
	return p.EffectRate
}

func (p *EffectHolderParams) GetEffectRound() (v enum.BattleRound) {
	return p.EffectRound
}

func (p *EffectHolderParams) GetEffectTimes() (v int64) {
	return p.EffectTimes
}

func (p *EffectHolderParams) GetMaxEffectTimes() (v int64) {
	return p.MaxEffectTimes
}

func (p *EffectHolderParams) GetFromTactic() (v string) {
	return p.FromTactic
}

func (p *EffectHolderParams) GetFromWarbook() (v string) {
	return p.FromWarbook
}

func (p *EffectHolderParams) GetIsSupportRefresh() (v bool) {
	return p.IsSupportRefresh
}

func (p *EffectHolderParams) GetIsAvoidDispel() (v bool) {
	return p.IsAvoidDispel
}

var fieldIDToName_EffectHolderParams = map[int16]string{
	1:  "TriggerRate",
	2:  "EffectValue",
	3:  "EffectRate",
	4:  "EffectRound",
	5:  "EffectTimes",
	6:  "MaxEffectTimes",
	7:  "FromTactic",
	8:  "FromWarbook",
	9:  "IsSupportRefresh",
	10: "IsAvoidDispel",
}

func (p *EffectHolderParams) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EffectHolderParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EffectHolderParams) ReadField1(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TriggerRate = _field
	return nil
}
func (p *EffectHolderParams) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EffectValue = _field
	return nil
}
func (p *EffectHolderParams) ReadField3(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EffectRate = _field
	return nil
}
func (p *EffectHolderParams) ReadField4(iprot thrift.TProtocol) error {

	var _field enum.BattleRound
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.BattleRound(v)
	}
	p.EffectRound = _field
	return nil
}
func (p *EffectHolderParams) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EffectTimes = _field
	return nil
}
func (p *EffectHolderParams) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxEffectTimes = _field
	return nil
}
func (p *EffectHolderParams) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FromTactic = _field
	return nil
}
func (p *EffectHolderParams) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FromWarbook = _field
	return nil
}
func (p *EffectHolderParams) ReadField9(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsSupportRefresh = _field
	return nil
}
func (p *EffectHolderParams) ReadField10(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IsAvoidDispel = _field
	return nil
}

func (p *EffectHolderParams) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("EffectHolderParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EffectHolderParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TriggerRate", thrift.DOUBLE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.TriggerRate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EffectHolderParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EffectValue", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EffectValue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EffectHolderParams) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EffectRate", thrift.DOUBLE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.EffectRate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *EffectHolderParams) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EffectRound", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.EffectRound)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *EffectHolderParams) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EffectTimes", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EffectTimes); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *EffectHolderParams) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MaxEffectTimes", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MaxEffectTimes); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *EffectHolderParams) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FromTactic", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FromTactic); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *EffectHolderParams) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FromWarbook", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FromWarbook); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *EffectHolderParams) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsSupportRefresh", thrift.BOOL, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsSupportRefresh); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *EffectHolderParams) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsAvoidDispel", thrift.BOOL, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsAvoidDispel); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *EffectHolderParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EffectHolderParams(%+v)", *p)

}

// 对战数据统计
type BattleResultStatistics struct {
	//我军统计
	FightingTeam *TeamBattleStatistics `thrift:"FightingTeam,1" form:"FightingTeam" json:"FightingTeam" query:"FightingTeam"`
	//敌军统计
	EnemyTeam *TeamBattleStatistics `thrift:"EnemyTeam,2" form:"EnemyTeam" json:"EnemyTeam" query:"EnemyTeam"`
}

func NewBattleResultStatistics() *BattleResultStatistics {
	return &BattleResultStatistics{}
}

func (p *BattleResultStatistics) InitDefault() {
}

var BattleResultStatistics_FightingTeam_DEFAULT *TeamBattleStatistics

func (p *BattleResultStatistics) GetFightingTeam() (v *TeamBattleStatistics) {
	if !p.IsSetFightingTeam() {
		return BattleResultStatistics_FightingTeam_DEFAULT
	}
	return p.FightingTeam
}

var BattleResultStatistics_EnemyTeam_DEFAULT *TeamBattleStatistics

func (p *BattleResultStatistics) GetEnemyTeam() (v *TeamBattleStatistics) {
	if !p.IsSetEnemyTeam() {
		return BattleResultStatistics_EnemyTeam_DEFAULT
	}
	return p.EnemyTeam
}

var fieldIDToName_BattleResultStatistics = map[int16]string{
	1: "FightingTeam",
	2: "EnemyTeam",
}

func (p *BattleResultStatistics) IsSetFightingTeam() bool {
	return p.FightingTeam != nil
}

func (p *BattleResultStatistics) IsSetEnemyTeam() bool {
	return p.EnemyTeam != nil
}

func (p *BattleResultStatistics) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BattleResultStatistics[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BattleResultStatistics) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTeamBattleStatistics()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FightingTeam = _field
	return nil
}
func (p *BattleResultStatistics) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTeamBattleStatistics()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EnemyTeam = _field
	return nil
}

func (p *BattleResultStatistics) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("BattleResultStatistics"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BattleResultStatistics) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FightingTeam", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.FightingTeam.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BattleResultStatistics) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EnemyTeam", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.EnemyTeam.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BattleResultStatistics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BattleResultStatistics(%+v)", *p)

}

// 队伍对战数据统计
type TeamBattleStatistics struct {
	//***队伍原始数据***
	//队伍信息
	BattleTeam *BattleTeamStatistics `thrift:"BattleTeam,1" form:"BattleTeam" json:"BattleTeam" query:"BattleTeam"`
	//对战结果
	BattleResult enum.BattleResult `thrift:"BattleResult,2" form:"BattleResult" json:"BattleResult" query:"BattleResult"`
}

func NewTeamBattleStatistics() *TeamBattleStatistics {
	return &TeamBattleStatistics{}
}

func (p *TeamBattleStatistics) InitDefault() {
}

var TeamBattleStatistics_BattleTeam_DEFAULT *BattleTeamStatistics

func (p *TeamBattleStatistics) GetBattleTeam() (v *BattleTeamStatistics) {
	if !p.IsSetBattleTeam() {
		return TeamBattleStatistics_BattleTeam_DEFAULT
	}
	return p.BattleTeam
}

func (p *TeamBattleStatistics) GetBattleResult() (v enum.BattleResult) {
	return p.BattleResult
}

var fieldIDToName_TeamBattleStatistics = map[int16]string{
	1: "BattleTeam",
	2: "BattleResult",
}

func (p *TeamBattleStatistics) IsSetBattleTeam() bool {
	return p.BattleTeam != nil
}

func (p *TeamBattleStatistics) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TeamBattleStatistics[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TeamBattleStatistics) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBattleTeamStatistics()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BattleTeam = _field
	return nil
}
func (p *TeamBattleStatistics) ReadField2(iprot thrift.TProtocol) error {

	var _field enum.BattleResult
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.BattleResult(v)
	}
	p.BattleResult = _field
	return nil
}

func (p *TeamBattleStatistics) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("TeamBattleStatistics"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TeamBattleStatistics) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BattleTeam", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BattleTeam.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TeamBattleStatistics) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BattleResult", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.BattleResult)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TeamBattleStatistics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TeamBattleStatistics(%+v)", *p)

}

// 武将对战数据统计
type GeneralBattleStatistics struct {
	//战法统计
	TacticStatisticsList []*TacticStatistics `thrift:"TacticStatisticsList,1" form:"TacticStatisticsList" json:"TacticStatisticsList" query:"TacticStatisticsList"`
	//普攻统计
	GeneralAttackStatistics *TacticStatistics `thrift:"GeneralAttackStatistics,2" form:"GeneralAttackStatistics" json:"GeneralAttackStatistics" query:"GeneralAttackStatistics"`
}

func NewGeneralBattleStatistics() *GeneralBattleStatistics {
	return &GeneralBattleStatistics{}
}

func (p *GeneralBattleStatistics) InitDefault() {
}

func (p *GeneralBattleStatistics) GetTacticStatisticsList() (v []*TacticStatistics) {
	return p.TacticStatisticsList
}

var GeneralBattleStatistics_GeneralAttackStatistics_DEFAULT *TacticStatistics

func (p *GeneralBattleStatistics) GetGeneralAttackStatistics() (v *TacticStatistics) {
	if !p.IsSetGeneralAttackStatistics() {
		return GeneralBattleStatistics_GeneralAttackStatistics_DEFAULT
	}
	return p.GeneralAttackStatistics
}

var fieldIDToName_GeneralBattleStatistics = map[int16]string{
	1: "TacticStatisticsList",
	2: "GeneralAttackStatistics",
}

func (p *GeneralBattleStatistics) IsSetGeneralAttackStatistics() bool {
	return p.GeneralAttackStatistics != nil
}

func (p *GeneralBattleStatistics) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralBattleStatistics[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralBattleStatistics) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TacticStatistics, 0, size)
	values := make([]TacticStatistics, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TacticStatisticsList = _field
	return nil
}
func (p *GeneralBattleStatistics) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTacticStatistics()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.GeneralAttackStatistics = _field
	return nil
}

func (p *GeneralBattleStatistics) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralBattleStatistics"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralBattleStatistics) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TacticStatisticsList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TacticStatisticsList)); err != nil {
		return err
	}
	for _, v := range p.TacticStatisticsList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralBattleStatistics) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralAttackStatistics", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.GeneralAttackStatistics.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralBattleStatistics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralBattleStatistics(%+v)", *p)

}

type TacticStatistics struct {
	//战法ID
	TacticId int64 `thrift:"TacticId,1" form:"TacticId" json:"TacticId" query:"TacticId"`
	//战法名称
	TacticName string `thrift:"TacticName,2" form:"TacticName" json:"TacticName" query:"TacticName"`
	//战法品质
	TacticQuality int64 `thrift:"TacticQuality,3" form:"TacticQuality" json:"TacticQuality" query:"TacticQuality"`
	//发动次数
	TriggerTimes int64 `thrift:"TriggerTimes,4" form:"TriggerTimes" json:"TriggerTimes" query:"TriggerTimes"`
	//杀敌
	KillSoliderNum int64 `thrift:"KillSoliderNum,5" form:"KillSoliderNum" json:"KillSoliderNum" query:"KillSoliderNum"`
	//救援
	ResumeSoliderNum int64 `thrift:"ResumeSoliderNum,6" form:"ResumeSoliderNum" json:"ResumeSoliderNum" query:"ResumeSoliderNum"`
	//回合发动
	RoundTriggerTimes map[enum.BattlePhase]map[enum.BattleRound]int64 `thrift:"RoundTriggerTimes,7" form:"RoundTriggerTimes" json:"RoundTriggerTimes" query:"RoundTriggerTimes"`
	//回合杀敌
	RoundKillSoliderNum map[enum.BattlePhase]map[enum.BattleRound]int64 `thrift:"RoundKillSoliderNum,8" form:"RoundKillSoliderNum" json:"RoundKillSoliderNum" query:"RoundKillSoliderNum"`
	//回合救援
	RoundResumeSoliderNum map[enum.BattlePhase]map[enum.BattleRound]int64 `thrift:"RoundResumeSoliderNum,9" form:"RoundResumeSoliderNum" json:"RoundResumeSoliderNum" query:"RoundResumeSoliderNum"`
}

func NewTacticStatistics() *TacticStatistics {
	return &TacticStatistics{}
}

func (p *TacticStatistics) InitDefault() {
}

func (p *TacticStatistics) GetTacticId() (v int64) {
	return p.TacticId
}

func (p *TacticStatistics) GetTacticName() (v string) {
	return p.TacticName
}

func (p *TacticStatistics) GetTacticQuality() (v int64) {
	return p.TacticQuality
}

func (p *TacticStatistics) GetTriggerTimes() (v int64) {
	return p.TriggerTimes
}

func (p *TacticStatistics) GetKillSoliderNum() (v int64) {
	return p.KillSoliderNum
}

func (p *TacticStatistics) GetResumeSoliderNum() (v int64) {
	return p.ResumeSoliderNum
}

func (p *TacticStatistics) GetRoundTriggerTimes() (v map[enum.BattlePhase]map[enum.BattleRound]int64) {
	return p.RoundTriggerTimes
}

func (p *TacticStatistics) GetRoundKillSoliderNum() (v map[enum.BattlePhase]map[enum.BattleRound]int64) {
	return p.RoundKillSoliderNum
}

func (p *TacticStatistics) GetRoundResumeSoliderNum() (v map[enum.BattlePhase]map[enum.BattleRound]int64) {
	return p.RoundResumeSoliderNum
}

var fieldIDToName_TacticStatistics = map[int16]string{
	1: "TacticId",
	2: "TacticName",
	3: "TacticQuality",
	4: "TriggerTimes",
	5: "KillSoliderNum",
	6: "ResumeSoliderNum",
	7: "RoundTriggerTimes",
	8: "RoundKillSoliderNum",
	9: "RoundResumeSoliderNum",
}

func (p *TacticStatistics) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TacticStatistics[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TacticStatistics) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TacticId = _field
	return nil
}
func (p *TacticStatistics) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TacticName = _field
	return nil
}
func (p *TacticStatistics) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TacticQuality = _field
	return nil
}
func (p *TacticStatistics) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TriggerTimes = _field
	return nil
}
func (p *TacticStatistics) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.KillSoliderNum = _field
	return nil
}
func (p *TacticStatistics) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ResumeSoliderNum = _field
	return nil
}
func (p *TacticStatistics) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[enum.BattlePhase]map[enum.BattleRound]int64, size)
	for i := 0; i < size; i++ {
		var _key enum.BattlePhase
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = enum.BattlePhase(v)
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[enum.BattleRound]int64, size)
		for i := 0; i < size; i++ {
			var _key1 enum.BattleRound
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_key1 = enum.BattleRound(v)
			}

			var _val1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.RoundTriggerTimes = _field
	return nil
}
func (p *TacticStatistics) ReadField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[enum.BattlePhase]map[enum.BattleRound]int64, size)
	for i := 0; i < size; i++ {
		var _key enum.BattlePhase
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = enum.BattlePhase(v)
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[enum.BattleRound]int64, size)
		for i := 0; i < size; i++ {
			var _key1 enum.BattleRound
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_key1 = enum.BattleRound(v)
			}

			var _val1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.RoundKillSoliderNum = _field
	return nil
}
func (p *TacticStatistics) ReadField9(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[enum.BattlePhase]map[enum.BattleRound]int64, size)
	for i := 0; i < size; i++ {
		var _key enum.BattlePhase
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = enum.BattlePhase(v)
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[enum.BattleRound]int64, size)
		for i := 0; i < size; i++ {
			var _key1 enum.BattleRound
			if v, err := iprot.ReadI32(); err != nil {
				return err
			} else {
				_key1 = enum.BattleRound(v)
			}

			var _val1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_val1 = v
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.RoundResumeSoliderNum = _field
	return nil
}

func (p *TacticStatistics) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("TacticStatistics"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TacticStatistics) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TacticId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TacticId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TacticStatistics) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TacticName", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TacticName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TacticStatistics) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TacticQuality", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TacticQuality); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TacticStatistics) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TriggerTimes", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TriggerTimes); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TacticStatistics) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("KillSoliderNum", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.KillSoliderNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TacticStatistics) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ResumeSoliderNum", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ResumeSoliderNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TacticStatistics) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RoundTriggerTimes", thrift.MAP, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.RoundTriggerTimes)); err != nil {
		return err
	}
	for k, v := range p.RoundTriggerTimes {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return err
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(v)); err != nil {
			return err
		}
		for k, v := range v {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TacticStatistics) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RoundKillSoliderNum", thrift.MAP, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.RoundKillSoliderNum)); err != nil {
		return err
	}
	for k, v := range p.RoundKillSoliderNum {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return err
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(v)); err != nil {
			return err
		}
		for k, v := range v {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TacticStatistics) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RoundResumeSoliderNum", thrift.MAP, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.RoundResumeSoliderNum)); err != nil {
		return err
	}
	for k, v := range p.RoundResumeSoliderNum {
		if err := oprot.WriteI32(int32(k)); err != nil {
			return err
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(v)); err != nil {
			return err
		}
		for k, v := range v {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *TacticStatistics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TacticStatistics(%+v)", *p)

}

// ============= 模拟对战 END ==============
// ============= 模拟对战列表 BEGIN ==============
type BattleListRequest struct {
	// 用户ID
	Uid      string `thrift:"Uid,1" form:"Uid" json:"Uid" query:"Uid"`
	PageNo   int64  `thrift:"PageNo,100" form:"PageNo" json:"PageNo" query:"PageNo"`
	PageSize int64  `thrift:"PageSize,101" form:"PageSize" json:"PageSize" query:"PageSize"`
}

func NewBattleListRequest() *BattleListRequest {
	return &BattleListRequest{}
}

func (p *BattleListRequest) InitDefault() {
}

func (p *BattleListRequest) GetUid() (v string) {
	return p.Uid
}

func (p *BattleListRequest) GetPageNo() (v int64) {
	return p.PageNo
}

func (p *BattleListRequest) GetPageSize() (v int64) {
	return p.PageSize
}

var fieldIDToName_BattleListRequest = map[int16]string{
	1:   "Uid",
	100: "PageNo",
	101: "PageSize",
}

func (p *BattleListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BattleListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BattleListRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Uid = _field
	return nil
}
func (p *BattleListRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageNo = _field
	return nil
}
func (p *BattleListRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}

func (p *BattleListRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("BattleListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BattleListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Uid", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BattleListRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PageNo", thrift.I64, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *BattleListRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PageSize", thrift.I64, 101); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}

func (p *BattleListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BattleListRequest(%+v)", *p)

}

type BattleListResponse struct {
	Meta *common.Meta `thrift:"Meta,1" form:"Meta" json:"Meta" query:"Meta"`
	//对战记录列表
	BattleRecordList []*BattleRecordInfo `thrift:"BattleRecordList,2" form:"BattleRecordList" json:"BattleRecordList" query:"BattleRecordList"`
}

func NewBattleListResponse() *BattleListResponse {
	return &BattleListResponse{}
}

func (p *BattleListResponse) InitDefault() {
}

var BattleListResponse_Meta_DEFAULT *common.Meta

func (p *BattleListResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return BattleListResponse_Meta_DEFAULT
	}
	return p.Meta
}

func (p *BattleListResponse) GetBattleRecordList() (v []*BattleRecordInfo) {
	return p.BattleRecordList
}

var fieldIDToName_BattleListResponse = map[int16]string{
	1: "Meta",
	2: "BattleRecordList",
}

func (p *BattleListResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *BattleListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BattleListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BattleListResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *BattleListResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*BattleRecordInfo, 0, size)
	values := make([]BattleRecordInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.BattleRecordList = _field
	return nil
}

func (p *BattleListResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("BattleListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BattleListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BattleListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BattleRecordList", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BattleRecordList)); err != nil {
		return err
	}
	for _, v := range p.BattleRecordList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BattleListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BattleListResponse(%+v)", *p)

}

type BattleRecordInfo struct {
	//对战结果
	BattleResult enum.BattleResult `thrift:"BattleResult,1" form:"BattleResult" json:"BattleResult" query:"BattleResult"`
	// 出战队伍信息
	FightingTeam *TeamBattleStatistics `thrift:"FightingTeam,2" form:"FightingTeam" json:"FightingTeam" query:"FightingTeam"`
	// 对战队伍信息
	EnemyTeam *TeamBattleStatistics `thrift:"EnemyTeam,3" form:"EnemyTeam" json:"EnemyTeam" query:"EnemyTeam"`
}

func NewBattleRecordInfo() *BattleRecordInfo {
	return &BattleRecordInfo{}
}

func (p *BattleRecordInfo) InitDefault() {
}

func (p *BattleRecordInfo) GetBattleResult() (v enum.BattleResult) {
	return p.BattleResult
}

var BattleRecordInfo_FightingTeam_DEFAULT *TeamBattleStatistics

func (p *BattleRecordInfo) GetFightingTeam() (v *TeamBattleStatistics) {
	if !p.IsSetFightingTeam() {
		return BattleRecordInfo_FightingTeam_DEFAULT
	}
	return p.FightingTeam
}

var BattleRecordInfo_EnemyTeam_DEFAULT *TeamBattleStatistics

func (p *BattleRecordInfo) GetEnemyTeam() (v *TeamBattleStatistics) {
	if !p.IsSetEnemyTeam() {
		return BattleRecordInfo_EnemyTeam_DEFAULT
	}
	return p.EnemyTeam
}

var fieldIDToName_BattleRecordInfo = map[int16]string{
	1: "BattleResult",
	2: "FightingTeam",
	3: "EnemyTeam",
}

func (p *BattleRecordInfo) IsSetFightingTeam() bool {
	return p.FightingTeam != nil
}

func (p *BattleRecordInfo) IsSetEnemyTeam() bool {
	return p.EnemyTeam != nil
}

func (p *BattleRecordInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BattleRecordInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BattleRecordInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field enum.BattleResult
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.BattleResult(v)
	}
	p.BattleResult = _field
	return nil
}
func (p *BattleRecordInfo) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTeamBattleStatistics()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FightingTeam = _field
	return nil
}
func (p *BattleRecordInfo) ReadField3(iprot thrift.TProtocol) error {
	_field := NewTeamBattleStatistics()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EnemyTeam = _field
	return nil
}

func (p *BattleRecordInfo) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("BattleRecordInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BattleRecordInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BattleResult", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.BattleResult)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BattleRecordInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FightingTeam", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.FightingTeam.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BattleRecordInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EnemyTeam", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.EnemyTeam.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BattleRecordInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BattleRecordInfo(%+v)", *p)

}

// ============= 模拟对战列表 END ==============
// ============= 查询战法列表 BEGIN ==============
type TacticListRequest struct {
	// 战法ID
	Id int64 `thrift:"Id,1" form:"Id" json:"Id" query:"Id"`
	// 战法名称
	Name string `thrift:"Name,2" form:"Name" json:"Name" query:"Name"`
	// 战法品质
	Quality enum.TacticQuality `thrift:"Quality,3" form:"Quality" json:"Quality" query:"Quality"`
	// 战法来源
	Source enum.TacticsSource `thrift:"Source,4" form:"Source" json:"Source" query:"Source"`
	// 战法类型
	Type enum.TacticsType `thrift:"Type,5" form:"Type" json:"Type" query:"Type"`
	// 战法类型列表
	Sources  []enum.TacticsSource `thrift:"Sources,6" form:"Sources" json:"Sources" query:"Sources"`
	PageNo   int64                `thrift:"PageNo,100" form:"PageNo" json:"PageNo" query:"PageNo"`
	PageSize int64                `thrift:"PageSize,101" form:"PageSize" json:"PageSize" query:"PageSize"`
}

func NewTacticListRequest() *TacticListRequest {
	return &TacticListRequest{}
}

func (p *TacticListRequest) InitDefault() {
}

func (p *TacticListRequest) GetId() (v int64) {
	return p.Id
}

func (p *TacticListRequest) GetName() (v string) {
	return p.Name
}

func (p *TacticListRequest) GetQuality() (v enum.TacticQuality) {
	return p.Quality
}

func (p *TacticListRequest) GetSource() (v enum.TacticsSource) {
	return p.Source
}

func (p *TacticListRequest) GetType() (v enum.TacticsType) {
	return p.Type
}

func (p *TacticListRequest) GetSources() (v []enum.TacticsSource) {
	return p.Sources
}

func (p *TacticListRequest) GetPageNo() (v int64) {
	return p.PageNo
}

func (p *TacticListRequest) GetPageSize() (v int64) {
	return p.PageSize
}

var fieldIDToName_TacticListRequest = map[int16]string{
	1:   "Id",
	2:   "Name",
	3:   "Quality",
	4:   "Source",
	5:   "Type",
	6:   "Sources",
	100: "PageNo",
	101: "PageSize",
}

func (p *TacticListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TacticListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TacticListRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *TacticListRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *TacticListRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field enum.TacticQuality
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.TacticQuality(v)
	}
	p.Quality = _field
	return nil
}
func (p *TacticListRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field enum.TacticsSource
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.TacticsSource(v)
	}
	p.Source = _field
	return nil
}
func (p *TacticListRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field enum.TacticsType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.TacticsType(v)
	}
	p.Type = _field
	return nil
}
func (p *TacticListRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]enum.TacticsSource, 0, size)
	for i := 0; i < size; i++ {

		var _elem enum.TacticsSource
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = enum.TacticsSource(v)
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Sources = _field
	return nil
}
func (p *TacticListRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageNo = _field
	return nil
}
func (p *TacticListRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}

func (p *TacticListRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("TacticListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TacticListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TacticListRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TacticListRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Quality", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Quality)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TacticListRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Source", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Source)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TacticListRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TacticListRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Sources", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Sources)); err != nil {
		return err
	}
	for _, v := range p.Sources {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TacticListRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PageNo", thrift.I64, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *TacticListRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PageSize", thrift.I64, 101); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}

func (p *TacticListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TacticListRequest(%+v)", *p)

}

type TacticListResponse struct {
	Meta *common.Meta `thrift:"Meta,1" form:"Meta" json:"Meta" query:"Meta"`
	//战法信息列表
	TacticList []*Tactics `thrift:"TacticList,2" form:"TacticList" json:"TacticList" query:"TacticList"`
}

func NewTacticListResponse() *TacticListResponse {
	return &TacticListResponse{}
}

func (p *TacticListResponse) InitDefault() {
}

var TacticListResponse_Meta_DEFAULT *common.Meta

func (p *TacticListResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return TacticListResponse_Meta_DEFAULT
	}
	return p.Meta
}

func (p *TacticListResponse) GetTacticList() (v []*Tactics) {
	return p.TacticList
}

var fieldIDToName_TacticListResponse = map[int16]string{
	1: "Meta",
	2: "TacticList",
}

func (p *TacticListResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *TacticListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TacticListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TacticListResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *TacticListResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Tactics, 0, size)
	values := make([]Tactics, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TacticList = _field
	return nil
}

func (p *TacticListResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("TacticListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TacticListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TacticListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TacticList", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TacticList)); err != nil {
		return err
	}
	for _, v := range p.TacticList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TacticListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TacticListResponse(%+v)", *p)

}

// ============= 查询战法列表 END ==============
// ============= 查询武将列表 BEGIN ==============
type GeneralListRequest struct {
	// 武将ID
	Id *int64 `thrift:"Id,1,optional" form:"Id" json:"Id,omitempty" query:"Id"`
	// 姓名
	Name *string `thrift:"Name,2,optional" form:"Name" json:"Name,omitempty" query:"Name"`
	// 性别
	Gender *enum.Gender `thrift:"Gender,3,optional" form:"Gender" json:"Gender,omitempty" query:"Gender"`
	// 统御
	Control *enum.ControlLevel `thrift:"Control,4,optional" form:"Control" json:"Control,omitempty" query:"Control"`
	// 阵营
	Group *enum.Group `thrift:"Group,5,optional" form:"Group" json:"Group,omitempty" query:"Group"`
	// 品质
	Quality *enum.GeneralQuality `thrift:"Quality,6,optional" form:"Quality" json:"Quality,omitempty" query:"Quality"`
	// 标签
	Tags []enum.GeneralTag `thrift:"Tags,7,optional" form:"Tags" json:"Tags,omitempty" query:"Tags"`
	// 是否支持动态
	IsSupportDynamics *enum.Enable `thrift:"IsSupportDynamics,8,optional" form:"IsSupportDynamics" json:"IsSupportDynamics,omitempty" query:"IsSupportDynamics"`
	// 是否支持典藏
	IsSupportCollect *enum.Enable `thrift:"IsSupportCollect,9,optional" form:"IsSupportCollect" json:"IsSupportCollect,omitempty" query:"IsSupportCollect"`
	//武将ID列表
	Ids      []int64 `thrift:"Ids,10" form:"Ids" json:"Ids" query:"Ids"`
	PageNo   int64   `thrift:"PageNo,100" form:"PageNo" json:"PageNo" query:"PageNo"`
	PageSize int64   `thrift:"PageSize,101" form:"PageSize" json:"PageSize" query:"PageSize"`
}

func NewGeneralListRequest() *GeneralListRequest {
	return &GeneralListRequest{}
}

func (p *GeneralListRequest) InitDefault() {
}

var GeneralListRequest_Id_DEFAULT int64

func (p *GeneralListRequest) GetId() (v int64) {
	if !p.IsSetId() {
		return GeneralListRequest_Id_DEFAULT
	}
	return *p.Id
}

var GeneralListRequest_Name_DEFAULT string

func (p *GeneralListRequest) GetName() (v string) {
	if !p.IsSetName() {
		return GeneralListRequest_Name_DEFAULT
	}
	return *p.Name
}

var GeneralListRequest_Gender_DEFAULT enum.Gender

func (p *GeneralListRequest) GetGender() (v enum.Gender) {
	if !p.IsSetGender() {
		return GeneralListRequest_Gender_DEFAULT
	}
	return *p.Gender
}

var GeneralListRequest_Control_DEFAULT enum.ControlLevel

func (p *GeneralListRequest) GetControl() (v enum.ControlLevel) {
	if !p.IsSetControl() {
		return GeneralListRequest_Control_DEFAULT
	}
	return *p.Control
}

var GeneralListRequest_Group_DEFAULT enum.Group

func (p *GeneralListRequest) GetGroup() (v enum.Group) {
	if !p.IsSetGroup() {
		return GeneralListRequest_Group_DEFAULT
	}
	return *p.Group
}

var GeneralListRequest_Quality_DEFAULT enum.GeneralQuality

func (p *GeneralListRequest) GetQuality() (v enum.GeneralQuality) {
	if !p.IsSetQuality() {
		return GeneralListRequest_Quality_DEFAULT
	}
	return *p.Quality
}

var GeneralListRequest_Tags_DEFAULT []enum.GeneralTag

func (p *GeneralListRequest) GetTags() (v []enum.GeneralTag) {
	if !p.IsSetTags() {
		return GeneralListRequest_Tags_DEFAULT
	}
	return p.Tags
}

var GeneralListRequest_IsSupportDynamics_DEFAULT enum.Enable

func (p *GeneralListRequest) GetIsSupportDynamics() (v enum.Enable) {
	if !p.IsSetIsSupportDynamics() {
		return GeneralListRequest_IsSupportDynamics_DEFAULT
	}
	return *p.IsSupportDynamics
}

var GeneralListRequest_IsSupportCollect_DEFAULT enum.Enable

func (p *GeneralListRequest) GetIsSupportCollect() (v enum.Enable) {
	if !p.IsSetIsSupportCollect() {
		return GeneralListRequest_IsSupportCollect_DEFAULT
	}
	return *p.IsSupportCollect
}

func (p *GeneralListRequest) GetIds() (v []int64) {
	return p.Ids
}

func (p *GeneralListRequest) GetPageNo() (v int64) {
	return p.PageNo
}

func (p *GeneralListRequest) GetPageSize() (v int64) {
	return p.PageSize
}

var fieldIDToName_GeneralListRequest = map[int16]string{
	1:   "Id",
	2:   "Name",
	3:   "Gender",
	4:   "Control",
	5:   "Group",
	6:   "Quality",
	7:   "Tags",
	8:   "IsSupportDynamics",
	9:   "IsSupportCollect",
	10:  "Ids",
	100: "PageNo",
	101: "PageSize",
}

func (p *GeneralListRequest) IsSetId() bool {
	return p.Id != nil
}

func (p *GeneralListRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *GeneralListRequest) IsSetGender() bool {
	return p.Gender != nil
}

func (p *GeneralListRequest) IsSetControl() bool {
	return p.Control != nil
}

func (p *GeneralListRequest) IsSetGroup() bool {
	return p.Group != nil
}

func (p *GeneralListRequest) IsSetQuality() bool {
	return p.Quality != nil
}

func (p *GeneralListRequest) IsSetTags() bool {
	return p.Tags != nil
}

func (p *GeneralListRequest) IsSetIsSupportDynamics() bool {
	return p.IsSupportDynamics != nil
}

func (p *GeneralListRequest) IsSetIsSupportCollect() bool {
	return p.IsSupportCollect != nil
}

func (p *GeneralListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralListRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Id = _field
	return nil
}
func (p *GeneralListRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *GeneralListRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *enum.Gender
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := enum.Gender(v)
		_field = &tmp
	}
	p.Gender = _field
	return nil
}
func (p *GeneralListRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *enum.ControlLevel
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := enum.ControlLevel(v)
		_field = &tmp
	}
	p.Control = _field
	return nil
}
func (p *GeneralListRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *enum.Group
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := enum.Group(v)
		_field = &tmp
	}
	p.Group = _field
	return nil
}
func (p *GeneralListRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *enum.GeneralQuality
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := enum.GeneralQuality(v)
		_field = &tmp
	}
	p.Quality = _field
	return nil
}
func (p *GeneralListRequest) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]enum.GeneralTag, 0, size)
	for i := 0; i < size; i++ {

		var _elem enum.GeneralTag
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = enum.GeneralTag(v)
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tags = _field
	return nil
}
func (p *GeneralListRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *enum.Enable
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := enum.Enable(v)
		_field = &tmp
	}
	p.IsSupportDynamics = _field
	return nil
}
func (p *GeneralListRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field *enum.Enable
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := enum.Enable(v)
		_field = &tmp
	}
	p.IsSupportCollect = _field
	return nil
}
func (p *GeneralListRequest) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Ids = _field
	return nil
}
func (p *GeneralListRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageNo = _field
	return nil
}
func (p *GeneralListRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}

func (p *GeneralListRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralListRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralListRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetGender() {
		if err = oprot.WriteFieldBegin("Gender", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Gender)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GeneralListRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetControl() {
		if err = oprot.WriteFieldBegin("Control", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Control)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GeneralListRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroup() {
		if err = oprot.WriteFieldBegin("Group", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Group)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GeneralListRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetQuality() {
		if err = oprot.WriteFieldBegin("Quality", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Quality)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GeneralListRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTags() {
		if err = oprot.WriteFieldBegin("Tags", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.Tags)); err != nil {
			return err
		}
		for _, v := range p.Tags {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GeneralListRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsSupportDynamics() {
		if err = oprot.WriteFieldBegin("IsSupportDynamics", thrift.I32, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.IsSupportDynamics)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GeneralListRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsSupportCollect() {
		if err = oprot.WriteFieldBegin("IsSupportCollect", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.IsSupportCollect)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GeneralListRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Ids", thrift.LIST, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Ids)); err != nil {
		return err
	}
	for _, v := range p.Ids {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *GeneralListRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PageNo", thrift.I64, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *GeneralListRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PageSize", thrift.I64, 101); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}

func (p *GeneralListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralListRequest(%+v)", *p)

}

type GeneralListResponse struct {
	Meta *common.Meta `thrift:"Meta,1" form:"Meta" json:"Meta" query:"Meta"`
	//武将信息列表
	GeneralList []*BattleGeneral `thrift:"GeneralList,2" form:"GeneralList" json:"GeneralList" query:"GeneralList"`
}

func NewGeneralListResponse() *GeneralListResponse {
	return &GeneralListResponse{}
}

func (p *GeneralListResponse) InitDefault() {
}

var GeneralListResponse_Meta_DEFAULT *common.Meta

func (p *GeneralListResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return GeneralListResponse_Meta_DEFAULT
	}
	return p.Meta
}

func (p *GeneralListResponse) GetGeneralList() (v []*BattleGeneral) {
	return p.GeneralList
}

var fieldIDToName_GeneralListResponse = map[int16]string{
	1: "Meta",
	2: "GeneralList",
}

func (p *GeneralListResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *GeneralListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralListResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *GeneralListResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*BattleGeneral, 0, size)
	values := make([]BattleGeneral, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.GeneralList = _field
	return nil
}

func (p *GeneralListResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralList", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.GeneralList)); err != nil {
		return err
	}
	for _, v := range p.GeneralList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralListResponse(%+v)", *p)

}

// ============= 查询武将列表 END ==============
// ============= 查询兵书列表 BEGIN ==============
type GeneralWarBookListRequest struct {
	//武将ID
	GeneralId int64 `thrift:"GeneralId,1" form:"GeneralId" json:"GeneralId" query:"GeneralId"`
	//兵书类型
	WarbookType enum.WarbookType `thrift:"WarbookType,2" form:"WarbookType" json:"WarbookType" query:"WarbookType"`
	//兵书等级
	Level int64 `thrift:"Level,3" form:"Level" json:"Level" query:"Level"`
	// 兵书名称
	Name string `thrift:"Name,4" form:"Name" json:"Name" query:"Name"`
}

func NewGeneralWarBookListRequest() *GeneralWarBookListRequest {
	return &GeneralWarBookListRequest{}
}

func (p *GeneralWarBookListRequest) InitDefault() {
}

func (p *GeneralWarBookListRequest) GetGeneralId() (v int64) {
	return p.GeneralId
}

func (p *GeneralWarBookListRequest) GetWarbookType() (v enum.WarbookType) {
	return p.WarbookType
}

func (p *GeneralWarBookListRequest) GetLevel() (v int64) {
	return p.Level
}

func (p *GeneralWarBookListRequest) GetName() (v string) {
	return p.Name
}

var fieldIDToName_GeneralWarBookListRequest = map[int16]string{
	1: "GeneralId",
	2: "WarbookType",
	3: "Level",
	4: "Name",
}

func (p *GeneralWarBookListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralWarBookListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralWarBookListRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GeneralId = _field
	return nil
}
func (p *GeneralWarBookListRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field enum.WarbookType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.WarbookType(v)
	}
	p.WarbookType = _field
	return nil
}
func (p *GeneralWarBookListRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Level = _field
	return nil
}
func (p *GeneralWarBookListRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}

func (p *GeneralWarBookListRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralWarBookListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralWarBookListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GeneralId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralWarBookListRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("WarbookType", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.WarbookType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralWarBookListRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Level", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Level); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GeneralWarBookListRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GeneralWarBookListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralWarBookListRequest(%+v)", *p)

}

type GeneralWarBookListResponse struct {
	Meta *common.Meta `thrift:"Meta,1" form:"Meta" json:"Meta" query:"Meta"`
	//兵书信息列表<map<兵书类型,map<层级,兵书list>>>
	WarBookMapList map[int64]map[int64][]*WarBook `thrift:"WarBookMapList,2" form:"WarBookMapList" json:"WarBookMapList" query:"WarBookMapList"`
}

func NewGeneralWarBookListResponse() *GeneralWarBookListResponse {
	return &GeneralWarBookListResponse{}
}

func (p *GeneralWarBookListResponse) InitDefault() {
}

var GeneralWarBookListResponse_Meta_DEFAULT *common.Meta

func (p *GeneralWarBookListResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return GeneralWarBookListResponse_Meta_DEFAULT
	}
	return p.Meta
}

func (p *GeneralWarBookListResponse) GetWarBookMapList() (v map[int64]map[int64][]*WarBook) {
	return p.WarBookMapList
}

var fieldIDToName_GeneralWarBookListResponse = map[int16]string{
	1: "Meta",
	2: "WarBookMapList",
}

func (p *GeneralWarBookListResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *GeneralWarBookListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralWarBookListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralWarBookListResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *GeneralWarBookListResponse) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64]map[int64][]*WarBook, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[int64][]*WarBook, size)
		for i := 0; i < size; i++ {
			var _key1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_key1 = v
			}
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return err
			}
			_val1 := make([]*WarBook, 0, size)
			values := make([]WarBook, size)
			for i := 0; i < size; i++ {
				_elem := &values[i]
				_elem.InitDefault()

				if err := _elem.Read(iprot); err != nil {
					return err
				}

				_val1 = append(_val1, _elem)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return err
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.WarBookMapList = _field
	return nil
}

func (p *GeneralWarBookListResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralWarBookListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralWarBookListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralWarBookListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("WarBookMapList", thrift.MAP, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I64, thrift.MAP, len(p.WarBookMapList)); err != nil {
		return err
	}
	for k, v := range p.WarBookMapList {
		if err := oprot.WriteI64(k); err != nil {
			return err
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.LIST, len(v)); err != nil {
			return err
		}
		for k, v := range v {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralWarBookListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralWarBookListResponse(%+v)", *p)

}

type WarBook struct {
	Id    int64  `thrift:"Id,1" form:"Id" json:"Id" query:"Id"`
	Name  string `thrift:"Name,2" form:"Name" json:"Name" query:"Name"`
	Type  int64  `thrift:"Type,3" form:"Type" json:"Type" query:"Type"`
	Level int64  `thrift:"Level,4" form:"Level" json:"Level" query:"Level"`
	Desc  string `thrift:"Desc,5" form:"Desc" json:"Desc" query:"Desc"`
}

func NewWarBook() *WarBook {
	return &WarBook{}
}

func (p *WarBook) InitDefault() {
}

func (p *WarBook) GetId() (v int64) {
	return p.Id
}

func (p *WarBook) GetName() (v string) {
	return p.Name
}

func (p *WarBook) GetType() (v int64) {
	return p.Type
}

func (p *WarBook) GetLevel() (v int64) {
	return p.Level
}

func (p *WarBook) GetDesc() (v string) {
	return p.Desc
}

var fieldIDToName_WarBook = map[int16]string{
	1: "Id",
	2: "Name",
	3: "Type",
	4: "Level",
	5: "Desc",
}

func (p *WarBook) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WarBook[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *WarBook) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *WarBook) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *WarBook) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *WarBook) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Level = _field
	return nil
}
func (p *WarBook) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Desc = _field
	return nil
}

func (p *WarBook) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("WarBook"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WarBook) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *WarBook) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *WarBook) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *WarBook) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Level", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Level); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *WarBook) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Desc", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Desc); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *WarBook) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WarBook(%+v)", *p)

}

// ============= 查询兵书列表 END ==============
// ============= 查询特技列表 BEGIN ==============
type SpecialTechListRequest struct {
	Name     string          `thrift:"Name,1" form:"Name" json:"Name" query:"Name"`
	Id       int64           `thrift:"Id,2" form:"Id" json:"Id" query:"Id"`
	Type     enum.EquipType  `thrift:"Type,3" form:"Type" json:"Type" query:"Type"`
	Level    enum.EquipLevel `thrift:"Level,4" form:"Level" json:"Level" query:"Level"`
	PageNo   int64           `thrift:"PageNo,100" form:"PageNo" json:"PageNo" query:"PageNo"`
	PageSize int64           `thrift:"PageSize,101" form:"PageSize" json:"PageSize" query:"PageSize"`
}

func NewSpecialTechListRequest() *SpecialTechListRequest {
	return &SpecialTechListRequest{}
}

func (p *SpecialTechListRequest) InitDefault() {
}

func (p *SpecialTechListRequest) GetName() (v string) {
	return p.Name
}

func (p *SpecialTechListRequest) GetId() (v int64) {
	return p.Id
}

func (p *SpecialTechListRequest) GetType() (v enum.EquipType) {
	return p.Type
}

func (p *SpecialTechListRequest) GetLevel() (v enum.EquipLevel) {
	return p.Level
}

func (p *SpecialTechListRequest) GetPageNo() (v int64) {
	return p.PageNo
}

func (p *SpecialTechListRequest) GetPageSize() (v int64) {
	return p.PageSize
}

var fieldIDToName_SpecialTechListRequest = map[int16]string{
	1:   "Name",
	2:   "Id",
	3:   "Type",
	4:   "Level",
	100: "PageNo",
	101: "PageSize",
}

func (p *SpecialTechListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpecialTechListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpecialTechListRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *SpecialTechListRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *SpecialTechListRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field enum.EquipType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.EquipType(v)
	}
	p.Type = _field
	return nil
}
func (p *SpecialTechListRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field enum.EquipLevel
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.EquipLevel(v)
	}
	p.Level = _field
	return nil
}
func (p *SpecialTechListRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageNo = _field
	return nil
}
func (p *SpecialTechListRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}

func (p *SpecialTechListRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("SpecialTechListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpecialTechListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SpecialTechListRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SpecialTechListRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SpecialTechListRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Level", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Level)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *SpecialTechListRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PageNo", thrift.I64, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *SpecialTechListRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PageSize", thrift.I64, 101); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}

func (p *SpecialTechListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpecialTechListRequest(%+v)", *p)

}

type SpecialTechListResponse struct {
	Meta *common.Meta `thrift:"meta,1" form:"meta" json:"meta" query:"meta"`
	//特技信息列表
	SpecialTechList []*SpecialTech `thrift:"SpecialTechList,2" form:"SpecialTechList" json:"SpecialTechList" query:"SpecialTechList"`
}

func NewSpecialTechListResponse() *SpecialTechListResponse {
	return &SpecialTechListResponse{}
}

func (p *SpecialTechListResponse) InitDefault() {
}

var SpecialTechListResponse_Meta_DEFAULT *common.Meta

func (p *SpecialTechListResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return SpecialTechListResponse_Meta_DEFAULT
	}
	return p.Meta
}

func (p *SpecialTechListResponse) GetSpecialTechList() (v []*SpecialTech) {
	return p.SpecialTechList
}

var fieldIDToName_SpecialTechListResponse = map[int16]string{
	1: "meta",
	2: "SpecialTechList",
}

func (p *SpecialTechListResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *SpecialTechListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpecialTechListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpecialTechListResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *SpecialTechListResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*SpecialTech, 0, size)
	values := make([]SpecialTech, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SpecialTechList = _field
	return nil
}

func (p *SpecialTechListResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("SpecialTechListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpecialTechListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SpecialTechListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SpecialTechList", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SpecialTechList)); err != nil {
		return err
	}
	for _, v := range p.SpecialTechList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SpecialTechListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpecialTechListResponse(%+v)", *p)

}

type SpecialTech struct {
	Id    int64           `thrift:"Id,1" form:"Id" json:"Id" query:"Id"`
	Name  string          `thrift:"Name,2" form:"Name" json:"Name" query:"Name"`
	Type  enum.EquipType  `thrift:"Type,3" form:"Type" json:"Type" query:"Type"`
	Level enum.EquipLevel `thrift:"Level,4" form:"Level" json:"Level" query:"Level"`
}

func NewSpecialTech() *SpecialTech {
	return &SpecialTech{}
}

func (p *SpecialTech) InitDefault() {
}

func (p *SpecialTech) GetId() (v int64) {
	return p.Id
}

func (p *SpecialTech) GetName() (v string) {
	return p.Name
}

func (p *SpecialTech) GetType() (v enum.EquipType) {
	return p.Type
}

func (p *SpecialTech) GetLevel() (v enum.EquipLevel) {
	return p.Level
}

var fieldIDToName_SpecialTech = map[int16]string{
	1: "Id",
	2: "Name",
	3: "Type",
	4: "Level",
}

func (p *SpecialTech) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SpecialTech[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SpecialTech) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *SpecialTech) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *SpecialTech) ReadField3(iprot thrift.TProtocol) error {

	var _field enum.EquipType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.EquipType(v)
	}
	p.Type = _field
	return nil
}
func (p *SpecialTech) ReadField4(iprot thrift.TProtocol) error {

	var _field enum.EquipLevel
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.EquipLevel(v)
	}
	p.Level = _field
	return nil
}

func (p *SpecialTech) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("SpecialTech"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SpecialTech) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SpecialTech) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SpecialTech) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SpecialTech) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Level", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Level)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *SpecialTech) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpecialTech(%+v)", *p)

}

// ============= 查询特技列表 END ==============
// ============= 查询推荐阵容列表 BEGIN ==============
type RecTeamListRequest struct {
	Name     string       `thrift:"Name,1" form:"Name" json:"Name" query:"Name"`
	Group    enum.Group   `thrift:"Group,2" form:"Group" json:"Group" query:"Group"`
	ArmType  enum.ArmType `thrift:"ArmType,3" form:"ArmType" json:"ArmType" query:"ArmType"`
	PageNo   int64        `thrift:"PageNo,100" form:"PageNo" json:"PageNo" query:"PageNo"`
	PageSize int64        `thrift:"PageSize,101" form:"PageSize" json:"PageSize" query:"PageSize"`
}

func NewRecTeamListRequest() *RecTeamListRequest {
	return &RecTeamListRequest{}
}

func (p *RecTeamListRequest) InitDefault() {
}

func (p *RecTeamListRequest) GetName() (v string) {
	return p.Name
}

func (p *RecTeamListRequest) GetGroup() (v enum.Group) {
	return p.Group
}

func (p *RecTeamListRequest) GetArmType() (v enum.ArmType) {
	return p.ArmType
}

func (p *RecTeamListRequest) GetPageNo() (v int64) {
	return p.PageNo
}

func (p *RecTeamListRequest) GetPageSize() (v int64) {
	return p.PageSize
}

var fieldIDToName_RecTeamListRequest = map[int16]string{
	1:   "Name",
	2:   "Group",
	3:   "ArmType",
	100: "PageNo",
	101: "PageSize",
}

func (p *RecTeamListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RecTeamListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RecTeamListRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *RecTeamListRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field enum.Group
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.Group(v)
	}
	p.Group = _field
	return nil
}
func (p *RecTeamListRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field enum.ArmType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = enum.ArmType(v)
	}
	p.ArmType = _field
	return nil
}
func (p *RecTeamListRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageNo = _field
	return nil
}
func (p *RecTeamListRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}

func (p *RecTeamListRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RecTeamListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RecTeamListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RecTeamListRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Group", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Group)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RecTeamListRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ArmType", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ArmType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *RecTeamListRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PageNo", thrift.I64, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *RecTeamListRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PageSize", thrift.I64, 101); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}

func (p *RecTeamListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecTeamListRequest(%+v)", *p)

}

type RecTeamListResponse struct {
	Meta *common.Meta `thrift:"meta,1" form:"meta" json:"meta" query:"meta"`
	//武将信息列表
	RecTeamGeneralList []*RecTeamGeneral `thrift:"RecTeamGeneralList,2" form:"RecTeamGeneralList" json:"RecTeamGeneralList" query:"RecTeamGeneralList"`
}

func NewRecTeamListResponse() *RecTeamListResponse {
	return &RecTeamListResponse{}
}

func (p *RecTeamListResponse) InitDefault() {
}

var RecTeamListResponse_Meta_DEFAULT *common.Meta

func (p *RecTeamListResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return RecTeamListResponse_Meta_DEFAULT
	}
	return p.Meta
}

func (p *RecTeamListResponse) GetRecTeamGeneralList() (v []*RecTeamGeneral) {
	return p.RecTeamGeneralList
}

var fieldIDToName_RecTeamListResponse = map[int16]string{
	1: "meta",
	2: "RecTeamGeneralList",
}

func (p *RecTeamListResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *RecTeamListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RecTeamListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RecTeamListResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *RecTeamListResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*RecTeamGeneral, 0, size)
	values := make([]RecTeamGeneral, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.RecTeamGeneralList = _field
	return nil
}

func (p *RecTeamListResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RecTeamListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RecTeamListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RecTeamListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RecTeamGeneralList", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RecTeamGeneralList)); err != nil {
		return err
	}
	for _, v := range p.RecTeamGeneralList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RecTeamListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecTeamListResponse(%+v)", *p)

}

type RecTeamGeneral struct {
	GeneralList []*BattleGeneral `thrift:"GeneralList,1" form:"GeneralList" json:"GeneralList" query:"GeneralList"`
	Name        string           `thrift:"Name,2" form:"Name" json:"Name" query:"Name"`
	Id          int64            `thrift:"Id,3" form:"Id" json:"Id" query:"Id"`
	Group       int64            `thrift:"Group,4" form:"Group" json:"Group" query:"Group"`
	ArmType     int64            `thrift:"ArmType,5" form:"ArmType" json:"ArmType" query:"ArmType"`
}

func NewRecTeamGeneral() *RecTeamGeneral {
	return &RecTeamGeneral{}
}

func (p *RecTeamGeneral) InitDefault() {
}

func (p *RecTeamGeneral) GetGeneralList() (v []*BattleGeneral) {
	return p.GeneralList
}

func (p *RecTeamGeneral) GetName() (v string) {
	return p.Name
}

func (p *RecTeamGeneral) GetId() (v int64) {
	return p.Id
}

func (p *RecTeamGeneral) GetGroup() (v int64) {
	return p.Group
}

func (p *RecTeamGeneral) GetArmType() (v int64) {
	return p.ArmType
}

var fieldIDToName_RecTeamGeneral = map[int16]string{
	1: "GeneralList",
	2: "Name",
	3: "Id",
	4: "Group",
	5: "ArmType",
}

func (p *RecTeamGeneral) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RecTeamGeneral[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RecTeamGeneral) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*BattleGeneral, 0, size)
	values := make([]BattleGeneral, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.GeneralList = _field
	return nil
}
func (p *RecTeamGeneral) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *RecTeamGeneral) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *RecTeamGeneral) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Group = _field
	return nil
}
func (p *RecTeamGeneral) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ArmType = _field
	return nil
}

func (p *RecTeamGeneral) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RecTeamGeneral"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RecTeamGeneral) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.GeneralList)); err != nil {
		return err
	}
	for _, v := range p.GeneralList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RecTeamGeneral) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RecTeamGeneral) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *RecTeamGeneral) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Group", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Group); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *RecTeamGeneral) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ArmType", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ArmType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *RecTeamGeneral) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecTeamGeneral(%+v)", *p)

}

// ============= 查询推荐阵容列表 END ==============
// ============= 查询推荐战法列表 BEGIN ==============
type RecTacticListRequest struct {
	GeneralId int64 `thrift:"GeneralId,1" form:"GeneralId" json:"GeneralId" query:"GeneralId"`
	PageNo    int64 `thrift:"PageNo,100" form:"PageNo" json:"PageNo" query:"PageNo"`
	PageSize  int64 `thrift:"PageSize,101" form:"PageSize" json:"PageSize" query:"PageSize"`
}

func NewRecTacticListRequest() *RecTacticListRequest {
	return &RecTacticListRequest{}
}

func (p *RecTacticListRequest) InitDefault() {
}

func (p *RecTacticListRequest) GetGeneralId() (v int64) {
	return p.GeneralId
}

func (p *RecTacticListRequest) GetPageNo() (v int64) {
	return p.PageNo
}

func (p *RecTacticListRequest) GetPageSize() (v int64) {
	return p.PageSize
}

var fieldIDToName_RecTacticListRequest = map[int16]string{
	1:   "GeneralId",
	100: "PageNo",
	101: "PageSize",
}

func (p *RecTacticListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RecTacticListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RecTacticListRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GeneralId = _field
	return nil
}
func (p *RecTacticListRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageNo = _field
	return nil
}
func (p *RecTacticListRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}

func (p *RecTacticListRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RecTacticListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RecTacticListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GeneralId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RecTacticListRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PageNo", thrift.I64, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *RecTacticListRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PageSize", thrift.I64, 101); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}

func (p *RecTacticListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecTacticListRequest(%+v)", *p)

}

type RecTacticListResponse struct {
	Meta *common.Meta `thrift:"meta,1" form:"meta" json:"meta" query:"meta"`
	//战法信息列表
	RecTacticList []*Tactics `thrift:"RecTacticList,2" form:"RecTacticList" json:"RecTacticList" query:"RecTacticList"`
}

func NewRecTacticListResponse() *RecTacticListResponse {
	return &RecTacticListResponse{}
}

func (p *RecTacticListResponse) InitDefault() {
}

var RecTacticListResponse_Meta_DEFAULT *common.Meta

func (p *RecTacticListResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return RecTacticListResponse_Meta_DEFAULT
	}
	return p.Meta
}

func (p *RecTacticListResponse) GetRecTacticList() (v []*Tactics) {
	return p.RecTacticList
}

var fieldIDToName_RecTacticListResponse = map[int16]string{
	1: "meta",
	2: "RecTacticList",
}

func (p *RecTacticListResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *RecTacticListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RecTacticListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RecTacticListResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *RecTacticListResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Tactics, 0, size)
	values := make([]Tactics, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.RecTacticList = _field
	return nil
}

func (p *RecTacticListResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RecTacticListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RecTacticListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RecTacticListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RecTacticList", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RecTacticList)); err != nil {
		return err
	}
	for _, v := range p.RecTacticList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RecTacticListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecTacticListResponse(%+v)", *p)

}

// ============= 查询推荐战法列表 END ==============
// ============= 查询推荐兵书列表 BEGIN ==============
type RecWarBookListRequest struct {
	GeneralId int64 `thrift:"GeneralId,1" form:"GeneralId" json:"GeneralId" query:"GeneralId"`
}

func NewRecWarBookListRequest() *RecWarBookListRequest {
	return &RecWarBookListRequest{}
}

func (p *RecWarBookListRequest) InitDefault() {
}

func (p *RecWarBookListRequest) GetGeneralId() (v int64) {
	return p.GeneralId
}

var fieldIDToName_RecWarBookListRequest = map[int16]string{
	1: "GeneralId",
}

func (p *RecWarBookListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RecWarBookListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RecWarBookListRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GeneralId = _field
	return nil
}

func (p *RecWarBookListRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RecWarBookListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RecWarBookListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GeneralId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RecWarBookListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecWarBookListRequest(%+v)", *p)

}

type RecWarBookListResponse struct {
	Meta *common.Meta `thrift:"meta,1" form:"meta" json:"meta" query:"meta"`
	//兵书信息列表<map<兵书类型,map<层级,兵书list>>>
	WarBookMapList map[int64]map[int64][]*WarBook `thrift:"WarBookMapList,2" form:"WarBookMapList" json:"WarBookMapList" query:"WarBookMapList"`
}

func NewRecWarBookListResponse() *RecWarBookListResponse {
	return &RecWarBookListResponse{}
}

func (p *RecWarBookListResponse) InitDefault() {
}

var RecWarBookListResponse_Meta_DEFAULT *common.Meta

func (p *RecWarBookListResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return RecWarBookListResponse_Meta_DEFAULT
	}
	return p.Meta
}

func (p *RecWarBookListResponse) GetWarBookMapList() (v map[int64]map[int64][]*WarBook) {
	return p.WarBookMapList
}

var fieldIDToName_RecWarBookListResponse = map[int16]string{
	1: "meta",
	2: "WarBookMapList",
}

func (p *RecWarBookListResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *RecWarBookListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RecWarBookListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RecWarBookListResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *RecWarBookListResponse) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64]map[int64][]*WarBook, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[int64][]*WarBook, size)
		for i := 0; i < size; i++ {
			var _key1 int64
			if v, err := iprot.ReadI64(); err != nil {
				return err
			} else {
				_key1 = v
			}
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return err
			}
			_val1 := make([]*WarBook, 0, size)
			values := make([]WarBook, size)
			for i := 0; i < size; i++ {
				_elem := &values[i]
				_elem.InitDefault()

				if err := _elem.Read(iprot); err != nil {
					return err
				}

				_val1 = append(_val1, _elem)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return err
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.WarBookMapList = _field
	return nil
}

func (p *RecWarBookListResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RecWarBookListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RecWarBookListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RecWarBookListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("WarBookMapList", thrift.MAP, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I64, thrift.MAP, len(p.WarBookMapList)); err != nil {
		return err
	}
	for k, v := range p.WarBookMapList {
		if err := oprot.WriteI64(k); err != nil {
			return err
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.LIST, len(v)); err != nil {
			return err
		}
		for k, v := range v {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RecWarBookListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecWarBookListResponse(%+v)", *p)

}

// ============= 查询推荐兵书列表 END ==============
// ============= 查询推荐特技列表 BEGIN ==============
type RecSpecialTechListRequest struct {
	GeneralId int64 `thrift:"GeneralId,1" form:"GeneralId" json:"GeneralId" query:"GeneralId"`
}

func NewRecSpecialTechListRequest() *RecSpecialTechListRequest {
	return &RecSpecialTechListRequest{}
}

func (p *RecSpecialTechListRequest) InitDefault() {
}

func (p *RecSpecialTechListRequest) GetGeneralId() (v int64) {
	return p.GeneralId
}

var fieldIDToName_RecSpecialTechListRequest = map[int16]string{
	1: "GeneralId",
}

func (p *RecSpecialTechListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RecSpecialTechListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RecSpecialTechListRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GeneralId = _field
	return nil
}

func (p *RecSpecialTechListRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RecSpecialTechListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RecSpecialTechListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GeneralId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RecSpecialTechListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecSpecialTechListRequest(%+v)", *p)

}

type RecSpecialTechListResponse struct {
	Meta *common.Meta `thrift:"meta,1" form:"meta" json:"meta" query:"meta"`
	//特技信息列表
	SpecialTechList []*SpecialTech `thrift:"SpecialTechList,2" form:"SpecialTechList" json:"SpecialTechList" query:"SpecialTechList"`
}

func NewRecSpecialTechListResponse() *RecSpecialTechListResponse {
	return &RecSpecialTechListResponse{}
}

func (p *RecSpecialTechListResponse) InitDefault() {
}

var RecSpecialTechListResponse_Meta_DEFAULT *common.Meta

func (p *RecSpecialTechListResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return RecSpecialTechListResponse_Meta_DEFAULT
	}
	return p.Meta
}

func (p *RecSpecialTechListResponse) GetSpecialTechList() (v []*SpecialTech) {
	return p.SpecialTechList
}

var fieldIDToName_RecSpecialTechListResponse = map[int16]string{
	1: "meta",
	2: "SpecialTechList",
}

func (p *RecSpecialTechListResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *RecSpecialTechListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RecSpecialTechListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RecSpecialTechListResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *RecSpecialTechListResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*SpecialTech, 0, size)
	values := make([]SpecialTech, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SpecialTechList = _field
	return nil
}

func (p *RecSpecialTechListResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RecSpecialTechListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RecSpecialTechListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RecSpecialTechListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SpecialTechList", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SpecialTechList)); err != nil {
		return err
	}
	for _, v := range p.SpecialTechList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RecSpecialTechListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecSpecialTechListResponse(%+v)", *p)

}

// ============= 查询推荐特技列表 END ==============
// ============= 用户登录 BEGIN ==============
type UserLoginRequest struct {
	Code      string `thrift:"Code,1" form:"Code" json:"Code" query:"Code"`
	NickName  string `thrift:"NickName,2" form:"NickName" json:"NickName" query:"NickName"`
	AvatarUrl string `thrift:"AvatarUrl,3" form:"AvatarUrl" json:"AvatarUrl" query:"AvatarUrl"`
}

func NewUserLoginRequest() *UserLoginRequest {
	return &UserLoginRequest{}
}

func (p *UserLoginRequest) InitDefault() {
}

func (p *UserLoginRequest) GetCode() (v string) {
	return p.Code
}

func (p *UserLoginRequest) GetNickName() (v string) {
	return p.NickName
}

func (p *UserLoginRequest) GetAvatarUrl() (v string) {
	return p.AvatarUrl
}

var fieldIDToName_UserLoginRequest = map[int16]string{
	1: "Code",
	2: "NickName",
	3: "AvatarUrl",
}

func (p *UserLoginRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserLoginRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserLoginRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Code = _field
	return nil
}
func (p *UserLoginRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NickName = _field
	return nil
}
func (p *UserLoginRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AvatarUrl = _field
	return nil
}

func (p *UserLoginRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UserLoginRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserLoginRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Code", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserLoginRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NickName", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NickName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UserLoginRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AvatarUrl", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AvatarUrl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UserLoginRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserLoginRequest(%+v)", *p)

}

type UserLoginResponse struct {
	Meta *common.Meta `thrift:"meta,1" form:"meta" json:"meta" query:"meta"`
	//用户信息
	UserInfo *UserInfo `thrift:"UserInfo,2" form:"UserInfo" json:"UserInfo" query:"UserInfo"`
}

func NewUserLoginResponse() *UserLoginResponse {
	return &UserLoginResponse{}
}

func (p *UserLoginResponse) InitDefault() {
}

var UserLoginResponse_Meta_DEFAULT *common.Meta

func (p *UserLoginResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return UserLoginResponse_Meta_DEFAULT
	}
	return p.Meta
}

var UserLoginResponse_UserInfo_DEFAULT *UserInfo

func (p *UserLoginResponse) GetUserInfo() (v *UserInfo) {
	if !p.IsSetUserInfo() {
		return UserLoginResponse_UserInfo_DEFAULT
	}
	return p.UserInfo
}

var fieldIDToName_UserLoginResponse = map[int16]string{
	1: "meta",
	2: "UserInfo",
}

func (p *UserLoginResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *UserLoginResponse) IsSetUserInfo() bool {
	return p.UserInfo != nil
}

func (p *UserLoginResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserLoginResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserLoginResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *UserLoginResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := NewUserInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.UserInfo = _field
	return nil
}

func (p *UserLoginResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UserLoginResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserLoginResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserLoginResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UserInfo", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.UserInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UserLoginResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserLoginResponse(%+v)", *p)

}

// ============= 用户登录 END ==============
// ============= 用户信息查询 BEGIN ==============
type UserInfoDetailRequest struct {
	WxOpenId string `thrift:"WxOpenId,1" form:"WxOpenId" json:"WxOpenId" query:"WxOpenId"`
}

func NewUserInfoDetailRequest() *UserInfoDetailRequest {
	return &UserInfoDetailRequest{}
}

func (p *UserInfoDetailRequest) InitDefault() {
}

func (p *UserInfoDetailRequest) GetWxOpenId() (v string) {
	return p.WxOpenId
}

var fieldIDToName_UserInfoDetailRequest = map[int16]string{
	1: "WxOpenId",
}

func (p *UserInfoDetailRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserInfoDetailRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserInfoDetailRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WxOpenId = _field
	return nil
}

func (p *UserInfoDetailRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UserInfoDetailRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserInfoDetailRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("WxOpenId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.WxOpenId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserInfoDetailRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoDetailRequest(%+v)", *p)

}

type UserInfoDetailResponse struct {
	Meta *common.Meta `thrift:"meta,1" form:"meta" json:"meta" query:"meta"`
	//用户信息
	UserInfo *UserInfo `thrift:"UserInfo,2" form:"UserInfo" json:"UserInfo" query:"UserInfo"`
	//模拟对战信息
	BattleStatisticsInfo *BattleStatisticsInfo `thrift:"BattleStatisticsInfo,3" form:"BattleStatisticsInfo" json:"BattleStatisticsInfo" query:"BattleStatisticsInfo"`
	//模拟抽卡信息
	LotteryStatisticsInfo *LotteryStatisticsInfo `thrift:"LotteryStatisticsInfo,4" form:"LotteryStatisticsInfo" json:"LotteryStatisticsInfo" query:"LotteryStatisticsInfo"`
}

func NewUserInfoDetailResponse() *UserInfoDetailResponse {
	return &UserInfoDetailResponse{}
}

func (p *UserInfoDetailResponse) InitDefault() {
}

var UserInfoDetailResponse_Meta_DEFAULT *common.Meta

func (p *UserInfoDetailResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return UserInfoDetailResponse_Meta_DEFAULT
	}
	return p.Meta
}

var UserInfoDetailResponse_UserInfo_DEFAULT *UserInfo

func (p *UserInfoDetailResponse) GetUserInfo() (v *UserInfo) {
	if !p.IsSetUserInfo() {
		return UserInfoDetailResponse_UserInfo_DEFAULT
	}
	return p.UserInfo
}

var UserInfoDetailResponse_BattleStatisticsInfo_DEFAULT *BattleStatisticsInfo

func (p *UserInfoDetailResponse) GetBattleStatisticsInfo() (v *BattleStatisticsInfo) {
	if !p.IsSetBattleStatisticsInfo() {
		return UserInfoDetailResponse_BattleStatisticsInfo_DEFAULT
	}
	return p.BattleStatisticsInfo
}

var UserInfoDetailResponse_LotteryStatisticsInfo_DEFAULT *LotteryStatisticsInfo

func (p *UserInfoDetailResponse) GetLotteryStatisticsInfo() (v *LotteryStatisticsInfo) {
	if !p.IsSetLotteryStatisticsInfo() {
		return UserInfoDetailResponse_LotteryStatisticsInfo_DEFAULT
	}
	return p.LotteryStatisticsInfo
}

var fieldIDToName_UserInfoDetailResponse = map[int16]string{
	1: "meta",
	2: "UserInfo",
	3: "BattleStatisticsInfo",
	4: "LotteryStatisticsInfo",
}

func (p *UserInfoDetailResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *UserInfoDetailResponse) IsSetUserInfo() bool {
	return p.UserInfo != nil
}

func (p *UserInfoDetailResponse) IsSetBattleStatisticsInfo() bool {
	return p.BattleStatisticsInfo != nil
}

func (p *UserInfoDetailResponse) IsSetLotteryStatisticsInfo() bool {
	return p.LotteryStatisticsInfo != nil
}

func (p *UserInfoDetailResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserInfoDetailResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserInfoDetailResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *UserInfoDetailResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := NewUserInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.UserInfo = _field
	return nil
}
func (p *UserInfoDetailResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewBattleStatisticsInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BattleStatisticsInfo = _field
	return nil
}
func (p *UserInfoDetailResponse) ReadField4(iprot thrift.TProtocol) error {
	_field := NewLotteryStatisticsInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.LotteryStatisticsInfo = _field
	return nil
}

func (p *UserInfoDetailResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UserInfoDetailResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserInfoDetailResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserInfoDetailResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UserInfo", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.UserInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UserInfoDetailResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BattleStatisticsInfo", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BattleStatisticsInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UserInfoDetailResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LotteryStatisticsInfo", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.LotteryStatisticsInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UserInfoDetailResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoDetailResponse(%+v)", *p)

}

type UserInfo struct {
	Uid       int64  `thrift:"Uid,1" form:"Uid" json:"Uid" query:"Uid"`
	NickName  string `thrift:"NickName,2" form:"NickName" json:"NickName" query:"NickName"`
	AvatarUrl string `thrift:"AvatarUrl,3" form:"AvatarUrl" json:"AvatarUrl" query:"AvatarUrl"`
	WxOpenId  string `thrift:"WxOpenId,4" form:"WxOpenId" json:"WxOpenId" query:"WxOpenId"`
	Level     int64  `thrift:"Level,5" form:"Level" json:"Level" query:"Level"`
}

func NewUserInfo() *UserInfo {
	return &UserInfo{}
}

func (p *UserInfo) InitDefault() {
}

func (p *UserInfo) GetUid() (v int64) {
	return p.Uid
}

func (p *UserInfo) GetNickName() (v string) {
	return p.NickName
}

func (p *UserInfo) GetAvatarUrl() (v string) {
	return p.AvatarUrl
}

func (p *UserInfo) GetWxOpenId() (v string) {
	return p.WxOpenId
}

func (p *UserInfo) GetLevel() (v int64) {
	return p.Level
}

var fieldIDToName_UserInfo = map[int16]string{
	1: "Uid",
	2: "NickName",
	3: "AvatarUrl",
	4: "WxOpenId",
	5: "Level",
}

func (p *UserInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Uid = _field
	return nil
}
func (p *UserInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NickName = _field
	return nil
}
func (p *UserInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AvatarUrl = _field
	return nil
}
func (p *UserInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WxOpenId = _field
	return nil
}
func (p *UserInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Level = _field
	return nil
}

func (p *UserInfo) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UserInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Uid", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NickName", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NickName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UserInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AvatarUrl", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AvatarUrl); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UserInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("WxOpenId", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.WxOpenId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UserInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Level", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Level); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfo(%+v)", *p)

}

type BattleStatisticsInfo struct {
	//高频使用武将列表
	HighFreqGeneralList []*GeneralRecord `thrift:"HighFreqGeneralList,1" form:"HighFreqGeneralList" json:"HighFreqGeneralList" query:"HighFreqGeneralList"`
	//高频使用战法列表
	HighFreqTacticsList []*TacticsRecord `thrift:"HighFreqTacticsList,2" form:"HighFreqTacticsList" json:"HighFreqTacticsList" query:"HighFreqTacticsList"`
	//高频使用队伍列表
	HighFreqTeamList []*TeamRecord `thrift:"HighFreqTeamList,3" form:"HighFreqTeamList" json:"HighFreqTeamList" query:"HighFreqTeamList"`
	//胜率
	WinRate float64 `thrift:"WinRate,50" form:"WinRate" json:"WinRate" query:"WinRate"`
	//胜利次数
	WinCnt int64 `thrift:"WinCnt,51" form:"WinCnt" json:"WinCnt" query:"WinCnt"`
	//平局次数
	DrawCnt int64 `thrift:"DrawCnt,52" form:"DrawCnt" json:"DrawCnt" query:"DrawCnt"`
	//失败次数
	LoseCnt int64 `thrift:"LoseCnt,53" form:"LoseCnt" json:"LoseCnt" query:"LoseCnt"`
}

func NewBattleStatisticsInfo() *BattleStatisticsInfo {
	return &BattleStatisticsInfo{}
}

func (p *BattleStatisticsInfo) InitDefault() {
}

func (p *BattleStatisticsInfo) GetHighFreqGeneralList() (v []*GeneralRecord) {
	return p.HighFreqGeneralList
}

func (p *BattleStatisticsInfo) GetHighFreqTacticsList() (v []*TacticsRecord) {
	return p.HighFreqTacticsList
}

func (p *BattleStatisticsInfo) GetHighFreqTeamList() (v []*TeamRecord) {
	return p.HighFreqTeamList
}

func (p *BattleStatisticsInfo) GetWinRate() (v float64) {
	return p.WinRate
}

func (p *BattleStatisticsInfo) GetWinCnt() (v int64) {
	return p.WinCnt
}

func (p *BattleStatisticsInfo) GetDrawCnt() (v int64) {
	return p.DrawCnt
}

func (p *BattleStatisticsInfo) GetLoseCnt() (v int64) {
	return p.LoseCnt
}

var fieldIDToName_BattleStatisticsInfo = map[int16]string{
	1:  "HighFreqGeneralList",
	2:  "HighFreqTacticsList",
	3:  "HighFreqTeamList",
	50: "WinRate",
	51: "WinCnt",
	52: "DrawCnt",
	53: "LoseCnt",
}

func (p *BattleStatisticsInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 50:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField50(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 51:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField51(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 52:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField52(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 53:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField53(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BattleStatisticsInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BattleStatisticsInfo) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*GeneralRecord, 0, size)
	values := make([]GeneralRecord, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.HighFreqGeneralList = _field
	return nil
}
func (p *BattleStatisticsInfo) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TacticsRecord, 0, size)
	values := make([]TacticsRecord, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.HighFreqTacticsList = _field
	return nil
}
func (p *BattleStatisticsInfo) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TeamRecord, 0, size)
	values := make([]TeamRecord, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.HighFreqTeamList = _field
	return nil
}
func (p *BattleStatisticsInfo) ReadField50(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WinRate = _field
	return nil
}
func (p *BattleStatisticsInfo) ReadField51(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WinCnt = _field
	return nil
}
func (p *BattleStatisticsInfo) ReadField52(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DrawCnt = _field
	return nil
}
func (p *BattleStatisticsInfo) ReadField53(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LoseCnt = _field
	return nil
}

func (p *BattleStatisticsInfo) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("BattleStatisticsInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField50(oprot); err != nil {
			fieldId = 50
			goto WriteFieldError
		}
		if err = p.writeField51(oprot); err != nil {
			fieldId = 51
			goto WriteFieldError
		}
		if err = p.writeField52(oprot); err != nil {
			fieldId = 52
			goto WriteFieldError
		}
		if err = p.writeField53(oprot); err != nil {
			fieldId = 53
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BattleStatisticsInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("HighFreqGeneralList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HighFreqGeneralList)); err != nil {
		return err
	}
	for _, v := range p.HighFreqGeneralList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BattleStatisticsInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("HighFreqTacticsList", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HighFreqTacticsList)); err != nil {
		return err
	}
	for _, v := range p.HighFreqTacticsList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BattleStatisticsInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("HighFreqTeamList", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HighFreqTeamList)); err != nil {
		return err
	}
	for _, v := range p.HighFreqTeamList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BattleStatisticsInfo) writeField50(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("WinRate", thrift.DOUBLE, 50); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.WinRate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 50 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 50 end error: ", p), err)
}

func (p *BattleStatisticsInfo) writeField51(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("WinCnt", thrift.I64, 51); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WinCnt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 51 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 51 end error: ", p), err)
}

func (p *BattleStatisticsInfo) writeField52(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DrawCnt", thrift.I64, 52); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DrawCnt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 52 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 52 end error: ", p), err)
}

func (p *BattleStatisticsInfo) writeField53(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LoseCnt", thrift.I64, 53); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.LoseCnt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 53 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 53 end error: ", p), err)
}

func (p *BattleStatisticsInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BattleStatisticsInfo(%+v)", *p)

}

type GeneralRecord struct {
	//武将
	General *MetadataGeneral `thrift:"General,1" form:"General" json:"General" query:"General"`
	//次数
	Times int64 `thrift:"Times,2" form:"Times" json:"Times" query:"Times"`
}

func NewGeneralRecord() *GeneralRecord {
	return &GeneralRecord{}
}

func (p *GeneralRecord) InitDefault() {
}

var GeneralRecord_General_DEFAULT *MetadataGeneral

func (p *GeneralRecord) GetGeneral() (v *MetadataGeneral) {
	if !p.IsSetGeneral() {
		return GeneralRecord_General_DEFAULT
	}
	return p.General
}

func (p *GeneralRecord) GetTimes() (v int64) {
	return p.Times
}

var fieldIDToName_GeneralRecord = map[int16]string{
	1: "General",
	2: "Times",
}

func (p *GeneralRecord) IsSetGeneral() bool {
	return p.General != nil
}

func (p *GeneralRecord) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralRecord[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralRecord) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMetadataGeneral()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.General = _field
	return nil
}
func (p *GeneralRecord) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Times = _field
	return nil
}

func (p *GeneralRecord) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralRecord"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("General", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.General.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Times", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Times); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralRecord(%+v)", *p)

}

type TacticsRecord struct {
	//战法
	Tactics *Tactics `thrift:"Tactics,1" form:"Tactics" json:"Tactics" query:"Tactics"`
	//场次
	Times int64 `thrift:"Times,2" form:"Times" json:"Times" query:"Times"`
}

func NewTacticsRecord() *TacticsRecord {
	return &TacticsRecord{}
}

func (p *TacticsRecord) InitDefault() {
}

var TacticsRecord_Tactics_DEFAULT *Tactics

func (p *TacticsRecord) GetTactics() (v *Tactics) {
	if !p.IsSetTactics() {
		return TacticsRecord_Tactics_DEFAULT
	}
	return p.Tactics
}

func (p *TacticsRecord) GetTimes() (v int64) {
	return p.Times
}

var fieldIDToName_TacticsRecord = map[int16]string{
	1: "Tactics",
	2: "Times",
}

func (p *TacticsRecord) IsSetTactics() bool {
	return p.Tactics != nil
}

func (p *TacticsRecord) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TacticsRecord[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TacticsRecord) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTactics()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Tactics = _field
	return nil
}
func (p *TacticsRecord) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Times = _field
	return nil
}

func (p *TacticsRecord) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("TacticsRecord"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TacticsRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Tactics", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Tactics.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TacticsRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Times", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Times); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TacticsRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TacticsRecord(%+v)", *p)

}

type TeamRecord struct {
	//阵容
	BattleTeam *BattleTeam `thrift:"BattleTeam,1" form:"BattleTeam" json:"BattleTeam" query:"BattleTeam"`
	//场次
	Times int64 `thrift:"Times,2" form:"Times" json:"Times" query:"Times"`
}

func NewTeamRecord() *TeamRecord {
	return &TeamRecord{}
}

func (p *TeamRecord) InitDefault() {
}

var TeamRecord_BattleTeam_DEFAULT *BattleTeam

func (p *TeamRecord) GetBattleTeam() (v *BattleTeam) {
	if !p.IsSetBattleTeam() {
		return TeamRecord_BattleTeam_DEFAULT
	}
	return p.BattleTeam
}

func (p *TeamRecord) GetTimes() (v int64) {
	return p.Times
}

var fieldIDToName_TeamRecord = map[int16]string{
	1: "BattleTeam",
	2: "Times",
}

func (p *TeamRecord) IsSetBattleTeam() bool {
	return p.BattleTeam != nil
}

func (p *TeamRecord) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TeamRecord[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TeamRecord) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBattleTeam()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BattleTeam = _field
	return nil
}
func (p *TeamRecord) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Times = _field
	return nil
}

func (p *TeamRecord) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("TeamRecord"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TeamRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BattleTeam", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BattleTeam.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TeamRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Times", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Times); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TeamRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TeamRecord(%+v)", *p)

}

type LotteryStatisticsInfo struct {
	//高频抽中武将列表
	HighFreqGeneralList []*GeneralRecord `thrift:"HighFreqGeneralList,1" form:"HighFreqGeneralList" json:"HighFreqGeneralList" query:"HighFreqGeneralList"`
	//高频抽取卡池列表
	HighFreqCardPoolList []string `thrift:"HighFreqCardPoolList,2" form:"HighFreqCardPoolList" json:"HighFreqCardPoolList" query:"HighFreqCardPoolList"`
	//五星率
	Lev5HitRate float64 `thrift:"Lev5HitRate,50" form:"Lev5HitRate" json:"Lev5HitRate" query:"Lev5HitRate"`
}

func NewLotteryStatisticsInfo() *LotteryStatisticsInfo {
	return &LotteryStatisticsInfo{}
}

func (p *LotteryStatisticsInfo) InitDefault() {
}

func (p *LotteryStatisticsInfo) GetHighFreqGeneralList() (v []*GeneralRecord) {
	return p.HighFreqGeneralList
}

func (p *LotteryStatisticsInfo) GetHighFreqCardPoolList() (v []string) {
	return p.HighFreqCardPoolList
}

func (p *LotteryStatisticsInfo) GetLev5HitRate() (v float64) {
	return p.Lev5HitRate
}

var fieldIDToName_LotteryStatisticsInfo = map[int16]string{
	1:  "HighFreqGeneralList",
	2:  "HighFreqCardPoolList",
	50: "Lev5HitRate",
}

func (p *LotteryStatisticsInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 50:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField50(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryStatisticsInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryStatisticsInfo) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*GeneralRecord, 0, size)
	values := make([]GeneralRecord, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.HighFreqGeneralList = _field
	return nil
}
func (p *LotteryStatisticsInfo) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.HighFreqCardPoolList = _field
	return nil
}
func (p *LotteryStatisticsInfo) ReadField50(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Lev5HitRate = _field
	return nil
}

func (p *LotteryStatisticsInfo) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("LotteryStatisticsInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField50(oprot); err != nil {
			fieldId = 50
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryStatisticsInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("HighFreqGeneralList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HighFreqGeneralList)); err != nil {
		return err
	}
	for _, v := range p.HighFreqGeneralList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryStatisticsInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("HighFreqCardPoolList", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.HighFreqCardPoolList)); err != nil {
		return err
	}
	for _, v := range p.HighFreqCardPoolList {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LotteryStatisticsInfo) writeField50(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Lev5HitRate", thrift.DOUBLE, 50); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Lev5HitRate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 50 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 50 end error: ", p), err)
}

func (p *LotteryStatisticsInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryStatisticsInfo(%+v)", *p)

}

// ============= 用户信息查询 END ==============
// ============= 武将抽卡 BEGIN ==============
type GeneralLotteryDoRequest struct {
	//抽取卡池枚举
	GeneralLotteryPool int64 `thrift:"GeneralLotteryPool,1" form:"GeneralLotteryPool" json:"GeneralLotteryPool" query:"GeneralLotteryPool"`
	//抽取次数
	RollTimes int64 `thrift:"RollTimes,2" form:"RollTimes" json:"RollTimes" query:"RollTimes"`
	//用户uid
	Uid string `thrift:"Uid,3" form:"Uid" json:"Uid" query:"Uid"`
}

func NewGeneralLotteryDoRequest() *GeneralLotteryDoRequest {
	return &GeneralLotteryDoRequest{}
}

func (p *GeneralLotteryDoRequest) InitDefault() {
}

func (p *GeneralLotteryDoRequest) GetGeneralLotteryPool() (v int64) {
	return p.GeneralLotteryPool
}

func (p *GeneralLotteryDoRequest) GetRollTimes() (v int64) {
	return p.RollTimes
}

func (p *GeneralLotteryDoRequest) GetUid() (v string) {
	return p.Uid
}

var fieldIDToName_GeneralLotteryDoRequest = map[int16]string{
	1: "GeneralLotteryPool",
	2: "RollTimes",
	3: "Uid",
}

func (p *GeneralLotteryDoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralLotteryDoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotteryDoRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GeneralLotteryPool = _field
	return nil
}
func (p *GeneralLotteryDoRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RollTimes = _field
	return nil
}
func (p *GeneralLotteryDoRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Uid = _field
	return nil
}

func (p *GeneralLotteryDoRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryDoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotteryDoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralLotteryPool", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GeneralLotteryPool); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralLotteryDoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RollTimes", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.RollTimes); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralLotteryDoRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Uid", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GeneralLotteryDoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotteryDoRequest(%+v)", *p)

}

type GeneralLotteryDoResponse struct {
	Meta *common.Meta `thrift:"meta,1" form:"meta" json:"meta" query:"meta"`
	//抽取的武将信息
	GeneralLotteryInfoList []*GeneralLotteryDoInfo `thrift:"GeneralLotteryInfoList,2" form:"GeneralLotteryInfoList" json:"GeneralLotteryInfoList" query:"GeneralLotteryInfoList"`
	//保底统计
	ProtectedMustHitNum int64 `thrift:"ProtectedMustHitNum,3" form:"ProtectedMustHitNum" json:"ProtectedMustHitNum" query:"ProtectedMustHitNum"`
	//五星武将出现数
	Hit5LevGeneralNum int64 `thrift:"Hit5LevGeneralNum,4" form:"Hit5LevGeneralNum" json:"Hit5LevGeneralNum" query:"Hit5LevGeneralNum"`
	//五星武将出现率
	Hit5LevGeneralRate float64 `thrift:"Hit5LevGeneralRate,5" form:"Hit5LevGeneralRate" json:"Hit5LevGeneralRate" query:"Hit5LevGeneralRate"`
	//连续不出橙次数累计
	NotHitLev5Times int64 `thrift:"NotHitLev5Times,6" form:"NotHitLev5Times" json:"NotHitLev5Times" query:"NotHitLev5Times"`
}

func NewGeneralLotteryDoResponse() *GeneralLotteryDoResponse {
	return &GeneralLotteryDoResponse{}
}

func (p *GeneralLotteryDoResponse) InitDefault() {
}

var GeneralLotteryDoResponse_Meta_DEFAULT *common.Meta

func (p *GeneralLotteryDoResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return GeneralLotteryDoResponse_Meta_DEFAULT
	}
	return p.Meta
}

func (p *GeneralLotteryDoResponse) GetGeneralLotteryInfoList() (v []*GeneralLotteryDoInfo) {
	return p.GeneralLotteryInfoList
}

func (p *GeneralLotteryDoResponse) GetProtectedMustHitNum() (v int64) {
	return p.ProtectedMustHitNum
}

func (p *GeneralLotteryDoResponse) GetHit5LevGeneralNum() (v int64) {
	return p.Hit5LevGeneralNum
}

func (p *GeneralLotteryDoResponse) GetHit5LevGeneralRate() (v float64) {
	return p.Hit5LevGeneralRate
}

func (p *GeneralLotteryDoResponse) GetNotHitLev5Times() (v int64) {
	return p.NotHitLev5Times
}

var fieldIDToName_GeneralLotteryDoResponse = map[int16]string{
	1: "meta",
	2: "GeneralLotteryInfoList",
	3: "ProtectedMustHitNum",
	4: "Hit5LevGeneralNum",
	5: "Hit5LevGeneralRate",
	6: "NotHitLev5Times",
}

func (p *GeneralLotteryDoResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *GeneralLotteryDoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralLotteryDoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotteryDoResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *GeneralLotteryDoResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*GeneralLotteryDoInfo, 0, size)
	values := make([]GeneralLotteryDoInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.GeneralLotteryInfoList = _field
	return nil
}
func (p *GeneralLotteryDoResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ProtectedMustHitNum = _field
	return nil
}
func (p *GeneralLotteryDoResponse) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Hit5LevGeneralNum = _field
	return nil
}
func (p *GeneralLotteryDoResponse) ReadField5(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Hit5LevGeneralRate = _field
	return nil
}
func (p *GeneralLotteryDoResponse) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NotHitLev5Times = _field
	return nil
}

func (p *GeneralLotteryDoResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryDoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotteryDoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralLotteryDoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralLotteryInfoList", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.GeneralLotteryInfoList)); err != nil {
		return err
	}
	for _, v := range p.GeneralLotteryInfoList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralLotteryDoResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ProtectedMustHitNum", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ProtectedMustHitNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GeneralLotteryDoResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Hit5LevGeneralNum", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Hit5LevGeneralNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GeneralLotteryDoResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Hit5LevGeneralRate", thrift.DOUBLE, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Hit5LevGeneralRate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GeneralLotteryDoResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NotHitLev5Times", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.NotHitLev5Times); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GeneralLotteryDoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotteryDoResponse(%+v)", *p)

}

type GeneralLotteryDoInfo struct {
	//武将信息
	GeneralInfo *MetadataGeneral `thrift:"GeneralInfo,1" form:"GeneralInfo" json:"GeneralInfo" query:"GeneralInfo"`
	//抽中次数
	HitNum int64 `thrift:"HitNum,2" form:"HitNum" json:"HitNum" query:"HitNum"`
	//本次抽中占比
	HitRate float64 `thrift:"HitRate,3" form:"HitRate" json:"HitRate" query:"HitRate"`
	//游戏设置概率
	LotteryRate float64 `thrift:"LotteryRate,4" form:"LotteryRate" json:"LotteryRate" query:"LotteryRate"`
}

func NewGeneralLotteryDoInfo() *GeneralLotteryDoInfo {
	return &GeneralLotteryDoInfo{}
}

func (p *GeneralLotteryDoInfo) InitDefault() {
}

var GeneralLotteryDoInfo_GeneralInfo_DEFAULT *MetadataGeneral

func (p *GeneralLotteryDoInfo) GetGeneralInfo() (v *MetadataGeneral) {
	if !p.IsSetGeneralInfo() {
		return GeneralLotteryDoInfo_GeneralInfo_DEFAULT
	}
	return p.GeneralInfo
}

func (p *GeneralLotteryDoInfo) GetHitNum() (v int64) {
	return p.HitNum
}

func (p *GeneralLotteryDoInfo) GetHitRate() (v float64) {
	return p.HitRate
}

func (p *GeneralLotteryDoInfo) GetLotteryRate() (v float64) {
	return p.LotteryRate
}

var fieldIDToName_GeneralLotteryDoInfo = map[int16]string{
	1: "GeneralInfo",
	2: "HitNum",
	3: "HitRate",
	4: "LotteryRate",
}

func (p *GeneralLotteryDoInfo) IsSetGeneralInfo() bool {
	return p.GeneralInfo != nil
}

func (p *GeneralLotteryDoInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralLotteryDoInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotteryDoInfo) ReadField1(iprot thrift.TProtocol) error {
	_field := NewMetadataGeneral()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.GeneralInfo = _field
	return nil
}
func (p *GeneralLotteryDoInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HitNum = _field
	return nil
}
func (p *GeneralLotteryDoInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HitRate = _field
	return nil
}
func (p *GeneralLotteryDoInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LotteryRate = _field
	return nil
}

func (p *GeneralLotteryDoInfo) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryDoInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotteryDoInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralInfo", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.GeneralInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralLotteryDoInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("HitNum", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.HitNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralLotteryDoInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("HitRate", thrift.DOUBLE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.HitRate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GeneralLotteryDoInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LotteryRate", thrift.DOUBLE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.LotteryRate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GeneralLotteryDoInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotteryDoInfo(%+v)", *p)

}

// ============= 武将抽卡 END ==============
// ============= 武将抽卡记录 BEGIN ==============
type GeneralLotteryListRequest struct {
	//用户uid
	Uid string `thrift:"Uid,1" form:"Uid" json:"Uid" query:"Uid"`
}

func NewGeneralLotteryListRequest() *GeneralLotteryListRequest {
	return &GeneralLotteryListRequest{}
}

func (p *GeneralLotteryListRequest) InitDefault() {
}

func (p *GeneralLotteryListRequest) GetUid() (v string) {
	return p.Uid
}

var fieldIDToName_GeneralLotteryListRequest = map[int16]string{
	1: "Uid",
}

func (p *GeneralLotteryListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralLotteryListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotteryListRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Uid = _field
	return nil
}

func (p *GeneralLotteryListRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotteryListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Uid", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralLotteryListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotteryListRequest(%+v)", *p)

}

type GeneralLotteryListResponse struct {
	Meta *common.Meta `thrift:"meta,1" form:"meta" json:"meta" query:"meta"`
	//高频抽取的武将信息
	HighFreqGeneralLotteryInfoList []*GeneralLotteryDoInfo `thrift:"HighFreqGeneralLotteryInfoList,2" form:"HighFreqGeneralLotteryInfoList" json:"HighFreqGeneralLotteryInfoList" query:"HighFreqGeneralLotteryInfoList"`
}

func NewGeneralLotteryListResponse() *GeneralLotteryListResponse {
	return &GeneralLotteryListResponse{}
}

func (p *GeneralLotteryListResponse) InitDefault() {
}

var GeneralLotteryListResponse_Meta_DEFAULT *common.Meta

func (p *GeneralLotteryListResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return GeneralLotteryListResponse_Meta_DEFAULT
	}
	return p.Meta
}

func (p *GeneralLotteryListResponse) GetHighFreqGeneralLotteryInfoList() (v []*GeneralLotteryDoInfo) {
	return p.HighFreqGeneralLotteryInfoList
}

var fieldIDToName_GeneralLotteryListResponse = map[int16]string{
	1: "meta",
	2: "HighFreqGeneralLotteryInfoList",
}

func (p *GeneralLotteryListResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *GeneralLotteryListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralLotteryListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotteryListResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *GeneralLotteryListResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*GeneralLotteryDoInfo, 0, size)
	values := make([]GeneralLotteryDoInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.HighFreqGeneralLotteryInfoList = _field
	return nil
}

func (p *GeneralLotteryListResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotteryListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralLotteryListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("HighFreqGeneralLotteryInfoList", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HighFreqGeneralLotteryInfoList)); err != nil {
		return err
	}
	for _, v := range p.HighFreqGeneralLotteryInfoList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralLotteryListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotteryListResponse(%+v)", *p)

}

// ============= 武将抽卡记录 END ==============
// ============= 武将卡池查询 BEGIN ==============
type GeneralLotteryInfoListRequest struct {
	//卡池枚举
	GeneralLotteryPool int64 `thrift:"GeneralLotteryPool,1" form:"GeneralLotteryPool" json:"GeneralLotteryPool" query:"GeneralLotteryPool"`
}

func NewGeneralLotteryInfoListRequest() *GeneralLotteryInfoListRequest {
	return &GeneralLotteryInfoListRequest{}
}

func (p *GeneralLotteryInfoListRequest) InitDefault() {
}

func (p *GeneralLotteryInfoListRequest) GetGeneralLotteryPool() (v int64) {
	return p.GeneralLotteryPool
}

var fieldIDToName_GeneralLotteryInfoListRequest = map[int16]string{
	1: "GeneralLotteryPool",
}

func (p *GeneralLotteryInfoListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralLotteryInfoListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotteryInfoListRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GeneralLotteryPool = _field
	return nil
}

func (p *GeneralLotteryInfoListRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryInfoListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotteryInfoListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralLotteryPool", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GeneralLotteryPool); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralLotteryInfoListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotteryInfoListRequest(%+v)", *p)

}

type GeneralLotteryInfoListResponse struct {
	Meta *common.Meta `thrift:"meta,1" form:"meta" json:"meta" query:"meta"`
	//卡池武将信息
	GeneralLotteryPoolInfoList []*GeneralLotterInfoQueryInfo `thrift:"GeneralLotteryPoolInfoList,2" form:"GeneralLotteryPoolInfoList" json:"GeneralLotteryPoolInfoList" query:"GeneralLotteryPoolInfoList"`
}

func NewGeneralLotteryInfoListResponse() *GeneralLotteryInfoListResponse {
	return &GeneralLotteryInfoListResponse{}
}

func (p *GeneralLotteryInfoListResponse) InitDefault() {
}

var GeneralLotteryInfoListResponse_Meta_DEFAULT *common.Meta

func (p *GeneralLotteryInfoListResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return GeneralLotteryInfoListResponse_Meta_DEFAULT
	}
	return p.Meta
}

func (p *GeneralLotteryInfoListResponse) GetGeneralLotteryPoolInfoList() (v []*GeneralLotterInfoQueryInfo) {
	return p.GeneralLotteryPoolInfoList
}

var fieldIDToName_GeneralLotteryInfoListResponse = map[int16]string{
	1: "meta",
	2: "GeneralLotteryPoolInfoList",
}

func (p *GeneralLotteryInfoListResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *GeneralLotteryInfoListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralLotteryInfoListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotteryInfoListResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *GeneralLotteryInfoListResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*GeneralLotterInfoQueryInfo, 0, size)
	values := make([]GeneralLotterInfoQueryInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.GeneralLotteryPoolInfoList = _field
	return nil
}

func (p *GeneralLotteryInfoListResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryInfoListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotteryInfoListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralLotteryInfoListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralLotteryPoolInfoList", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.GeneralLotteryPoolInfoList)); err != nil {
		return err
	}
	for _, v := range p.GeneralLotteryPoolInfoList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralLotteryInfoListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotteryInfoListResponse(%+v)", *p)

}

type GeneralLotterInfoQueryInfo struct {
	//武将信息
	GeneralInfoList []*MetadataGeneral `thrift:"GeneralInfoList,1" form:"GeneralInfoList" json:"GeneralInfoList" query:"GeneralInfoList"`
	//卡池枚举
	GeneralLotteryPool int64 `thrift:"GeneralLotteryPool,2" form:"GeneralLotteryPool" json:"GeneralLotteryPool" query:"GeneralLotteryPool"`
	//卡池名称
	GeneralLotteryPoolName string `thrift:"GeneralLotteryPoolName,3" form:"GeneralLotteryPoolName" json:"GeneralLotteryPoolName" query:"GeneralLotteryPoolName"`
}

func NewGeneralLotterInfoQueryInfo() *GeneralLotterInfoQueryInfo {
	return &GeneralLotterInfoQueryInfo{}
}

func (p *GeneralLotterInfoQueryInfo) InitDefault() {
}

func (p *GeneralLotterInfoQueryInfo) GetGeneralInfoList() (v []*MetadataGeneral) {
	return p.GeneralInfoList
}

func (p *GeneralLotterInfoQueryInfo) GetGeneralLotteryPool() (v int64) {
	return p.GeneralLotteryPool
}

func (p *GeneralLotterInfoQueryInfo) GetGeneralLotteryPoolName() (v string) {
	return p.GeneralLotteryPoolName
}

var fieldIDToName_GeneralLotterInfoQueryInfo = map[int16]string{
	1: "GeneralInfoList",
	2: "GeneralLotteryPool",
	3: "GeneralLotteryPoolName",
}

func (p *GeneralLotterInfoQueryInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralLotterInfoQueryInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotterInfoQueryInfo) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*MetadataGeneral, 0, size)
	values := make([]MetadataGeneral, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.GeneralInfoList = _field
	return nil
}
func (p *GeneralLotterInfoQueryInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GeneralLotteryPool = _field
	return nil
}
func (p *GeneralLotterInfoQueryInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GeneralLotteryPoolName = _field
	return nil
}

func (p *GeneralLotterInfoQueryInfo) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotterInfoQueryInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotterInfoQueryInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralInfoList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.GeneralInfoList)); err != nil {
		return err
	}
	for _, v := range p.GeneralInfoList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralLotterInfoQueryInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralLotteryPool", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GeneralLotteryPool); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralLotterInfoQueryInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralLotteryPoolName", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.GeneralLotteryPoolName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GeneralLotterInfoQueryInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotterInfoQueryInfo(%+v)", *p)

}

// ============= 武将卡池查询 END ==============
// ============= 武将概率查询 BEGIN ==============
type GeneralLotteryRateListRequest struct {
	GeneralId int64 `thrift:"GeneralId,1" form:"GeneralId" json:"GeneralId" query:"GeneralId"`
}

func NewGeneralLotteryRateListRequest() *GeneralLotteryRateListRequest {
	return &GeneralLotteryRateListRequest{}
}

func (p *GeneralLotteryRateListRequest) InitDefault() {
}

func (p *GeneralLotteryRateListRequest) GetGeneralId() (v int64) {
	return p.GeneralId
}

var fieldIDToName_GeneralLotteryRateListRequest = map[int16]string{
	1: "GeneralId",
}

func (p *GeneralLotteryRateListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralLotteryRateListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotteryRateListRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GeneralId = _field
	return nil
}

func (p *GeneralLotteryRateListRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryRateListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotteryRateListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GeneralId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralLotteryRateListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotteryRateListRequest(%+v)", *p)

}

type GeneralLotteryRateListResponse struct {
	Meta *common.Meta `thrift:"meta,1" form:"meta" json:"meta" query:"meta"`
	//武将概率信息
	GeneralLotteryRateInfoList []*GeneralLotteryRateListInfo `thrift:"GeneralLotteryRateInfoList,2" form:"GeneralLotteryRateInfoList" json:"GeneralLotteryRateInfoList" query:"GeneralLotteryRateInfoList"`
}

func NewGeneralLotteryRateListResponse() *GeneralLotteryRateListResponse {
	return &GeneralLotteryRateListResponse{}
}

func (p *GeneralLotteryRateListResponse) InitDefault() {
}

var GeneralLotteryRateListResponse_Meta_DEFAULT *common.Meta

func (p *GeneralLotteryRateListResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return GeneralLotteryRateListResponse_Meta_DEFAULT
	}
	return p.Meta
}

func (p *GeneralLotteryRateListResponse) GetGeneralLotteryRateInfoList() (v []*GeneralLotteryRateListInfo) {
	return p.GeneralLotteryRateInfoList
}

var fieldIDToName_GeneralLotteryRateListResponse = map[int16]string{
	1: "meta",
	2: "GeneralLotteryRateInfoList",
}

func (p *GeneralLotteryRateListResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *GeneralLotteryRateListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralLotteryRateListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotteryRateListResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *GeneralLotteryRateListResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*GeneralLotteryRateListInfo, 0, size)
	values := make([]GeneralLotteryRateListInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.GeneralLotteryRateInfoList = _field
	return nil
}

func (p *GeneralLotteryRateListResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryRateListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotteryRateListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralLotteryRateListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralLotteryRateInfoList", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.GeneralLotteryRateInfoList)); err != nil {
		return err
	}
	for _, v := range p.GeneralLotteryRateInfoList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralLotteryRateListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotteryRateListResponse(%+v)", *p)

}

type GeneralLotteryRateListInfo struct {
	//武将概率
	LotteryRate float64 `thrift:"LotteryRate,1" form:"LotteryRate" json:"LotteryRate" query:"LotteryRate"`
	//卡池枚举
	GeneralLotteryPool int64 `thrift:"GeneralLotteryPool,2" form:"GeneralLotteryPool" json:"GeneralLotteryPool" query:"GeneralLotteryPool"`
	//卡池名称
	GeneralLotteryPoolName string `thrift:"GeneralLotteryPoolName,3" form:"GeneralLotteryPoolName" json:"GeneralLotteryPoolName" query:"GeneralLotteryPoolName"`
}

func NewGeneralLotteryRateListInfo() *GeneralLotteryRateListInfo {
	return &GeneralLotteryRateListInfo{}
}

func (p *GeneralLotteryRateListInfo) InitDefault() {
}

func (p *GeneralLotteryRateListInfo) GetLotteryRate() (v float64) {
	return p.LotteryRate
}

func (p *GeneralLotteryRateListInfo) GetGeneralLotteryPool() (v int64) {
	return p.GeneralLotteryPool
}

func (p *GeneralLotteryRateListInfo) GetGeneralLotteryPoolName() (v string) {
	return p.GeneralLotteryPoolName
}

var fieldIDToName_GeneralLotteryRateListInfo = map[int16]string{
	1: "LotteryRate",
	2: "GeneralLotteryPool",
	3: "GeneralLotteryPoolName",
}

func (p *GeneralLotteryRateListInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralLotteryRateListInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotteryRateListInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LotteryRate = _field
	return nil
}
func (p *GeneralLotteryRateListInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GeneralLotteryPool = _field
	return nil
}
func (p *GeneralLotteryRateListInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GeneralLotteryPoolName = _field
	return nil
}

func (p *GeneralLotteryRateListInfo) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryRateListInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotteryRateListInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LotteryRate", thrift.DOUBLE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.LotteryRate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralLotteryRateListInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralLotteryPool", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GeneralLotteryPool); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralLotteryRateListInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralLotteryPoolName", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.GeneralLotteryPoolName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GeneralLotteryRateListInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotteryRateListInfo(%+v)", *p)

}

// ============= 武将概率查询 END ==============
// ============= 卡池查询 BEGIN ==============
type GeneralLotteryPoolListRequest struct {
}

func NewGeneralLotteryPoolListRequest() *GeneralLotteryPoolListRequest {
	return &GeneralLotteryPoolListRequest{}
}

func (p *GeneralLotteryPoolListRequest) InitDefault() {
}

var fieldIDToName_GeneralLotteryPoolListRequest = map[int16]string{}

func (p *GeneralLotteryPoolListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotteryPoolListRequest) Write(oprot thrift.TProtocol) (err error) {

	if err = oprot.WriteStructBegin("GeneralLotteryPoolListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotteryPoolListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotteryPoolListRequest(%+v)", *p)

}

type GeneralLotteryPoolListResponse struct {
	Meta *common.Meta `thrift:"meta,1" form:"meta" json:"meta" query:"meta"`
	//卡池武将信息
	GeneralLotteryPoolInfoList []*GeneralLotterPoolQueryInfo `thrift:"GeneralLotteryPoolInfoList,2" form:"GeneralLotteryPoolInfoList" json:"GeneralLotteryPoolInfoList" query:"GeneralLotteryPoolInfoList"`
}

func NewGeneralLotteryPoolListResponse() *GeneralLotteryPoolListResponse {
	return &GeneralLotteryPoolListResponse{}
}

func (p *GeneralLotteryPoolListResponse) InitDefault() {
}

var GeneralLotteryPoolListResponse_Meta_DEFAULT *common.Meta

func (p *GeneralLotteryPoolListResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return GeneralLotteryPoolListResponse_Meta_DEFAULT
	}
	return p.Meta
}

func (p *GeneralLotteryPoolListResponse) GetGeneralLotteryPoolInfoList() (v []*GeneralLotterPoolQueryInfo) {
	return p.GeneralLotteryPoolInfoList
}

var fieldIDToName_GeneralLotteryPoolListResponse = map[int16]string{
	1: "meta",
	2: "GeneralLotteryPoolInfoList",
}

func (p *GeneralLotteryPoolListResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *GeneralLotteryPoolListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralLotteryPoolListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotteryPoolListResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *GeneralLotteryPoolListResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*GeneralLotterPoolQueryInfo, 0, size)
	values := make([]GeneralLotterPoolQueryInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.GeneralLotteryPoolInfoList = _field
	return nil
}

func (p *GeneralLotteryPoolListResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryPoolListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotteryPoolListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralLotteryPoolListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralLotteryPoolInfoList", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.GeneralLotteryPoolInfoList)); err != nil {
		return err
	}
	for _, v := range p.GeneralLotteryPoolInfoList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralLotteryPoolListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotteryPoolListResponse(%+v)", *p)

}

type GeneralLotterPoolQueryInfo struct {
	//卡池枚举
	GeneralLotteryPool int64 `thrift:"GeneralLotteryPool,1" form:"GeneralLotteryPool" json:"GeneralLotteryPool" query:"GeneralLotteryPool"`
	//卡池名称
	GeneralLotteryPoolName string `thrift:"GeneralLotteryPoolName,2" form:"GeneralLotteryPoolName" json:"GeneralLotteryPoolName" query:"GeneralLotteryPoolName"`
}

func NewGeneralLotterPoolQueryInfo() *GeneralLotterPoolQueryInfo {
	return &GeneralLotterPoolQueryInfo{}
}

func (p *GeneralLotterPoolQueryInfo) InitDefault() {
}

func (p *GeneralLotterPoolQueryInfo) GetGeneralLotteryPool() (v int64) {
	return p.GeneralLotteryPool
}

func (p *GeneralLotterPoolQueryInfo) GetGeneralLotteryPoolName() (v string) {
	return p.GeneralLotteryPoolName
}

var fieldIDToName_GeneralLotterPoolQueryInfo = map[int16]string{
	1: "GeneralLotteryPool",
	2: "GeneralLotteryPoolName",
}

func (p *GeneralLotterPoolQueryInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralLotterPoolQueryInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotterPoolQueryInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GeneralLotteryPool = _field
	return nil
}
func (p *GeneralLotterPoolQueryInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GeneralLotteryPoolName = _field
	return nil
}

func (p *GeneralLotterPoolQueryInfo) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotterPoolQueryInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotterPoolQueryInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralLotteryPool", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GeneralLotteryPool); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralLotterPoolQueryInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralLotteryPoolName", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.GeneralLotteryPoolName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralLotterPoolQueryInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotterPoolQueryInfo(%+v)", *p)

}

// ============= 武将抽卡 END ==============
// ============= 用户卡池抽奖次数重置 BEGIN ==============
type GeneralLotteryUserDataResetRequest struct {
	//用户id
	Uid string `thrift:"Uid,1" form:"Uid" json:"Uid" query:"Uid"`
	//卡池枚举
	GeneralLotteryPool int64 `thrift:"GeneralLotteryPool,2" form:"GeneralLotteryPool" json:"GeneralLotteryPool" query:"GeneralLotteryPool"`
}

func NewGeneralLotteryUserDataResetRequest() *GeneralLotteryUserDataResetRequest {
	return &GeneralLotteryUserDataResetRequest{}
}

func (p *GeneralLotteryUserDataResetRequest) InitDefault() {
}

func (p *GeneralLotteryUserDataResetRequest) GetUid() (v string) {
	return p.Uid
}

func (p *GeneralLotteryUserDataResetRequest) GetGeneralLotteryPool() (v int64) {
	return p.GeneralLotteryPool
}

var fieldIDToName_GeneralLotteryUserDataResetRequest = map[int16]string{
	1: "Uid",
	2: "GeneralLotteryPool",
}

func (p *GeneralLotteryUserDataResetRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralLotteryUserDataResetRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotteryUserDataResetRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Uid = _field
	return nil
}
func (p *GeneralLotteryUserDataResetRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GeneralLotteryPool = _field
	return nil
}

func (p *GeneralLotteryUserDataResetRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryUserDataResetRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotteryUserDataResetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Uid", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralLotteryUserDataResetRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralLotteryPool", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GeneralLotteryPool); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralLotteryUserDataResetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotteryUserDataResetRequest(%+v)", *p)

}

type GeneralLotteryUserDataResetResponse struct {
	Meta *common.Meta `thrift:"meta,1" form:"meta" json:"meta" query:"meta"`
}

func NewGeneralLotteryUserDataResetResponse() *GeneralLotteryUserDataResetResponse {
	return &GeneralLotteryUserDataResetResponse{}
}

func (p *GeneralLotteryUserDataResetResponse) InitDefault() {
}

var GeneralLotteryUserDataResetResponse_Meta_DEFAULT *common.Meta

func (p *GeneralLotteryUserDataResetResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return GeneralLotteryUserDataResetResponse_Meta_DEFAULT
	}
	return p.Meta
}

var fieldIDToName_GeneralLotteryUserDataResetResponse = map[int16]string{
	1: "meta",
}

func (p *GeneralLotteryUserDataResetResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *GeneralLotteryUserDataResetResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralLotteryUserDataResetResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotteryUserDataResetResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}

func (p *GeneralLotteryUserDataResetResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryUserDataResetResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotteryUserDataResetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralLotteryUserDataResetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotteryUserDataResetResponse(%+v)", *p)

}

// ============= 用户卡池抽奖次数重置 END ==============
// ============= 用户卡池抽奖信息查询 BEGIN ==============
type GeneralLotteryUserDataQueryRequest struct {
	//用户id
	Uid string `thrift:"Uid,1" form:"Uid" json:"Uid" query:"Uid"`
	//卡池枚举
	GeneralLotteryPool int64 `thrift:"GeneralLotteryPool,2" form:"GeneralLotteryPool" json:"GeneralLotteryPool" query:"GeneralLotteryPool"`
}

func NewGeneralLotteryUserDataQueryRequest() *GeneralLotteryUserDataQueryRequest {
	return &GeneralLotteryUserDataQueryRequest{}
}

func (p *GeneralLotteryUserDataQueryRequest) InitDefault() {
}

func (p *GeneralLotteryUserDataQueryRequest) GetUid() (v string) {
	return p.Uid
}

func (p *GeneralLotteryUserDataQueryRequest) GetGeneralLotteryPool() (v int64) {
	return p.GeneralLotteryPool
}

var fieldIDToName_GeneralLotteryUserDataQueryRequest = map[int16]string{
	1: "Uid",
	2: "GeneralLotteryPool",
}

func (p *GeneralLotteryUserDataQueryRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralLotteryUserDataQueryRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotteryUserDataQueryRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Uid = _field
	return nil
}
func (p *GeneralLotteryUserDataQueryRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GeneralLotteryPool = _field
	return nil
}

func (p *GeneralLotteryUserDataQueryRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryUserDataQueryRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotteryUserDataQueryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Uid", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralLotteryUserDataQueryRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralLotteryPool", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GeneralLotteryPool); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralLotteryUserDataQueryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotteryUserDataQueryRequest(%+v)", *p)

}

type GeneralLotteryUserDataQueryResponse struct {
	Meta                        *common.Meta                     `thrift:"meta,1" form:"meta" json:"meta" query:"meta"`
	GeneralLotteryDataQueryInfo *GeneralLotteryUserDataQueryInfo `thrift:"GeneralLotteryDataQueryInfo,2" form:"GeneralLotteryDataQueryInfo" json:"GeneralLotteryDataQueryInfo" query:"GeneralLotteryDataQueryInfo"`
}

func NewGeneralLotteryUserDataQueryResponse() *GeneralLotteryUserDataQueryResponse {
	return &GeneralLotteryUserDataQueryResponse{}
}

func (p *GeneralLotteryUserDataQueryResponse) InitDefault() {
}

var GeneralLotteryUserDataQueryResponse_Meta_DEFAULT *common.Meta

func (p *GeneralLotteryUserDataQueryResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return GeneralLotteryUserDataQueryResponse_Meta_DEFAULT
	}
	return p.Meta
}

var GeneralLotteryUserDataQueryResponse_GeneralLotteryDataQueryInfo_DEFAULT *GeneralLotteryUserDataQueryInfo

func (p *GeneralLotteryUserDataQueryResponse) GetGeneralLotteryDataQueryInfo() (v *GeneralLotteryUserDataQueryInfo) {
	if !p.IsSetGeneralLotteryDataQueryInfo() {
		return GeneralLotteryUserDataQueryResponse_GeneralLotteryDataQueryInfo_DEFAULT
	}
	return p.GeneralLotteryDataQueryInfo
}

var fieldIDToName_GeneralLotteryUserDataQueryResponse = map[int16]string{
	1: "meta",
	2: "GeneralLotteryDataQueryInfo",
}

func (p *GeneralLotteryUserDataQueryResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *GeneralLotteryUserDataQueryResponse) IsSetGeneralLotteryDataQueryInfo() bool {
	return p.GeneralLotteryDataQueryInfo != nil
}

func (p *GeneralLotteryUserDataQueryResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralLotteryUserDataQueryResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotteryUserDataQueryResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *GeneralLotteryUserDataQueryResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := NewGeneralLotteryUserDataQueryInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.GeneralLotteryDataQueryInfo = _field
	return nil
}

func (p *GeneralLotteryUserDataQueryResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryUserDataQueryResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotteryUserDataQueryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralLotteryUserDataQueryResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralLotteryDataQueryInfo", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.GeneralLotteryDataQueryInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralLotteryUserDataQueryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotteryUserDataQueryResponse(%+v)", *p)

}

type GeneralLotteryUserDataQueryInfo struct {
	//用户id
	Uid string `thrift:"Uid,1" form:"Uid" json:"Uid" query:"Uid"`
	//卡池枚举
	GeneralLotteryPool int64 `thrift:"GeneralLotteryPool,2" form:"GeneralLotteryPool" json:"GeneralLotteryPool" query:"GeneralLotteryPool"`
	//连续未中五星次数
	NotHitLev5Times int64 `thrift:"NotHitLev5Times,3" form:"NotHitLev5Times" json:"NotHitLev5Times" query:"NotHitLev5Times"`
}

func NewGeneralLotteryUserDataQueryInfo() *GeneralLotteryUserDataQueryInfo {
	return &GeneralLotteryUserDataQueryInfo{}
}

func (p *GeneralLotteryUserDataQueryInfo) InitDefault() {
}

func (p *GeneralLotteryUserDataQueryInfo) GetUid() (v string) {
	return p.Uid
}

func (p *GeneralLotteryUserDataQueryInfo) GetGeneralLotteryPool() (v int64) {
	return p.GeneralLotteryPool
}

func (p *GeneralLotteryUserDataQueryInfo) GetNotHitLev5Times() (v int64) {
	return p.NotHitLev5Times
}

var fieldIDToName_GeneralLotteryUserDataQueryInfo = map[int16]string{
	1: "Uid",
	2: "GeneralLotteryPool",
	3: "NotHitLev5Times",
}

func (p *GeneralLotteryUserDataQueryInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneralLotteryUserDataQueryInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneralLotteryUserDataQueryInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Uid = _field
	return nil
}
func (p *GeneralLotteryUserDataQueryInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.GeneralLotteryPool = _field
	return nil
}
func (p *GeneralLotteryUserDataQueryInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NotHitLev5Times = _field
	return nil
}

func (p *GeneralLotteryUserDataQueryInfo) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryUserDataQueryInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneralLotteryUserDataQueryInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Uid", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneralLotteryUserDataQueryInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GeneralLotteryPool", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.GeneralLotteryPool); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneralLotteryUserDataQueryInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NotHitLev5Times", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.NotHitLev5Times); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GeneralLotteryUserDataQueryInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneralLotteryUserDataQueryInfo(%+v)", *p)

}

// ============= 用户卡池抽奖信息查询 END ==============
// ============= 公告 BEGIN ==============
type CommonNoticeRequest struct {
}

func NewCommonNoticeRequest() *CommonNoticeRequest {
	return &CommonNoticeRequest{}
}

func (p *CommonNoticeRequest) InitDefault() {
}

var fieldIDToName_CommonNoticeRequest = map[int16]string{}

func (p *CommonNoticeRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommonNoticeRequest) Write(oprot thrift.TProtocol) (err error) {

	if err = oprot.WriteStructBegin("CommonNoticeRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommonNoticeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonNoticeRequest(%+v)", *p)

}

type CommonNoticeResponse struct {
	Meta       *common.Meta `thrift:"meta,1" form:"meta" json:"meta" query:"meta"`
	NoticeList []*NoticeVo  `thrift:"NoticeList,2" form:"NoticeList" json:"NoticeList" query:"NoticeList"`
}

func NewCommonNoticeResponse() *CommonNoticeResponse {
	return &CommonNoticeResponse{}
}

func (p *CommonNoticeResponse) InitDefault() {
}

var CommonNoticeResponse_Meta_DEFAULT *common.Meta

func (p *CommonNoticeResponse) GetMeta() (v *common.Meta) {
	if !p.IsSetMeta() {
		return CommonNoticeResponse_Meta_DEFAULT
	}
	return p.Meta
}

func (p *CommonNoticeResponse) GetNoticeList() (v []*NoticeVo) {
	return p.NoticeList
}

var fieldIDToName_CommonNoticeResponse = map[int16]string{
	1: "meta",
	2: "NoticeList",
}

func (p *CommonNoticeResponse) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *CommonNoticeResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommonNoticeResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommonNoticeResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := common.NewMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Meta = _field
	return nil
}
func (p *CommonNoticeResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*NoticeVo, 0, size)
	values := make([]NoticeVo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.NoticeList = _field
	return nil
}

func (p *CommonNoticeResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CommonNoticeResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommonNoticeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Meta.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommonNoticeResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NoticeList", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.NoticeList)); err != nil {
		return err
	}
	for _, v := range p.NoticeList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CommonNoticeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonNoticeResponse(%+v)", *p)

}

type NoticeVo struct {
	//公告id
	Id int64 `thrift:"Id,1" form:"Id" json:"Id" query:"Id"`
	//公告内容
	Content string `thrift:"Content,2" form:"Content" json:"Content" query:"Content"`
	//url
	Url string `thrift:"Url,3" form:"Url" json:"Url" query:"Url"`
	//uri
	Uri string `thrift:"Uri,4" form:"Uri" json:"Uri" query:"Uri"`
}

func NewNoticeVo() *NoticeVo {
	return &NoticeVo{}
}

func (p *NoticeVo) InitDefault() {
}

func (p *NoticeVo) GetId() (v int64) {
	return p.Id
}

func (p *NoticeVo) GetContent() (v string) {
	return p.Content
}

func (p *NoticeVo) GetUrl() (v string) {
	return p.Url
}

func (p *NoticeVo) GetUri() (v string) {
	return p.Uri
}

var fieldIDToName_NoticeVo = map[int16]string{
	1: "Id",
	2: "Content",
	3: "Url",
	4: "Uri",
}

func (p *NoticeVo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NoticeVo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NoticeVo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *NoticeVo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Content = _field
	return nil
}
func (p *NoticeVo) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Url = _field
	return nil
}
func (p *NoticeVo) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Uri = _field
	return nil
}

func (p *NoticeVo) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("NoticeVo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NoticeVo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NoticeVo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Content", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Content); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NoticeVo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Url", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Url); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NoticeVo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Uri", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Uri); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *NoticeVo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoticeVo(%+v)", *p)

}

// ============= 公告 END ==============
type ApiService interface {
	//**模拟对战**
	//模拟对战
	BattleDo(ctx context.Context, request *BattleDoRequest) (r *BattleDoResponse, err error)
	//模拟对战列表
	BattleList(ctx context.Context, request *BattleListRequest) (r *BattleListResponse, err error)
	//**信息查询**
	//查询战法列表
	TacticList(ctx context.Context, request *TacticListRequest) (r *TacticListResponse, err error)
	//查询武将列表
	GeneralList(ctx context.Context, request *GeneralListRequest) (r *GeneralListResponse, err error)
	//查询兵书列表
	GeneralWarBookList(ctx context.Context, request *GeneralWarBookListRequest) (r *GeneralWarBookListResponse, err error)
	//查询特技列表
	SpecialTechList(ctx context.Context, request *SpecialTechListRequest) (r *SpecialTechListResponse, err error)
	//**推荐**
	//推荐阵容列表
	RecTeamList(ctx context.Context, request *RecTeamListRequest) (r *RecTeamListResponse, err error)
	//武将推荐战法列表
	RecTacticList(ctx context.Context, request *RecTacticListRequest) (r *RecTacticListResponse, err error)
	//武将推荐兵书列表
	RecWarBookList(ctx context.Context, request *RecWarBookListRequest) (r *RecWarBookListResponse, err error)
	//武将推荐特技列表
	RecSpecialTechList(ctx context.Context, request *RecSpecialTechListRequest) (r *RecSpecialTechListResponse, err error)
	//**抽卡**
	//卡池查询
	GeneralLotteryPoolList(ctx context.Context, request *GeneralLotteryPoolListRequest) (r *GeneralLotteryPoolListResponse, err error)
	//卡池武将查询
	GeneralLotteryInfoList(ctx context.Context, request *GeneralLotteryInfoListRequest) (r *GeneralLotteryInfoListResponse, err error)
	//武将概率查询
	GeneralLotteryRateList(ctx context.Context, request *GeneralLotteryRateListRequest) (r *GeneralLotteryRateListResponse, err error)
	//武将抽卡
	GeneralLotteryDo(ctx context.Context, request *GeneralLotteryDoRequest) (r *GeneralLotteryDoResponse, err error)
	//武将抽卡列表
	GeneralLotteryList(ctx context.Context, request *GeneralLotteryListRequest) (r *GeneralLotteryListResponse, err error)
	//用户武将抽卡数据重置
	GeneralLotteryUserDataReset(ctx context.Context, request *GeneralLotteryUserDataResetRequest) (r *GeneralLotteryUserDataResetResponse, err error)
	//用户武将抽卡数据查询
	GeneralLotteryUserDataQuery(ctx context.Context, request *GeneralLotteryUserDataQueryRequest) (r *GeneralLotteryUserDataQueryResponse, err error)
	//**个人信息**
	//用户登录接口
	UserLogin(ctx context.Context, request *UserLoginRequest) (r *UserLoginResponse, err error)
	//用户信息获取接口
	UserInfoDetail(ctx context.Context, request *UserInfoDetailRequest) (r *UserInfoDetailResponse, err error)
	//**公告**
	CommonNotice(ctx context.Context, request *CommonNoticeRequest) (r *CommonNoticeResponse, err error)
	//**jym**
	//账户商品搜索
	AccountSearch(ctx context.Context, request *jym.AccountSearchRequest) (r *jym.AccountSearchResponse, err error)
}

type ApiServiceClient struct {
	c thrift.TClient
}

func NewApiServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ApiServiceClient {
	return &ApiServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewApiServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ApiServiceClient {
	return &ApiServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewApiServiceClient(c thrift.TClient) *ApiServiceClient {
	return &ApiServiceClient{
		c: c,
	}
}

func (p *ApiServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *ApiServiceClient) BattleDo(ctx context.Context, request *BattleDoRequest) (r *BattleDoResponse, err error) {
	var _args ApiServiceBattleDoArgs
	_args.Request = request
	var _result ApiServiceBattleDoResult
	if err = p.Client_().Call(ctx, "BattleDo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) BattleList(ctx context.Context, request *BattleListRequest) (r *BattleListResponse, err error) {
	var _args ApiServiceBattleListArgs
	_args.Request = request
	var _result ApiServiceBattleListResult
	if err = p.Client_().Call(ctx, "BattleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) TacticList(ctx context.Context, request *TacticListRequest) (r *TacticListResponse, err error) {
	var _args ApiServiceTacticListArgs
	_args.Request = request
	var _result ApiServiceTacticListResult
	if err = p.Client_().Call(ctx, "TacticList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) GeneralList(ctx context.Context, request *GeneralListRequest) (r *GeneralListResponse, err error) {
	var _args ApiServiceGeneralListArgs
	_args.Request = request
	var _result ApiServiceGeneralListResult
	if err = p.Client_().Call(ctx, "GeneralList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) GeneralWarBookList(ctx context.Context, request *GeneralWarBookListRequest) (r *GeneralWarBookListResponse, err error) {
	var _args ApiServiceGeneralWarBookListArgs
	_args.Request = request
	var _result ApiServiceGeneralWarBookListResult
	if err = p.Client_().Call(ctx, "GeneralWarBookList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) SpecialTechList(ctx context.Context, request *SpecialTechListRequest) (r *SpecialTechListResponse, err error) {
	var _args ApiServiceSpecialTechListArgs
	_args.Request = request
	var _result ApiServiceSpecialTechListResult
	if err = p.Client_().Call(ctx, "SpecialTechList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) RecTeamList(ctx context.Context, request *RecTeamListRequest) (r *RecTeamListResponse, err error) {
	var _args ApiServiceRecTeamListArgs
	_args.Request = request
	var _result ApiServiceRecTeamListResult
	if err = p.Client_().Call(ctx, "RecTeamList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) RecTacticList(ctx context.Context, request *RecTacticListRequest) (r *RecTacticListResponse, err error) {
	var _args ApiServiceRecTacticListArgs
	_args.Request = request
	var _result ApiServiceRecTacticListResult
	if err = p.Client_().Call(ctx, "RecTacticList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) RecWarBookList(ctx context.Context, request *RecWarBookListRequest) (r *RecWarBookListResponse, err error) {
	var _args ApiServiceRecWarBookListArgs
	_args.Request = request
	var _result ApiServiceRecWarBookListResult
	if err = p.Client_().Call(ctx, "RecWarBookList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) RecSpecialTechList(ctx context.Context, request *RecSpecialTechListRequest) (r *RecSpecialTechListResponse, err error) {
	var _args ApiServiceRecSpecialTechListArgs
	_args.Request = request
	var _result ApiServiceRecSpecialTechListResult
	if err = p.Client_().Call(ctx, "RecSpecialTechList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) GeneralLotteryPoolList(ctx context.Context, request *GeneralLotteryPoolListRequest) (r *GeneralLotteryPoolListResponse, err error) {
	var _args ApiServiceGeneralLotteryPoolListArgs
	_args.Request = request
	var _result ApiServiceGeneralLotteryPoolListResult
	if err = p.Client_().Call(ctx, "GeneralLotteryPoolList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) GeneralLotteryInfoList(ctx context.Context, request *GeneralLotteryInfoListRequest) (r *GeneralLotteryInfoListResponse, err error) {
	var _args ApiServiceGeneralLotteryInfoListArgs
	_args.Request = request
	var _result ApiServiceGeneralLotteryInfoListResult
	if err = p.Client_().Call(ctx, "GeneralLotteryInfoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) GeneralLotteryRateList(ctx context.Context, request *GeneralLotteryRateListRequest) (r *GeneralLotteryRateListResponse, err error) {
	var _args ApiServiceGeneralLotteryRateListArgs
	_args.Request = request
	var _result ApiServiceGeneralLotteryRateListResult
	if err = p.Client_().Call(ctx, "GeneralLotteryRateList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) GeneralLotteryDo(ctx context.Context, request *GeneralLotteryDoRequest) (r *GeneralLotteryDoResponse, err error) {
	var _args ApiServiceGeneralLotteryDoArgs
	_args.Request = request
	var _result ApiServiceGeneralLotteryDoResult
	if err = p.Client_().Call(ctx, "GeneralLotteryDo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) GeneralLotteryList(ctx context.Context, request *GeneralLotteryListRequest) (r *GeneralLotteryListResponse, err error) {
	var _args ApiServiceGeneralLotteryListArgs
	_args.Request = request
	var _result ApiServiceGeneralLotteryListResult
	if err = p.Client_().Call(ctx, "GeneralLotteryList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) GeneralLotteryUserDataReset(ctx context.Context, request *GeneralLotteryUserDataResetRequest) (r *GeneralLotteryUserDataResetResponse, err error) {
	var _args ApiServiceGeneralLotteryUserDataResetArgs
	_args.Request = request
	var _result ApiServiceGeneralLotteryUserDataResetResult
	if err = p.Client_().Call(ctx, "GeneralLotteryUserDataReset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) GeneralLotteryUserDataQuery(ctx context.Context, request *GeneralLotteryUserDataQueryRequest) (r *GeneralLotteryUserDataQueryResponse, err error) {
	var _args ApiServiceGeneralLotteryUserDataQueryArgs
	_args.Request = request
	var _result ApiServiceGeneralLotteryUserDataQueryResult
	if err = p.Client_().Call(ctx, "GeneralLotteryUserDataQuery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) UserLogin(ctx context.Context, request *UserLoginRequest) (r *UserLoginResponse, err error) {
	var _args ApiServiceUserLoginArgs
	_args.Request = request
	var _result ApiServiceUserLoginResult
	if err = p.Client_().Call(ctx, "UserLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) UserInfoDetail(ctx context.Context, request *UserInfoDetailRequest) (r *UserInfoDetailResponse, err error) {
	var _args ApiServiceUserInfoDetailArgs
	_args.Request = request
	var _result ApiServiceUserInfoDetailResult
	if err = p.Client_().Call(ctx, "UserInfoDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) CommonNotice(ctx context.Context, request *CommonNoticeRequest) (r *CommonNoticeResponse, err error) {
	var _args ApiServiceCommonNoticeArgs
	_args.Request = request
	var _result ApiServiceCommonNoticeResult
	if err = p.Client_().Call(ctx, "CommonNotice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ApiServiceClient) AccountSearch(ctx context.Context, request *jym.AccountSearchRequest) (r *jym.AccountSearchResponse, err error) {
	var _args ApiServiceAccountSearchArgs
	_args.Request = request
	var _result ApiServiceAccountSearchResult
	if err = p.Client_().Call(ctx, "AccountSearch", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ApiServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ApiService
}

func (p *ApiServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ApiServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ApiServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewApiServiceProcessor(handler ApiService) *ApiServiceProcessor {
	self := &ApiServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("BattleDo", &apiServiceProcessorBattleDo{handler: handler})
	self.AddToProcessorMap("BattleList", &apiServiceProcessorBattleList{handler: handler})
	self.AddToProcessorMap("TacticList", &apiServiceProcessorTacticList{handler: handler})
	self.AddToProcessorMap("GeneralList", &apiServiceProcessorGeneralList{handler: handler})
	self.AddToProcessorMap("GeneralWarBookList", &apiServiceProcessorGeneralWarBookList{handler: handler})
	self.AddToProcessorMap("SpecialTechList", &apiServiceProcessorSpecialTechList{handler: handler})
	self.AddToProcessorMap("RecTeamList", &apiServiceProcessorRecTeamList{handler: handler})
	self.AddToProcessorMap("RecTacticList", &apiServiceProcessorRecTacticList{handler: handler})
	self.AddToProcessorMap("RecWarBookList", &apiServiceProcessorRecWarBookList{handler: handler})
	self.AddToProcessorMap("RecSpecialTechList", &apiServiceProcessorRecSpecialTechList{handler: handler})
	self.AddToProcessorMap("GeneralLotteryPoolList", &apiServiceProcessorGeneralLotteryPoolList{handler: handler})
	self.AddToProcessorMap("GeneralLotteryInfoList", &apiServiceProcessorGeneralLotteryInfoList{handler: handler})
	self.AddToProcessorMap("GeneralLotteryRateList", &apiServiceProcessorGeneralLotteryRateList{handler: handler})
	self.AddToProcessorMap("GeneralLotteryDo", &apiServiceProcessorGeneralLotteryDo{handler: handler})
	self.AddToProcessorMap("GeneralLotteryList", &apiServiceProcessorGeneralLotteryList{handler: handler})
	self.AddToProcessorMap("GeneralLotteryUserDataReset", &apiServiceProcessorGeneralLotteryUserDataReset{handler: handler})
	self.AddToProcessorMap("GeneralLotteryUserDataQuery", &apiServiceProcessorGeneralLotteryUserDataQuery{handler: handler})
	self.AddToProcessorMap("UserLogin", &apiServiceProcessorUserLogin{handler: handler})
	self.AddToProcessorMap("UserInfoDetail", &apiServiceProcessorUserInfoDetail{handler: handler})
	self.AddToProcessorMap("CommonNotice", &apiServiceProcessorCommonNotice{handler: handler})
	self.AddToProcessorMap("AccountSearch", &apiServiceProcessorAccountSearch{handler: handler})
	return self
}
func (p *ApiServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type apiServiceProcessorBattleDo struct {
	handler ApiService
}

func (p *apiServiceProcessorBattleDo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceBattleDoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BattleDo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceBattleDoResult{}
	var retval *BattleDoResponse
	if retval, err2 = p.handler.BattleDo(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BattleDo: "+err2.Error())
		oprot.WriteMessageBegin("BattleDo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BattleDo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorBattleList struct {
	handler ApiService
}

func (p *apiServiceProcessorBattleList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceBattleListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BattleList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceBattleListResult{}
	var retval *BattleListResponse
	if retval, err2 = p.handler.BattleList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BattleList: "+err2.Error())
		oprot.WriteMessageBegin("BattleList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BattleList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorTacticList struct {
	handler ApiService
}

func (p *apiServiceProcessorTacticList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceTacticListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("TacticList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceTacticListResult{}
	var retval *TacticListResponse
	if retval, err2 = p.handler.TacticList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TacticList: "+err2.Error())
		oprot.WriteMessageBegin("TacticList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("TacticList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorGeneralList struct {
	handler ApiService
}

func (p *apiServiceProcessorGeneralList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceGeneralListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GeneralList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceGeneralListResult{}
	var retval *GeneralListResponse
	if retval, err2 = p.handler.GeneralList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GeneralList: "+err2.Error())
		oprot.WriteMessageBegin("GeneralList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GeneralList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorGeneralWarBookList struct {
	handler ApiService
}

func (p *apiServiceProcessorGeneralWarBookList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceGeneralWarBookListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GeneralWarBookList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceGeneralWarBookListResult{}
	var retval *GeneralWarBookListResponse
	if retval, err2 = p.handler.GeneralWarBookList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GeneralWarBookList: "+err2.Error())
		oprot.WriteMessageBegin("GeneralWarBookList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GeneralWarBookList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorSpecialTechList struct {
	handler ApiService
}

func (p *apiServiceProcessorSpecialTechList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceSpecialTechListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SpecialTechList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceSpecialTechListResult{}
	var retval *SpecialTechListResponse
	if retval, err2 = p.handler.SpecialTechList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SpecialTechList: "+err2.Error())
		oprot.WriteMessageBegin("SpecialTechList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SpecialTechList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorRecTeamList struct {
	handler ApiService
}

func (p *apiServiceProcessorRecTeamList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceRecTeamListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RecTeamList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceRecTeamListResult{}
	var retval *RecTeamListResponse
	if retval, err2 = p.handler.RecTeamList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RecTeamList: "+err2.Error())
		oprot.WriteMessageBegin("RecTeamList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RecTeamList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorRecTacticList struct {
	handler ApiService
}

func (p *apiServiceProcessorRecTacticList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceRecTacticListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RecTacticList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceRecTacticListResult{}
	var retval *RecTacticListResponse
	if retval, err2 = p.handler.RecTacticList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RecTacticList: "+err2.Error())
		oprot.WriteMessageBegin("RecTacticList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RecTacticList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorRecWarBookList struct {
	handler ApiService
}

func (p *apiServiceProcessorRecWarBookList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceRecWarBookListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RecWarBookList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceRecWarBookListResult{}
	var retval *RecWarBookListResponse
	if retval, err2 = p.handler.RecWarBookList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RecWarBookList: "+err2.Error())
		oprot.WriteMessageBegin("RecWarBookList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RecWarBookList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorRecSpecialTechList struct {
	handler ApiService
}

func (p *apiServiceProcessorRecSpecialTechList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceRecSpecialTechListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RecSpecialTechList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceRecSpecialTechListResult{}
	var retval *RecSpecialTechListResponse
	if retval, err2 = p.handler.RecSpecialTechList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RecSpecialTechList: "+err2.Error())
		oprot.WriteMessageBegin("RecSpecialTechList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RecSpecialTechList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorGeneralLotteryPoolList struct {
	handler ApiService
}

func (p *apiServiceProcessorGeneralLotteryPoolList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceGeneralLotteryPoolListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GeneralLotteryPoolList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceGeneralLotteryPoolListResult{}
	var retval *GeneralLotteryPoolListResponse
	if retval, err2 = p.handler.GeneralLotteryPoolList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GeneralLotteryPoolList: "+err2.Error())
		oprot.WriteMessageBegin("GeneralLotteryPoolList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GeneralLotteryPoolList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorGeneralLotteryInfoList struct {
	handler ApiService
}

func (p *apiServiceProcessorGeneralLotteryInfoList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceGeneralLotteryInfoListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GeneralLotteryInfoList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceGeneralLotteryInfoListResult{}
	var retval *GeneralLotteryInfoListResponse
	if retval, err2 = p.handler.GeneralLotteryInfoList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GeneralLotteryInfoList: "+err2.Error())
		oprot.WriteMessageBegin("GeneralLotteryInfoList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GeneralLotteryInfoList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorGeneralLotteryRateList struct {
	handler ApiService
}

func (p *apiServiceProcessorGeneralLotteryRateList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceGeneralLotteryRateListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GeneralLotteryRateList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceGeneralLotteryRateListResult{}
	var retval *GeneralLotteryRateListResponse
	if retval, err2 = p.handler.GeneralLotteryRateList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GeneralLotteryRateList: "+err2.Error())
		oprot.WriteMessageBegin("GeneralLotteryRateList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GeneralLotteryRateList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorGeneralLotteryDo struct {
	handler ApiService
}

func (p *apiServiceProcessorGeneralLotteryDo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceGeneralLotteryDoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GeneralLotteryDo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceGeneralLotteryDoResult{}
	var retval *GeneralLotteryDoResponse
	if retval, err2 = p.handler.GeneralLotteryDo(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GeneralLotteryDo: "+err2.Error())
		oprot.WriteMessageBegin("GeneralLotteryDo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GeneralLotteryDo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorGeneralLotteryList struct {
	handler ApiService
}

func (p *apiServiceProcessorGeneralLotteryList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceGeneralLotteryListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GeneralLotteryList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceGeneralLotteryListResult{}
	var retval *GeneralLotteryListResponse
	if retval, err2 = p.handler.GeneralLotteryList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GeneralLotteryList: "+err2.Error())
		oprot.WriteMessageBegin("GeneralLotteryList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GeneralLotteryList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorGeneralLotteryUserDataReset struct {
	handler ApiService
}

func (p *apiServiceProcessorGeneralLotteryUserDataReset) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceGeneralLotteryUserDataResetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GeneralLotteryUserDataReset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceGeneralLotteryUserDataResetResult{}
	var retval *GeneralLotteryUserDataResetResponse
	if retval, err2 = p.handler.GeneralLotteryUserDataReset(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GeneralLotteryUserDataReset: "+err2.Error())
		oprot.WriteMessageBegin("GeneralLotteryUserDataReset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GeneralLotteryUserDataReset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorGeneralLotteryUserDataQuery struct {
	handler ApiService
}

func (p *apiServiceProcessorGeneralLotteryUserDataQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceGeneralLotteryUserDataQueryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GeneralLotteryUserDataQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceGeneralLotteryUserDataQueryResult{}
	var retval *GeneralLotteryUserDataQueryResponse
	if retval, err2 = p.handler.GeneralLotteryUserDataQuery(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GeneralLotteryUserDataQuery: "+err2.Error())
		oprot.WriteMessageBegin("GeneralLotteryUserDataQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GeneralLotteryUserDataQuery", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorUserLogin struct {
	handler ApiService
}

func (p *apiServiceProcessorUserLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceUserLoginArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UserLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceUserLoginResult{}
	var retval *UserLoginResponse
	if retval, err2 = p.handler.UserLogin(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserLogin: "+err2.Error())
		oprot.WriteMessageBegin("UserLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UserLogin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorUserInfoDetail struct {
	handler ApiService
}

func (p *apiServiceProcessorUserInfoDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceUserInfoDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UserInfoDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceUserInfoDetailResult{}
	var retval *UserInfoDetailResponse
	if retval, err2 = p.handler.UserInfoDetail(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserInfoDetail: "+err2.Error())
		oprot.WriteMessageBegin("UserInfoDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UserInfoDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorCommonNotice struct {
	handler ApiService
}

func (p *apiServiceProcessorCommonNotice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceCommonNoticeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CommonNotice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceCommonNoticeResult{}
	var retval *CommonNoticeResponse
	if retval, err2 = p.handler.CommonNotice(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CommonNotice: "+err2.Error())
		oprot.WriteMessageBegin("CommonNotice", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CommonNotice", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type apiServiceProcessorAccountSearch struct {
	handler ApiService
}

func (p *apiServiceProcessorAccountSearch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApiServiceAccountSearchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AccountSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ApiServiceAccountSearchResult{}
	var retval *jym.AccountSearchResponse
	if retval, err2 = p.handler.AccountSearch(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AccountSearch: "+err2.Error())
		oprot.WriteMessageBegin("AccountSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AccountSearch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ApiServiceBattleDoArgs struct {
	Request *BattleDoRequest `thrift:"request,1"`
}

func NewApiServiceBattleDoArgs() *ApiServiceBattleDoArgs {
	return &ApiServiceBattleDoArgs{}
}

func (p *ApiServiceBattleDoArgs) InitDefault() {
}

var ApiServiceBattleDoArgs_Request_DEFAULT *BattleDoRequest

func (p *ApiServiceBattleDoArgs) GetRequest() (v *BattleDoRequest) {
	if !p.IsSetRequest() {
		return ApiServiceBattleDoArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceBattleDoArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceBattleDoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceBattleDoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceBattleDoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceBattleDoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBattleDoRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceBattleDoArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("BattleDo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceBattleDoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceBattleDoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceBattleDoArgs(%+v)", *p)

}

type ApiServiceBattleDoResult struct {
	Success *BattleDoResponse `thrift:"success,0,optional"`
}

func NewApiServiceBattleDoResult() *ApiServiceBattleDoResult {
	return &ApiServiceBattleDoResult{}
}

func (p *ApiServiceBattleDoResult) InitDefault() {
}

var ApiServiceBattleDoResult_Success_DEFAULT *BattleDoResponse

func (p *ApiServiceBattleDoResult) GetSuccess() (v *BattleDoResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceBattleDoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceBattleDoResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceBattleDoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceBattleDoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceBattleDoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceBattleDoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBattleDoResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceBattleDoResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("BattleDo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceBattleDoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceBattleDoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceBattleDoResult(%+v)", *p)

}

type ApiServiceBattleListArgs struct {
	Request *BattleListRequest `thrift:"request,1"`
}

func NewApiServiceBattleListArgs() *ApiServiceBattleListArgs {
	return &ApiServiceBattleListArgs{}
}

func (p *ApiServiceBattleListArgs) InitDefault() {
}

var ApiServiceBattleListArgs_Request_DEFAULT *BattleListRequest

func (p *ApiServiceBattleListArgs) GetRequest() (v *BattleListRequest) {
	if !p.IsSetRequest() {
		return ApiServiceBattleListArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceBattleListArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceBattleListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceBattleListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceBattleListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceBattleListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBattleListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceBattleListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("BattleList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceBattleListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceBattleListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceBattleListArgs(%+v)", *p)

}

type ApiServiceBattleListResult struct {
	Success *BattleListResponse `thrift:"success,0,optional"`
}

func NewApiServiceBattleListResult() *ApiServiceBattleListResult {
	return &ApiServiceBattleListResult{}
}

func (p *ApiServiceBattleListResult) InitDefault() {
}

var ApiServiceBattleListResult_Success_DEFAULT *BattleListResponse

func (p *ApiServiceBattleListResult) GetSuccess() (v *BattleListResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceBattleListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceBattleListResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceBattleListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceBattleListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceBattleListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceBattleListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBattleListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceBattleListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("BattleList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceBattleListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceBattleListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceBattleListResult(%+v)", *p)

}

type ApiServiceTacticListArgs struct {
	Request *TacticListRequest `thrift:"request,1"`
}

func NewApiServiceTacticListArgs() *ApiServiceTacticListArgs {
	return &ApiServiceTacticListArgs{}
}

func (p *ApiServiceTacticListArgs) InitDefault() {
}

var ApiServiceTacticListArgs_Request_DEFAULT *TacticListRequest

func (p *ApiServiceTacticListArgs) GetRequest() (v *TacticListRequest) {
	if !p.IsSetRequest() {
		return ApiServiceTacticListArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceTacticListArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceTacticListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceTacticListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceTacticListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceTacticListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewTacticListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceTacticListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("TacticList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceTacticListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceTacticListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceTacticListArgs(%+v)", *p)

}

type ApiServiceTacticListResult struct {
	Success *TacticListResponse `thrift:"success,0,optional"`
}

func NewApiServiceTacticListResult() *ApiServiceTacticListResult {
	return &ApiServiceTacticListResult{}
}

func (p *ApiServiceTacticListResult) InitDefault() {
}

var ApiServiceTacticListResult_Success_DEFAULT *TacticListResponse

func (p *ApiServiceTacticListResult) GetSuccess() (v *TacticListResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceTacticListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceTacticListResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceTacticListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceTacticListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceTacticListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceTacticListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewTacticListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceTacticListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("TacticList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceTacticListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceTacticListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceTacticListResult(%+v)", *p)

}

type ApiServiceGeneralListArgs struct {
	Request *GeneralListRequest `thrift:"request,1"`
}

func NewApiServiceGeneralListArgs() *ApiServiceGeneralListArgs {
	return &ApiServiceGeneralListArgs{}
}

func (p *ApiServiceGeneralListArgs) InitDefault() {
}

var ApiServiceGeneralListArgs_Request_DEFAULT *GeneralListRequest

func (p *ApiServiceGeneralListArgs) GetRequest() (v *GeneralListRequest) {
	if !p.IsSetRequest() {
		return ApiServiceGeneralListArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceGeneralListArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceGeneralListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceGeneralListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceGeneralListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceGeneralListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGeneralListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceGeneralListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceGeneralListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceGeneralListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceGeneralListArgs(%+v)", *p)

}

type ApiServiceGeneralListResult struct {
	Success *GeneralListResponse `thrift:"success,0,optional"`
}

func NewApiServiceGeneralListResult() *ApiServiceGeneralListResult {
	return &ApiServiceGeneralListResult{}
}

func (p *ApiServiceGeneralListResult) InitDefault() {
}

var ApiServiceGeneralListResult_Success_DEFAULT *GeneralListResponse

func (p *ApiServiceGeneralListResult) GetSuccess() (v *GeneralListResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceGeneralListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceGeneralListResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceGeneralListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceGeneralListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceGeneralListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceGeneralListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGeneralListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceGeneralListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceGeneralListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceGeneralListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceGeneralListResult(%+v)", *p)

}

type ApiServiceGeneralWarBookListArgs struct {
	Request *GeneralWarBookListRequest `thrift:"request,1"`
}

func NewApiServiceGeneralWarBookListArgs() *ApiServiceGeneralWarBookListArgs {
	return &ApiServiceGeneralWarBookListArgs{}
}

func (p *ApiServiceGeneralWarBookListArgs) InitDefault() {
}

var ApiServiceGeneralWarBookListArgs_Request_DEFAULT *GeneralWarBookListRequest

func (p *ApiServiceGeneralWarBookListArgs) GetRequest() (v *GeneralWarBookListRequest) {
	if !p.IsSetRequest() {
		return ApiServiceGeneralWarBookListArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceGeneralWarBookListArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceGeneralWarBookListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceGeneralWarBookListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceGeneralWarBookListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceGeneralWarBookListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGeneralWarBookListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceGeneralWarBookListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralWarBookList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceGeneralWarBookListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceGeneralWarBookListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceGeneralWarBookListArgs(%+v)", *p)

}

type ApiServiceGeneralWarBookListResult struct {
	Success *GeneralWarBookListResponse `thrift:"success,0,optional"`
}

func NewApiServiceGeneralWarBookListResult() *ApiServiceGeneralWarBookListResult {
	return &ApiServiceGeneralWarBookListResult{}
}

func (p *ApiServiceGeneralWarBookListResult) InitDefault() {
}

var ApiServiceGeneralWarBookListResult_Success_DEFAULT *GeneralWarBookListResponse

func (p *ApiServiceGeneralWarBookListResult) GetSuccess() (v *GeneralWarBookListResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceGeneralWarBookListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceGeneralWarBookListResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceGeneralWarBookListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceGeneralWarBookListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceGeneralWarBookListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceGeneralWarBookListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGeneralWarBookListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceGeneralWarBookListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralWarBookList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceGeneralWarBookListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceGeneralWarBookListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceGeneralWarBookListResult(%+v)", *p)

}

type ApiServiceSpecialTechListArgs struct {
	Request *SpecialTechListRequest `thrift:"request,1"`
}

func NewApiServiceSpecialTechListArgs() *ApiServiceSpecialTechListArgs {
	return &ApiServiceSpecialTechListArgs{}
}

func (p *ApiServiceSpecialTechListArgs) InitDefault() {
}

var ApiServiceSpecialTechListArgs_Request_DEFAULT *SpecialTechListRequest

func (p *ApiServiceSpecialTechListArgs) GetRequest() (v *SpecialTechListRequest) {
	if !p.IsSetRequest() {
		return ApiServiceSpecialTechListArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceSpecialTechListArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceSpecialTechListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceSpecialTechListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceSpecialTechListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceSpecialTechListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSpecialTechListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceSpecialTechListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("SpecialTechList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceSpecialTechListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceSpecialTechListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceSpecialTechListArgs(%+v)", *p)

}

type ApiServiceSpecialTechListResult struct {
	Success *SpecialTechListResponse `thrift:"success,0,optional"`
}

func NewApiServiceSpecialTechListResult() *ApiServiceSpecialTechListResult {
	return &ApiServiceSpecialTechListResult{}
}

func (p *ApiServiceSpecialTechListResult) InitDefault() {
}

var ApiServiceSpecialTechListResult_Success_DEFAULT *SpecialTechListResponse

func (p *ApiServiceSpecialTechListResult) GetSuccess() (v *SpecialTechListResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceSpecialTechListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceSpecialTechListResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceSpecialTechListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceSpecialTechListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceSpecialTechListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceSpecialTechListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSpecialTechListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceSpecialTechListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("SpecialTechList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceSpecialTechListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceSpecialTechListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceSpecialTechListResult(%+v)", *p)

}

type ApiServiceRecTeamListArgs struct {
	Request *RecTeamListRequest `thrift:"request,1"`
}

func NewApiServiceRecTeamListArgs() *ApiServiceRecTeamListArgs {
	return &ApiServiceRecTeamListArgs{}
}

func (p *ApiServiceRecTeamListArgs) InitDefault() {
}

var ApiServiceRecTeamListArgs_Request_DEFAULT *RecTeamListRequest

func (p *ApiServiceRecTeamListArgs) GetRequest() (v *RecTeamListRequest) {
	if !p.IsSetRequest() {
		return ApiServiceRecTeamListArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceRecTeamListArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceRecTeamListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceRecTeamListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceRecTeamListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceRecTeamListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRecTeamListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceRecTeamListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RecTeamList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceRecTeamListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceRecTeamListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceRecTeamListArgs(%+v)", *p)

}

type ApiServiceRecTeamListResult struct {
	Success *RecTeamListResponse `thrift:"success,0,optional"`
}

func NewApiServiceRecTeamListResult() *ApiServiceRecTeamListResult {
	return &ApiServiceRecTeamListResult{}
}

func (p *ApiServiceRecTeamListResult) InitDefault() {
}

var ApiServiceRecTeamListResult_Success_DEFAULT *RecTeamListResponse

func (p *ApiServiceRecTeamListResult) GetSuccess() (v *RecTeamListResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceRecTeamListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceRecTeamListResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceRecTeamListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceRecTeamListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceRecTeamListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceRecTeamListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRecTeamListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceRecTeamListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RecTeamList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceRecTeamListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceRecTeamListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceRecTeamListResult(%+v)", *p)

}

type ApiServiceRecTacticListArgs struct {
	Request *RecTacticListRequest `thrift:"request,1"`
}

func NewApiServiceRecTacticListArgs() *ApiServiceRecTacticListArgs {
	return &ApiServiceRecTacticListArgs{}
}

func (p *ApiServiceRecTacticListArgs) InitDefault() {
}

var ApiServiceRecTacticListArgs_Request_DEFAULT *RecTacticListRequest

func (p *ApiServiceRecTacticListArgs) GetRequest() (v *RecTacticListRequest) {
	if !p.IsSetRequest() {
		return ApiServiceRecTacticListArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceRecTacticListArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceRecTacticListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceRecTacticListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceRecTacticListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceRecTacticListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRecTacticListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceRecTacticListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RecTacticList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceRecTacticListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceRecTacticListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceRecTacticListArgs(%+v)", *p)

}

type ApiServiceRecTacticListResult struct {
	Success *RecTacticListResponse `thrift:"success,0,optional"`
}

func NewApiServiceRecTacticListResult() *ApiServiceRecTacticListResult {
	return &ApiServiceRecTacticListResult{}
}

func (p *ApiServiceRecTacticListResult) InitDefault() {
}

var ApiServiceRecTacticListResult_Success_DEFAULT *RecTacticListResponse

func (p *ApiServiceRecTacticListResult) GetSuccess() (v *RecTacticListResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceRecTacticListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceRecTacticListResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceRecTacticListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceRecTacticListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceRecTacticListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceRecTacticListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRecTacticListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceRecTacticListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RecTacticList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceRecTacticListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceRecTacticListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceRecTacticListResult(%+v)", *p)

}

type ApiServiceRecWarBookListArgs struct {
	Request *RecWarBookListRequest `thrift:"request,1"`
}

func NewApiServiceRecWarBookListArgs() *ApiServiceRecWarBookListArgs {
	return &ApiServiceRecWarBookListArgs{}
}

func (p *ApiServiceRecWarBookListArgs) InitDefault() {
}

var ApiServiceRecWarBookListArgs_Request_DEFAULT *RecWarBookListRequest

func (p *ApiServiceRecWarBookListArgs) GetRequest() (v *RecWarBookListRequest) {
	if !p.IsSetRequest() {
		return ApiServiceRecWarBookListArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceRecWarBookListArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceRecWarBookListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceRecWarBookListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceRecWarBookListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceRecWarBookListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRecWarBookListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceRecWarBookListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RecWarBookList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceRecWarBookListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceRecWarBookListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceRecWarBookListArgs(%+v)", *p)

}

type ApiServiceRecWarBookListResult struct {
	Success *RecWarBookListResponse `thrift:"success,0,optional"`
}

func NewApiServiceRecWarBookListResult() *ApiServiceRecWarBookListResult {
	return &ApiServiceRecWarBookListResult{}
}

func (p *ApiServiceRecWarBookListResult) InitDefault() {
}

var ApiServiceRecWarBookListResult_Success_DEFAULT *RecWarBookListResponse

func (p *ApiServiceRecWarBookListResult) GetSuccess() (v *RecWarBookListResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceRecWarBookListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceRecWarBookListResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceRecWarBookListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceRecWarBookListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceRecWarBookListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceRecWarBookListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRecWarBookListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceRecWarBookListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RecWarBookList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceRecWarBookListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceRecWarBookListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceRecWarBookListResult(%+v)", *p)

}

type ApiServiceRecSpecialTechListArgs struct {
	Request *RecSpecialTechListRequest `thrift:"request,1"`
}

func NewApiServiceRecSpecialTechListArgs() *ApiServiceRecSpecialTechListArgs {
	return &ApiServiceRecSpecialTechListArgs{}
}

func (p *ApiServiceRecSpecialTechListArgs) InitDefault() {
}

var ApiServiceRecSpecialTechListArgs_Request_DEFAULT *RecSpecialTechListRequest

func (p *ApiServiceRecSpecialTechListArgs) GetRequest() (v *RecSpecialTechListRequest) {
	if !p.IsSetRequest() {
		return ApiServiceRecSpecialTechListArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceRecSpecialTechListArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceRecSpecialTechListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceRecSpecialTechListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceRecSpecialTechListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceRecSpecialTechListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRecSpecialTechListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceRecSpecialTechListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RecSpecialTechList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceRecSpecialTechListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceRecSpecialTechListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceRecSpecialTechListArgs(%+v)", *p)

}

type ApiServiceRecSpecialTechListResult struct {
	Success *RecSpecialTechListResponse `thrift:"success,0,optional"`
}

func NewApiServiceRecSpecialTechListResult() *ApiServiceRecSpecialTechListResult {
	return &ApiServiceRecSpecialTechListResult{}
}

func (p *ApiServiceRecSpecialTechListResult) InitDefault() {
}

var ApiServiceRecSpecialTechListResult_Success_DEFAULT *RecSpecialTechListResponse

func (p *ApiServiceRecSpecialTechListResult) GetSuccess() (v *RecSpecialTechListResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceRecSpecialTechListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceRecSpecialTechListResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceRecSpecialTechListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceRecSpecialTechListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceRecSpecialTechListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceRecSpecialTechListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRecSpecialTechListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceRecSpecialTechListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("RecSpecialTechList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceRecSpecialTechListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceRecSpecialTechListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceRecSpecialTechListResult(%+v)", *p)

}

type ApiServiceGeneralLotteryPoolListArgs struct {
	Request *GeneralLotteryPoolListRequest `thrift:"request,1"`
}

func NewApiServiceGeneralLotteryPoolListArgs() *ApiServiceGeneralLotteryPoolListArgs {
	return &ApiServiceGeneralLotteryPoolListArgs{}
}

func (p *ApiServiceGeneralLotteryPoolListArgs) InitDefault() {
}

var ApiServiceGeneralLotteryPoolListArgs_Request_DEFAULT *GeneralLotteryPoolListRequest

func (p *ApiServiceGeneralLotteryPoolListArgs) GetRequest() (v *GeneralLotteryPoolListRequest) {
	if !p.IsSetRequest() {
		return ApiServiceGeneralLotteryPoolListArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceGeneralLotteryPoolListArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceGeneralLotteryPoolListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceGeneralLotteryPoolListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceGeneralLotteryPoolListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryPoolListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGeneralLotteryPoolListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceGeneralLotteryPoolListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryPoolList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryPoolListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryPoolListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceGeneralLotteryPoolListArgs(%+v)", *p)

}

type ApiServiceGeneralLotteryPoolListResult struct {
	Success *GeneralLotteryPoolListResponse `thrift:"success,0,optional"`
}

func NewApiServiceGeneralLotteryPoolListResult() *ApiServiceGeneralLotteryPoolListResult {
	return &ApiServiceGeneralLotteryPoolListResult{}
}

func (p *ApiServiceGeneralLotteryPoolListResult) InitDefault() {
}

var ApiServiceGeneralLotteryPoolListResult_Success_DEFAULT *GeneralLotteryPoolListResponse

func (p *ApiServiceGeneralLotteryPoolListResult) GetSuccess() (v *GeneralLotteryPoolListResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceGeneralLotteryPoolListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceGeneralLotteryPoolListResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceGeneralLotteryPoolListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceGeneralLotteryPoolListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceGeneralLotteryPoolListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryPoolListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGeneralLotteryPoolListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceGeneralLotteryPoolListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryPoolList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryPoolListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryPoolListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceGeneralLotteryPoolListResult(%+v)", *p)

}

type ApiServiceGeneralLotteryInfoListArgs struct {
	Request *GeneralLotteryInfoListRequest `thrift:"request,1"`
}

func NewApiServiceGeneralLotteryInfoListArgs() *ApiServiceGeneralLotteryInfoListArgs {
	return &ApiServiceGeneralLotteryInfoListArgs{}
}

func (p *ApiServiceGeneralLotteryInfoListArgs) InitDefault() {
}

var ApiServiceGeneralLotteryInfoListArgs_Request_DEFAULT *GeneralLotteryInfoListRequest

func (p *ApiServiceGeneralLotteryInfoListArgs) GetRequest() (v *GeneralLotteryInfoListRequest) {
	if !p.IsSetRequest() {
		return ApiServiceGeneralLotteryInfoListArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceGeneralLotteryInfoListArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceGeneralLotteryInfoListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceGeneralLotteryInfoListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceGeneralLotteryInfoListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryInfoListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGeneralLotteryInfoListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceGeneralLotteryInfoListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryInfoList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryInfoListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryInfoListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceGeneralLotteryInfoListArgs(%+v)", *p)

}

type ApiServiceGeneralLotteryInfoListResult struct {
	Success *GeneralLotteryInfoListResponse `thrift:"success,0,optional"`
}

func NewApiServiceGeneralLotteryInfoListResult() *ApiServiceGeneralLotteryInfoListResult {
	return &ApiServiceGeneralLotteryInfoListResult{}
}

func (p *ApiServiceGeneralLotteryInfoListResult) InitDefault() {
}

var ApiServiceGeneralLotteryInfoListResult_Success_DEFAULT *GeneralLotteryInfoListResponse

func (p *ApiServiceGeneralLotteryInfoListResult) GetSuccess() (v *GeneralLotteryInfoListResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceGeneralLotteryInfoListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceGeneralLotteryInfoListResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceGeneralLotteryInfoListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceGeneralLotteryInfoListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceGeneralLotteryInfoListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryInfoListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGeneralLotteryInfoListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceGeneralLotteryInfoListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryInfoList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryInfoListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryInfoListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceGeneralLotteryInfoListResult(%+v)", *p)

}

type ApiServiceGeneralLotteryRateListArgs struct {
	Request *GeneralLotteryRateListRequest `thrift:"request,1"`
}

func NewApiServiceGeneralLotteryRateListArgs() *ApiServiceGeneralLotteryRateListArgs {
	return &ApiServiceGeneralLotteryRateListArgs{}
}

func (p *ApiServiceGeneralLotteryRateListArgs) InitDefault() {
}

var ApiServiceGeneralLotteryRateListArgs_Request_DEFAULT *GeneralLotteryRateListRequest

func (p *ApiServiceGeneralLotteryRateListArgs) GetRequest() (v *GeneralLotteryRateListRequest) {
	if !p.IsSetRequest() {
		return ApiServiceGeneralLotteryRateListArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceGeneralLotteryRateListArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceGeneralLotteryRateListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceGeneralLotteryRateListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceGeneralLotteryRateListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryRateListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGeneralLotteryRateListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceGeneralLotteryRateListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryRateList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryRateListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryRateListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceGeneralLotteryRateListArgs(%+v)", *p)

}

type ApiServiceGeneralLotteryRateListResult struct {
	Success *GeneralLotteryRateListResponse `thrift:"success,0,optional"`
}

func NewApiServiceGeneralLotteryRateListResult() *ApiServiceGeneralLotteryRateListResult {
	return &ApiServiceGeneralLotteryRateListResult{}
}

func (p *ApiServiceGeneralLotteryRateListResult) InitDefault() {
}

var ApiServiceGeneralLotteryRateListResult_Success_DEFAULT *GeneralLotteryRateListResponse

func (p *ApiServiceGeneralLotteryRateListResult) GetSuccess() (v *GeneralLotteryRateListResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceGeneralLotteryRateListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceGeneralLotteryRateListResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceGeneralLotteryRateListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceGeneralLotteryRateListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceGeneralLotteryRateListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryRateListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGeneralLotteryRateListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceGeneralLotteryRateListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryRateList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryRateListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryRateListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceGeneralLotteryRateListResult(%+v)", *p)

}

type ApiServiceGeneralLotteryDoArgs struct {
	Request *GeneralLotteryDoRequest `thrift:"request,1"`
}

func NewApiServiceGeneralLotteryDoArgs() *ApiServiceGeneralLotteryDoArgs {
	return &ApiServiceGeneralLotteryDoArgs{}
}

func (p *ApiServiceGeneralLotteryDoArgs) InitDefault() {
}

var ApiServiceGeneralLotteryDoArgs_Request_DEFAULT *GeneralLotteryDoRequest

func (p *ApiServiceGeneralLotteryDoArgs) GetRequest() (v *GeneralLotteryDoRequest) {
	if !p.IsSetRequest() {
		return ApiServiceGeneralLotteryDoArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceGeneralLotteryDoArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceGeneralLotteryDoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceGeneralLotteryDoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceGeneralLotteryDoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryDoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGeneralLotteryDoRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceGeneralLotteryDoArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryDo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryDoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryDoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceGeneralLotteryDoArgs(%+v)", *p)

}

type ApiServiceGeneralLotteryDoResult struct {
	Success *GeneralLotteryDoResponse `thrift:"success,0,optional"`
}

func NewApiServiceGeneralLotteryDoResult() *ApiServiceGeneralLotteryDoResult {
	return &ApiServiceGeneralLotteryDoResult{}
}

func (p *ApiServiceGeneralLotteryDoResult) InitDefault() {
}

var ApiServiceGeneralLotteryDoResult_Success_DEFAULT *GeneralLotteryDoResponse

func (p *ApiServiceGeneralLotteryDoResult) GetSuccess() (v *GeneralLotteryDoResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceGeneralLotteryDoResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceGeneralLotteryDoResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceGeneralLotteryDoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceGeneralLotteryDoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceGeneralLotteryDoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryDoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGeneralLotteryDoResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceGeneralLotteryDoResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryDo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryDoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryDoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceGeneralLotteryDoResult(%+v)", *p)

}

type ApiServiceGeneralLotteryListArgs struct {
	Request *GeneralLotteryListRequest `thrift:"request,1"`
}

func NewApiServiceGeneralLotteryListArgs() *ApiServiceGeneralLotteryListArgs {
	return &ApiServiceGeneralLotteryListArgs{}
}

func (p *ApiServiceGeneralLotteryListArgs) InitDefault() {
}

var ApiServiceGeneralLotteryListArgs_Request_DEFAULT *GeneralLotteryListRequest

func (p *ApiServiceGeneralLotteryListArgs) GetRequest() (v *GeneralLotteryListRequest) {
	if !p.IsSetRequest() {
		return ApiServiceGeneralLotteryListArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceGeneralLotteryListArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceGeneralLotteryListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceGeneralLotteryListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceGeneralLotteryListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryListArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGeneralLotteryListRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceGeneralLotteryListArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceGeneralLotteryListArgs(%+v)", *p)

}

type ApiServiceGeneralLotteryListResult struct {
	Success *GeneralLotteryListResponse `thrift:"success,0,optional"`
}

func NewApiServiceGeneralLotteryListResult() *ApiServiceGeneralLotteryListResult {
	return &ApiServiceGeneralLotteryListResult{}
}

func (p *ApiServiceGeneralLotteryListResult) InitDefault() {
}

var ApiServiceGeneralLotteryListResult_Success_DEFAULT *GeneralLotteryListResponse

func (p *ApiServiceGeneralLotteryListResult) GetSuccess() (v *GeneralLotteryListResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceGeneralLotteryListResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceGeneralLotteryListResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceGeneralLotteryListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceGeneralLotteryListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceGeneralLotteryListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryListResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGeneralLotteryListResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceGeneralLotteryListResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceGeneralLotteryListResult(%+v)", *p)

}

type ApiServiceGeneralLotteryUserDataResetArgs struct {
	Request *GeneralLotteryUserDataResetRequest `thrift:"request,1"`
}

func NewApiServiceGeneralLotteryUserDataResetArgs() *ApiServiceGeneralLotteryUserDataResetArgs {
	return &ApiServiceGeneralLotteryUserDataResetArgs{}
}

func (p *ApiServiceGeneralLotteryUserDataResetArgs) InitDefault() {
}

var ApiServiceGeneralLotteryUserDataResetArgs_Request_DEFAULT *GeneralLotteryUserDataResetRequest

func (p *ApiServiceGeneralLotteryUserDataResetArgs) GetRequest() (v *GeneralLotteryUserDataResetRequest) {
	if !p.IsSetRequest() {
		return ApiServiceGeneralLotteryUserDataResetArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceGeneralLotteryUserDataResetArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceGeneralLotteryUserDataResetArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceGeneralLotteryUserDataResetArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceGeneralLotteryUserDataResetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryUserDataResetArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGeneralLotteryUserDataResetRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceGeneralLotteryUserDataResetArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryUserDataReset_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryUserDataResetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryUserDataResetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceGeneralLotteryUserDataResetArgs(%+v)", *p)

}

type ApiServiceGeneralLotteryUserDataResetResult struct {
	Success *GeneralLotteryUserDataResetResponse `thrift:"success,0,optional"`
}

func NewApiServiceGeneralLotteryUserDataResetResult() *ApiServiceGeneralLotteryUserDataResetResult {
	return &ApiServiceGeneralLotteryUserDataResetResult{}
}

func (p *ApiServiceGeneralLotteryUserDataResetResult) InitDefault() {
}

var ApiServiceGeneralLotteryUserDataResetResult_Success_DEFAULT *GeneralLotteryUserDataResetResponse

func (p *ApiServiceGeneralLotteryUserDataResetResult) GetSuccess() (v *GeneralLotteryUserDataResetResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceGeneralLotteryUserDataResetResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceGeneralLotteryUserDataResetResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceGeneralLotteryUserDataResetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceGeneralLotteryUserDataResetResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceGeneralLotteryUserDataResetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryUserDataResetResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGeneralLotteryUserDataResetResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceGeneralLotteryUserDataResetResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryUserDataReset_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryUserDataResetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryUserDataResetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceGeneralLotteryUserDataResetResult(%+v)", *p)

}

type ApiServiceGeneralLotteryUserDataQueryArgs struct {
	Request *GeneralLotteryUserDataQueryRequest `thrift:"request,1"`
}

func NewApiServiceGeneralLotteryUserDataQueryArgs() *ApiServiceGeneralLotteryUserDataQueryArgs {
	return &ApiServiceGeneralLotteryUserDataQueryArgs{}
}

func (p *ApiServiceGeneralLotteryUserDataQueryArgs) InitDefault() {
}

var ApiServiceGeneralLotteryUserDataQueryArgs_Request_DEFAULT *GeneralLotteryUserDataQueryRequest

func (p *ApiServiceGeneralLotteryUserDataQueryArgs) GetRequest() (v *GeneralLotteryUserDataQueryRequest) {
	if !p.IsSetRequest() {
		return ApiServiceGeneralLotteryUserDataQueryArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceGeneralLotteryUserDataQueryArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceGeneralLotteryUserDataQueryArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceGeneralLotteryUserDataQueryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceGeneralLotteryUserDataQueryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryUserDataQueryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGeneralLotteryUserDataQueryRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceGeneralLotteryUserDataQueryArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryUserDataQuery_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryUserDataQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryUserDataQueryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceGeneralLotteryUserDataQueryArgs(%+v)", *p)

}

type ApiServiceGeneralLotteryUserDataQueryResult struct {
	Success *GeneralLotteryUserDataQueryResponse `thrift:"success,0,optional"`
}

func NewApiServiceGeneralLotteryUserDataQueryResult() *ApiServiceGeneralLotteryUserDataQueryResult {
	return &ApiServiceGeneralLotteryUserDataQueryResult{}
}

func (p *ApiServiceGeneralLotteryUserDataQueryResult) InitDefault() {
}

var ApiServiceGeneralLotteryUserDataQueryResult_Success_DEFAULT *GeneralLotteryUserDataQueryResponse

func (p *ApiServiceGeneralLotteryUserDataQueryResult) GetSuccess() (v *GeneralLotteryUserDataQueryResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceGeneralLotteryUserDataQueryResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceGeneralLotteryUserDataQueryResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceGeneralLotteryUserDataQueryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceGeneralLotteryUserDataQueryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceGeneralLotteryUserDataQueryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryUserDataQueryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGeneralLotteryUserDataQueryResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceGeneralLotteryUserDataQueryResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GeneralLotteryUserDataQuery_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryUserDataQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceGeneralLotteryUserDataQueryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceGeneralLotteryUserDataQueryResult(%+v)", *p)

}

type ApiServiceUserLoginArgs struct {
	Request *UserLoginRequest `thrift:"request,1"`
}

func NewApiServiceUserLoginArgs() *ApiServiceUserLoginArgs {
	return &ApiServiceUserLoginArgs{}
}

func (p *ApiServiceUserLoginArgs) InitDefault() {
}

var ApiServiceUserLoginArgs_Request_DEFAULT *UserLoginRequest

func (p *ApiServiceUserLoginArgs) GetRequest() (v *UserLoginRequest) {
	if !p.IsSetRequest() {
		return ApiServiceUserLoginArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceUserLoginArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceUserLoginArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceUserLoginArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceUserLoginArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceUserLoginArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUserLoginRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceUserLoginArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UserLogin_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceUserLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceUserLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceUserLoginArgs(%+v)", *p)

}

type ApiServiceUserLoginResult struct {
	Success *UserLoginResponse `thrift:"success,0,optional"`
}

func NewApiServiceUserLoginResult() *ApiServiceUserLoginResult {
	return &ApiServiceUserLoginResult{}
}

func (p *ApiServiceUserLoginResult) InitDefault() {
}

var ApiServiceUserLoginResult_Success_DEFAULT *UserLoginResponse

func (p *ApiServiceUserLoginResult) GetSuccess() (v *UserLoginResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceUserLoginResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceUserLoginResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceUserLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceUserLoginResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceUserLoginResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceUserLoginResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUserLoginResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceUserLoginResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UserLogin_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceUserLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceUserLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceUserLoginResult(%+v)", *p)

}

type ApiServiceUserInfoDetailArgs struct {
	Request *UserInfoDetailRequest `thrift:"request,1"`
}

func NewApiServiceUserInfoDetailArgs() *ApiServiceUserInfoDetailArgs {
	return &ApiServiceUserInfoDetailArgs{}
}

func (p *ApiServiceUserInfoDetailArgs) InitDefault() {
}

var ApiServiceUserInfoDetailArgs_Request_DEFAULT *UserInfoDetailRequest

func (p *ApiServiceUserInfoDetailArgs) GetRequest() (v *UserInfoDetailRequest) {
	if !p.IsSetRequest() {
		return ApiServiceUserInfoDetailArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceUserInfoDetailArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceUserInfoDetailArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceUserInfoDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceUserInfoDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceUserInfoDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUserInfoDetailRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceUserInfoDetailArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UserInfoDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceUserInfoDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceUserInfoDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceUserInfoDetailArgs(%+v)", *p)

}

type ApiServiceUserInfoDetailResult struct {
	Success *UserInfoDetailResponse `thrift:"success,0,optional"`
}

func NewApiServiceUserInfoDetailResult() *ApiServiceUserInfoDetailResult {
	return &ApiServiceUserInfoDetailResult{}
}

func (p *ApiServiceUserInfoDetailResult) InitDefault() {
}

var ApiServiceUserInfoDetailResult_Success_DEFAULT *UserInfoDetailResponse

func (p *ApiServiceUserInfoDetailResult) GetSuccess() (v *UserInfoDetailResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceUserInfoDetailResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceUserInfoDetailResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceUserInfoDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceUserInfoDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceUserInfoDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceUserInfoDetailResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUserInfoDetailResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceUserInfoDetailResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("UserInfoDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceUserInfoDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceUserInfoDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceUserInfoDetailResult(%+v)", *p)

}

type ApiServiceCommonNoticeArgs struct {
	Request *CommonNoticeRequest `thrift:"request,1"`
}

func NewApiServiceCommonNoticeArgs() *ApiServiceCommonNoticeArgs {
	return &ApiServiceCommonNoticeArgs{}
}

func (p *ApiServiceCommonNoticeArgs) InitDefault() {
}

var ApiServiceCommonNoticeArgs_Request_DEFAULT *CommonNoticeRequest

func (p *ApiServiceCommonNoticeArgs) GetRequest() (v *CommonNoticeRequest) {
	if !p.IsSetRequest() {
		return ApiServiceCommonNoticeArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceCommonNoticeArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceCommonNoticeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceCommonNoticeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceCommonNoticeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceCommonNoticeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCommonNoticeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceCommonNoticeArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CommonNotice_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceCommonNoticeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceCommonNoticeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceCommonNoticeArgs(%+v)", *p)

}

type ApiServiceCommonNoticeResult struct {
	Success *CommonNoticeResponse `thrift:"success,0,optional"`
}

func NewApiServiceCommonNoticeResult() *ApiServiceCommonNoticeResult {
	return &ApiServiceCommonNoticeResult{}
}

func (p *ApiServiceCommonNoticeResult) InitDefault() {
}

var ApiServiceCommonNoticeResult_Success_DEFAULT *CommonNoticeResponse

func (p *ApiServiceCommonNoticeResult) GetSuccess() (v *CommonNoticeResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceCommonNoticeResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceCommonNoticeResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceCommonNoticeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceCommonNoticeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceCommonNoticeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceCommonNoticeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCommonNoticeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceCommonNoticeResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CommonNotice_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceCommonNoticeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceCommonNoticeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceCommonNoticeResult(%+v)", *p)

}

type ApiServiceAccountSearchArgs struct {
	Request *jym.AccountSearchRequest `thrift:"request,1"`
}

func NewApiServiceAccountSearchArgs() *ApiServiceAccountSearchArgs {
	return &ApiServiceAccountSearchArgs{}
}

func (p *ApiServiceAccountSearchArgs) InitDefault() {
}

var ApiServiceAccountSearchArgs_Request_DEFAULT *jym.AccountSearchRequest

func (p *ApiServiceAccountSearchArgs) GetRequest() (v *jym.AccountSearchRequest) {
	if !p.IsSetRequest() {
		return ApiServiceAccountSearchArgs_Request_DEFAULT
	}
	return p.Request
}

var fieldIDToName_ApiServiceAccountSearchArgs = map[int16]string{
	1: "request",
}

func (p *ApiServiceAccountSearchArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApiServiceAccountSearchArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceAccountSearchArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceAccountSearchArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := jym.NewAccountSearchRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *ApiServiceAccountSearchArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("AccountSearch_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceAccountSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ApiServiceAccountSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceAccountSearchArgs(%+v)", *p)

}

type ApiServiceAccountSearchResult struct {
	Success *jym.AccountSearchResponse `thrift:"success,0,optional"`
}

func NewApiServiceAccountSearchResult() *ApiServiceAccountSearchResult {
	return &ApiServiceAccountSearchResult{}
}

func (p *ApiServiceAccountSearchResult) InitDefault() {
}

var ApiServiceAccountSearchResult_Success_DEFAULT *jym.AccountSearchResponse

func (p *ApiServiceAccountSearchResult) GetSuccess() (v *jym.AccountSearchResponse) {
	if !p.IsSetSuccess() {
		return ApiServiceAccountSearchResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_ApiServiceAccountSearchResult = map[int16]string{
	0: "success",
}

func (p *ApiServiceAccountSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApiServiceAccountSearchResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ApiServiceAccountSearchResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ApiServiceAccountSearchResult) ReadField0(iprot thrift.TProtocol) error {
	_field := jym.NewAccountSearchResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ApiServiceAccountSearchResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("AccountSearch_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ApiServiceAccountSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ApiServiceAccountSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiServiceAccountSearchResult(%+v)", *p)

}
