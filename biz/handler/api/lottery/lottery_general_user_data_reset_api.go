// Code generated by hertz generator.

package lottery

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	hertzconsts "github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/keycasiter/3g_game/biz/dal/mysql"
	api "github.com/keycasiter/3g_game/biz/model/api"
	"github.com/keycasiter/3g_game/biz/model/po"
	"github.com/keycasiter/3g_game/biz/util"
)

// GeneralLotteryUserDataReset @Summary 用户武将抽卡数据重置
// @Description 用户武将抽卡数据重置
// @Tags 模拟抽卡
// @Accept json
// @Produce json
// @Router /v1/lottery/general/user_data_reset [POST]
func GeneralLotteryUserDataReset(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GeneralLotteryUserDataResetRequest
	var resp api.GeneralLotteryUserDataResetResponse
	resp.Meta = util.BuildSuccMeta()

	err = c.BindAndValidate(&req)
	hlog.CtxInfof(ctx, "GeneralLotteryUserDataReset Req:%s", util.ToJsonString(ctx, req))
	if err != nil {
		c.String(hertzconsts.StatusBadRequest, err.Error())
		return
	}
	if req.Uid == "" || req.GeneralLotteryPool == 0 {
		resp.Meta = util.BuildParamErrMeta()
		c.JSON(hertzconsts.StatusOK, resp)
		return
	}
	userLotteryInfo, err := mysql.NewUserGeneralLotteryInfo().QueryUserGeneralLotteryInfo(ctx, req.Uid, req.GeneralLotteryPool)
	if err != nil {
		hlog.CtxErrorf(ctx, "GeneralLotteryUserDataReset err:%v", err)
		resp.Meta = util.BuildFailMeta()
		c.JSON(hertzconsts.StatusOK, resp)
		return
	}
	if userLotteryInfo != nil && userLotteryInfo.Id != 0 {
		err = mysql.NewUserGeneralLotteryInfo().UpdateUserGeneralLotteryInfo(ctx, &po.UserGeneralLotteryInfo{
			Uid:             req.Uid,
			CardPoolId:      req.GeneralLotteryPool,
			NotHitLev5Times: 0,
		})
		if err != nil {
			hlog.CtxErrorf(ctx, "GeneralLotteryUserDataReset err:%v", err)
			resp.Meta = util.BuildFailMeta()
			c.JSON(hertzconsts.StatusOK, resp)
			return
		}
	}

	hlog.CtxInfof(ctx, "GeneralLotteryUserDataReset Resp:%s", util.ToJsonString(ctx, resp))

	c.JSON(hertzconsts.StatusOK, resp)
}
