// Code generated by hertz generator.

package api

import (
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	hertzconsts "github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/keycasiter/3g_game/biz/consts"
	"github.com/keycasiter/3g_game/biz/dal/cache"
	"github.com/keycasiter/3g_game/biz/dal/mysql"
	"github.com/keycasiter/3g_game/biz/logic/lottery"
	api "github.com/keycasiter/3g_game/biz/model/api"
	"github.com/keycasiter/3g_game/biz/model/enum"
	"github.com/keycasiter/3g_game/biz/model/po"
	"github.com/keycasiter/3g_game/biz/model/vo"
	"github.com/keycasiter/3g_game/biz/util"
)

// GeneralLotteryDo .
// @router /v1/lottery/general/do [POST]
func GeneralLotteryDo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GeneralLotteryDoRequest
	var resp api.GeneralLotteryDoResponse
	resp.Meta = util.BuildSuccMeta()

	err = c.BindAndValidate(&req)
	hlog.CtxInfof(ctx, "GeneralLotteryDo Req:%s", util.ToJsonString(ctx, req))
	if err != nil {
		c.String(hertzconsts.StatusBadRequest, err.Error())
		return
	}
	if req.Uid == "" || req.RollTimes == 0 || req.GeneralLotteryPool == 0 {
		hlog.CtxErrorf(ctx, "GeneralLotteryDo param err")
		resp.Meta = util.BuildParamErrMeta()
		c.JSON(hertzconsts.StatusOK, resp)
		return
	}

	logicResp, err := lottery.NewGeneralLotteryLogic(ctx, &vo.GeneralLotteryRequest{
		GeneralLottery: consts.GeneralLotteryPool(req.GeneralLotteryPool),
		RollTimes:      req.RollTimes,
		Uid:            req.Uid,
	}).Run()
	if err != nil {
		hlog.CtxErrorf(ctx, "GeneralLotteryDoLogic handle err:%v", err)
		resp.Meta = util.BuildFailMetaWithMsg(err.Error())
		c.JSON(hertzconsts.StatusOK, resp)
		return
	}

	//组合resp
	generalLotteryInfoList := make([]*api.GeneralLotteryDoInfo, 0)
	for _, info := range logicResp.GeneralLotteryInfoList {
		generalLotteryInfoList = append(generalLotteryInfoList, &api.GeneralLotteryDoInfo{
			GeneralInfo: &api.MetadataGeneral{
				Id:             info.GeneralInfo.Id,
				Name:           info.GeneralInfo.Name,
				GeneralQuality: enum.GeneralQuality(info.GeneralInfo.Quality),
				AvatarUrl:      info.GeneralInfo.AvatarUrl,
			},
			HitNum:      info.HitNum,
			HitRate:     info.HitRate,
			LotteryRate: info.LotteryRate,
		})
	}

	resp.Hit5LevGeneralNum = logicResp.Hit5LevGeneralNum
	resp.ProtectedMustHitNum = logicResp.ProtectedMustHitNum
	resp.GeneralLotteryInfoList = generalLotteryInfoList
	resp.NotHitLev5Times = logicResp.NotHitLev5Times

	hlog.CtxInfof(ctx, "GeneralLotteryDo Resp:%s", util.ToJsonString(ctx, resp))

	c.JSON(hertzconsts.StatusOK, resp)
}

// GeneralLotteryInfoQuery .
// @router /v1/lottery/general/info_query [GET]
func GeneralLotteryInfoQuery(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GeneralLotteryInfoQueryRequest
	var resp api.GeneralLotteryInfoQueryResponse
	resp.Meta = util.BuildSuccMeta()

	err = c.BindAndValidate(&req)
	hlog.CtxInfof(ctx, "GeneralLotteryInfoQuery Req:%s", util.ToJsonString(ctx, req))
	if err != nil {
		c.String(hertzconsts.StatusBadRequest, err.Error())
		return
	}
	if req.GeneralLotteryPool == 0 {
		resp.Meta = util.BuildParamErrMeta()
		c.JSON(hertzconsts.StatusOK, resp)
		return
	}

	//组合resp
	generalLotteryInfoList := make([]*api.GeneralLotterInfoQueryInfo, 0)
	generalInfos := make([]*api.MetadataGeneral, 0)
	generalPool := consts.GeneralLotteryPool(req.GeneralLotteryPool)
	if generalMap, ok := consts.GeneralLotteryPoolMap[generalPool]; ok {
		for generalId, _ := range generalMap {
			var general *po.General
			//从缓存获取
			if vo, okk := cache.CacheGeneralMap[int64(generalId)]; okk {
				general = vo
			}
			generalInfos = append(generalInfos, &api.MetadataGeneral{
				Id:             int64(generalId),
				Name:           general.Name,
				GeneralQuality: enum.GeneralQuality(general.Quality),
				AvatarUrl:      general.AvatarUrl,
			})
		}
		generalLotteryInfoList = append(generalLotteryInfoList, &api.GeneralLotterInfoQueryInfo{
			GeneralInfoList:        generalInfos,
			GeneralLotteryPool:     int64(generalPool),
			GeneralLotteryPoolName: fmt.Sprintf("%v", generalPool),
		})
	}
	resp.GeneralLotteryPoolInfoList = generalLotteryInfoList

	hlog.CtxInfof(ctx, "GeneralLotteryInfoQuery Resp:%s", util.ToJsonString(ctx, resp))

	c.JSON(hertzconsts.StatusOK, resp)
}

// GeneralLotteryRateQuery .
// @router /v1/lottery/general/rate_query [GET]
func GeneralLotteryRateQuery(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GeneralLotteryRateQueryRequest
	var resp api.GeneralLotteryRateQueryResponse
	resp.Meta = util.BuildSuccMeta()

	err = c.BindAndValidate(&req)
	hlog.CtxInfof(ctx, "GeneralLotteryRateQuery Req:%s", util.ToJsonString(ctx, req))
	if err != nil {
		c.String(hertzconsts.StatusBadRequest, err.Error())
		return
	}

	//组合resp
	generalLotteryRateInfoList := make([]*api.GeneralLotteryRateQueryInfo, 0)
	for lotteryPoolId, generalPool := range consts.GeneralLotteryPoolMap {
		if rate, ok := generalPool[consts.General_Id(req.GeneralId)]; ok {
			generalLotteryRateInfoList = append(generalLotteryRateInfoList, &api.GeneralLotteryRateQueryInfo{
				LotteryRate:            rate,
				GeneralLotteryPool:     int64(lotteryPoolId),
				GeneralLotteryPoolName: fmt.Sprintf("%v", lotteryPoolId),
			})
		}
	}
	resp.GeneralLotteryRateInfoList = generalLotteryRateInfoList

	hlog.CtxInfof(ctx, "GeneralLotteryRateQuery Resp:%s", util.ToJsonString(ctx, resp))

	c.JSON(hertzconsts.StatusOK, resp)
}

// GeneralLotteryPoolQuery .
// @router /v1/lottery/general/pool_query [GET]
func GeneralLotteryPoolQuery(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GeneralLotteryPoolQueryRequest
	var resp api.GeneralLotteryPoolQueryResponse
	resp.Meta = util.BuildSuccMeta()

	err = c.BindAndValidate(&req)
	hlog.CtxInfof(ctx, "GeneralLotteryPoolInfoQuery Req:%s", util.ToJsonString(ctx, req))
	if err != nil {
		c.String(hertzconsts.StatusBadRequest, err.Error())
		return
	}

	//组合resp
	generalLotteryPoolInfoList := make([]*api.GeneralLotterPoolQueryInfo, 0)
	for _, lotteryPoolId := range consts.GeneralLotteryPoolArr {
		if _, ok := consts.GeneralLotteryPoolMap[lotteryPoolId]; ok {
			generalLotteryPoolInfoList = append(generalLotteryPoolInfoList, &api.GeneralLotterPoolQueryInfo{
				GeneralLotteryPool:     int64(lotteryPoolId),
				GeneralLotteryPoolName: fmt.Sprintf("%v", lotteryPoolId),
			})
		}
	}
	resp.GeneralLotteryPoolInfoList = generalLotteryPoolInfoList

	hlog.CtxInfof(ctx, "GeneralLotteryPoolInfoQuery Resp:%s", util.ToJsonString(ctx, resp))

	c.JSON(hertzconsts.StatusOK, resp)
}

// GeneralLotteryUserDataReset.
// @router /v1/lottery/general/user_data_reset [POST]
func GeneralLotteryUserDataReset(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GeneralLotteryUserDataResetRequest
	var resp api.GeneralLotteryUserDataResetResponse
	resp.Meta = util.BuildSuccMeta()

	err = c.BindAndValidate(&req)
	hlog.CtxInfof(ctx, "GeneralLotteryUserDataReset Req:%s", util.ToJsonString(ctx, req))
	if err != nil {
		c.String(hertzconsts.StatusBadRequest, err.Error())
		return
	}
	if req.Uid == "" || req.GeneralLotteryPool == 0 {
		resp.Meta = util.BuildParamErrMeta()
		c.JSON(hertzconsts.StatusOK, resp)
		return
	}
	userLotteryInfo, err := mysql.NewUserGeneralLotteryInfo().QueryUserGeneralLotteryInfo(ctx, req.Uid, req.GeneralLotteryPool)
	if err != nil {
		hlog.CtxErrorf(ctx, "GeneralLotteryUserDataReset err:%v", err)
		resp.Meta = util.BuildFailMeta()
		c.JSON(hertzconsts.StatusOK, resp)
		return
	}
	if userLotteryInfo != nil && userLotteryInfo.Id != 0 {
		err = mysql.NewUserGeneralLotteryInfo().UpdateUserGeneralLotteryInfo(ctx, &po.UserGeneralLotteryInfo{
			Uid:             req.Uid,
			CardPoolId:      req.GeneralLotteryPool,
			NotHitLev5Times: 0,
		})
		if err != nil {
			hlog.CtxErrorf(ctx, "GeneralLotteryUserDataReset err:%v", err)
			resp.Meta = util.BuildFailMeta()
			c.JSON(hertzconsts.StatusOK, resp)
			return
		}
	}

	hlog.CtxInfof(ctx, "GeneralLotteryUserDataReset Resp:%s", util.ToJsonString(ctx, resp))

	c.JSON(hertzconsts.StatusOK, resp)
}

// GeneralLotteryUserDataQuery.
// @router /v1/lottery/general/user_data_query [GET]
func GeneralLotteryUserDataQuery(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GeneralLotteryUserDataQueryRequest
	var resp api.GeneralLotteryUserDataQueryResponse
	resp.Meta = util.BuildSuccMeta()

	err = c.BindAndValidate(&req)
	hlog.CtxInfof(ctx, "GeneralLotteryUserDataQuery Req:%s", util.ToJsonString(ctx, req))
	if err != nil {
		c.String(hertzconsts.StatusBadRequest, err.Error())
		return
	}
	if req.Uid == "" || req.GeneralLotteryPool == 0 {
		resp.Meta = util.BuildParamErrMeta()
		c.JSON(hertzconsts.StatusOK, resp)
		return
	}
	userLotteryInfo, err := mysql.NewUserGeneralLotteryInfo().QueryUserGeneralLotteryInfo(ctx, req.Uid, req.GeneralLotteryPool)
	if err != nil {
		hlog.CtxErrorf(ctx, "GeneralLotteryUserDataQuery err:%v", err)
		resp.Meta = util.BuildFailMeta()
		c.JSON(hertzconsts.StatusOK, resp)
		return
	}
	//组装resp
	resp.GeneralLotteryDataQueryInfo = &api.GeneralLotteryUserDataQueryInfo{
		Uid:                userLotteryInfo.Uid,
		GeneralLotteryPool: userLotteryInfo.CardPoolId,
		NotHitLev5Times:    userLotteryInfo.NotHitLev5Times,
	}

	hlog.CtxInfof(ctx, "GeneralLotteryUserDataQuery Resp:%s", util.ToJsonString(ctx, resp))

	c.JSON(hertzconsts.StatusOK, resp)
}
